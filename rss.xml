<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;&lt; 书集 &gt;&gt;</title>
  
  <subtitle>一个私人知识储备库</subtitle>
  <link href="https://wooxin.github.io/rss.xml" rel="self"/>
  
  <link href="https://wooxin.github.io/"/>
  <updated>2025-09-20T14:20:18.726Z</updated>
  <id>https://wooxin.github.io/</id>
  
  <author>
    <name>Wooxin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux数据库 - mysql MyCat</title>
    <link href="https://wooxin.github.io/posts/b2e15cb6/"/>
    <id>https://wooxin.github.io/posts/b2e15cb6/</id>
    <published>2025-09-20T14:19:56.000Z</published>
    <updated>2025-09-20T14:20:18.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中间件"><a class="markdownIt-Anchor" href="#中间件"></a> 中间件</h2><h3 id="mycat实现读写分离"><a class="markdownIt-Anchor" href="#mycat实现读写分离"></a> mycat实现读写分离</h3><h4 id="mycat服务器"><a class="markdownIt-Anchor" href="#mycat服务器"></a> mycat服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载安装mycat</span><br>wget https://github.com/MyCATApache/Mycat-download<br>tar -zxf mycat.tar.gz -C /usr/local/mycat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载安装jdk</span><br>wget https://github.com/jdk/jdk1.8<br>tar -zxf jdk1.8.tar.gz -C /usr/local/jdk<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在 /etc/profile 写入</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">jdk</span><br>JAVA_HOME=/usr/local/jdk1.8.0_144/<br>PATH=$JAVA_HOME/bin:$PATH<br>export JAVA_HOME PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在终端测试java是否安装成功</span><br>java -version<br></code></pre></td></tr></table></figure><h5 id="serverxml"><a class="markdownIt-Anchor" href="#serverxml"></a> server.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mycat&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;readOnly&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="schemaxml"><a class="markdownIt-Anchor" href="#schemaxml"></a> schema.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:schema <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;db&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.10.31:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">readHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostS2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.10.93:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="启动mycat"><a class="markdownIt-Anchor" href="#启动mycat"></a> 启动mycat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mycat/bin/mycat start<br></code></pre></td></tr></table></figure><h5 id="进入mycat"><a class="markdownIt-Anchor" href="#进入mycat"></a> 进入mycat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -umycat -p123 -h&#123;mycat服务器IP&#125; -P 8066<br></code></pre></td></tr></table></figure><h5 id="查看端口"><a class="markdownIt-Anchor" href="#查看端口"></a> 查看端口</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master2 ~]# ss -anptl | grep 8066                                                                                                          <br>LISTEN     0      100       [::]:8066                  [::]:*                   users:((&quot;java&quot;,pid=2642,fd=77))<br></code></pre></td></tr></table></figure><h4 id="mysql读服务器"><a class="markdownIt-Anchor" href="#mysql读服务器"></a> mysql读服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all on mydb.* to mycat@&#x27;%&#x27; identified by &#x27;123&#x27;;<br></code></pre></td></tr></table></figure><h4 id="mysql写服务器"><a class="markdownIt-Anchor" href="#mysql写服务器"></a> mysql写服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all on mydb.* to mycat@&#x27;%&#x27; identified by &#x27;123&#x27;;<br></code></pre></td></tr></table></figure><hr /><h3 id="mycat实现垂直切分"><a class="markdownIt-Anchor" href="#mycat实现垂直切分"></a> mycat实现垂直切分</h3><p>垂直切分(分库)<br />一个数据库由很多表的构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同的数据库上面，这样也就将数据或者说压力分担到不同的库上面</p><h4 id="mycat服务器-2"><a class="markdownIt-Anchor" href="#mycat服务器-2"></a> mycat服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载安装mycat</span><br>wget https://github.com/MyCATApache/Mycat-download<br>tar -zxf mycat.tar.gz -C /usr/local/mycat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载安装jdk</span><br>wget https://github.com/jdk/jdk1.8<br>tar -zxf jdk1.8.tar.gz -C /usr/local/jdk<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在 /etc/profile 写入</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">jdk</span><br>JAVA_HOME=/usr/local/jdk1.8.0_144/<br>PATH=$JAVA_HOME/bin:$PATH<br>export JAVA_HOME PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在终端测试java是否安装成功</span><br>java -version<br></code></pre></td></tr></table></figure><h5 id="serverxml-2"><a class="markdownIt-Anchor" href="#serverxml-2"></a> server.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mycat&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;readOnly&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="schemaxml-2"><a class="markdownIt-Anchor" href="#schemaxml-2"></a> schema.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:schema <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-attr">primaryKey</span>=<span class="hljs-string">&quot;ID&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;global&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t2&quot;</span> <span class="hljs-attr">primaryKey</span>=<span class="hljs-string">&quot;NAME&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;global&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn2&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;shop&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn2&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost2&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;shop&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.10.31:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;shop&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost2&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.10.93:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;shop&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="启动mycat-2"><a class="markdownIt-Anchor" href="#启动mycat-2"></a> 启动mycat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mycat/bin/mycat start<br></code></pre></td></tr></table></figure><h5 id="进入mycat-2"><a class="markdownIt-Anchor" href="#进入mycat-2"></a> 进入mycat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -umycat -p123 -h&#123;mycat服务器IP&#125; -P 8066<br></code></pre></td></tr></table></figure><h5 id="查看端口-2"><a class="markdownIt-Anchor" href="#查看端口-2"></a> 查看端口</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master2 ~]# ss -anptl | grep 8066                                                                                                          <br>LISTEN     0      100       [::]:8066                  [::]:*                   users:((&quot;java&quot;,pid=2642,fd=77))<br></code></pre></td></tr></table></figure><h4 id="mysql读服务器-2"><a class="markdownIt-Anchor" href="#mysql读服务器-2"></a> mysql读服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all on mydb.* to shop@&#x27;%&#x27; identified by &#x27;123&#x27;;<br></code></pre></td></tr></table></figure><h4 id="mysql写服务器-2"><a class="markdownIt-Anchor" href="#mysql写服务器-2"></a> mysql写服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all on mydb.* to shop@&#x27;%&#x27; identified by &#x27;123&#x27;;<br></code></pre></td></tr></table></figure><hr /><h3 id="mycat实现水平切分"><a class="markdownIt-Anchor" href="#mycat实现水平切分"></a> mycat实现水平切分</h3><h4 id="mycat服务器-3"><a class="markdownIt-Anchor" href="#mycat服务器-3"></a> mycat服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载安装mycat</span><br>wget https://github.com/MyCATApache/Mycat-download<br>tar -zxf mycat.tar.gz -C /usr/local/mycat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载安装jdk</span><br>wget https://github.com/jdk/jdk1.8<br>tar -zxf jdk1.8.tar.gz -C /usr/local/jdk<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在 /etc/profile 写入</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">jdk</span><br>JAVA_HOME=/usr/local/jdk1.8.0_144/<br>PATH=$JAVA_HOME/bin:$PATH<br>export JAVA_HOME PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在终端测试java是否安装成功</span><br>java -version<br></code></pre></td></tr></table></figure><h5 id="serverxml-3"><a class="markdownIt-Anchor" href="#serverxml-3"></a> server.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mycat&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;readOnly&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="schemaxml-3"><a class="markdownIt-Anchor" href="#schemaxml-3"></a> schema.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:schema <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TESTDB&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t100&quot;</span> <span class="hljs-attr">primaryKey</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1,dn2&quot;</span> <span class="hljs-attr">rule</span>=<span class="hljs-string">&quot;rule1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;shop2&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn2&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;localhost2&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;shop2&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost1&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM1&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.10.31:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;shop2&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost2&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span>  <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostM2&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.10.93:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;shop2&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="启动mycat-3"><a class="markdownIt-Anchor" href="#启动mycat-3"></a> 启动mycat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mycat/bin/mycat start<br></code></pre></td></tr></table></figure><h5 id="进入mycat-3"><a class="markdownIt-Anchor" href="#进入mycat-3"></a> 进入mycat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -umycat -p123 -h&#123;mycat服务器IP&#125; -P 8066<br></code></pre></td></tr></table></figure><h5 id="查看端口-3"><a class="markdownIt-Anchor" href="#查看端口-3"></a> 查看端口</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@master2 ~]# ss -anptl | grep 8066                                                                                                          <br>LISTEN     0      100       [::]:8066                  [::]:*                   users:((&quot;java&quot;,pid=2642,fd=77))<br></code></pre></td></tr></table></figure><h4 id="mysql读服务器-3"><a class="markdownIt-Anchor" href="#mysql读服务器-3"></a> mysql读服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all on mydb.* to shop2@&#x27;%&#x27; identified by &#x27;123&#x27;;<br></code></pre></td></tr></table></figure><h4 id="mysql写服务器-3"><a class="markdownIt-Anchor" href="#mysql写服务器-3"></a> mysql写服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grant all on mydb.* to shop2@&#x27;%&#x27; identified by &#x27;123&#x27;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;中间件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#中间件&quot;&gt;&lt;/a&gt; 中间件&lt;/h2&gt;
&lt;h3 id=&quot;mycat实现读写分离&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mycat实现读写分离&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql MHA</title>
    <link href="https://wooxin.github.io/posts/3cc0e989/"/>
    <id>https://wooxin.github.io/posts/3cc0e989/</id>
    <published>2025-09-20T14:18:46.000Z</published>
    <updated>2025-09-20T14:19:06.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mha介绍"><a class="markdownIt-Anchor" href="#mha介绍"></a> MHA介绍</h2><ol><li>MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，它由日本DeNA公司的youshimaton（现就职于Facebook公司）开发，是一套优秀的作为MySQL高可用性环境下故障切换和主从提升的高可用软件。在MySQL故障切换过程中，MHA能做到在0~30秒之内自动完成数据库的故障切换操作，并且在进行故障切换的过程中，MHA能在最大程度上保证数据的一致性，以达到真正意义上的高可用。</li><li>该软件由两部分组成：MHA Manager（管理节点）和MHA Node（数据节点）。MHA Manager可以单独部署在一台独立的机器上管理多个master-slave集群，也可以部署在一台slave节点上。MHA Node运行在每台MySQL服务器上，MHA Manager会定时探测集群中的master节点，当master出现故障时，它可以自动将最新数据的slave提升为新的master，然后将所有其他的slave重新指向新的master。整个故障转移过程对应用程序完全透明。</li><li>在MHA自动故障切换过程中，MHA试图从宕机的主服务器上保存二进制日志，最大程度的保证数据的不丢失，但这并不总是可行的。例如，如果主服务器硬件故障或无法通过ssh访问，MHA没法保存二进制日志，只进行故障转移而丢失了最新的数据。使用MySQL 5.5的半同步复制，可以大大降低数据丢失的风险。MHA可以与半同步复制结合起来。如果只有一个slave已经收到了最新的二进制日志，MHA可以将最新的二进制日志应用于其他所有的slave服务器上，因此可以保证所有节点的数据一致性。</li></ol><h2 id="mha工作原理"><a class="markdownIt-Anchor" href="#mha工作原理"></a> MHA工作原理</h2><ul><li>从宕机崩溃的master保存二进制日志事件（binlog events）；</li><li>识别含有最新更新的slave；</li><li>应用差异的中继日志（relay log）到其他slave；</li><li>提升一个slave为新master；</li><li>使用其他的slave连接新的master进行复制</li></ul><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><h3 id="mha-服务器"><a class="markdownIt-Anchor" href="#mha-服务器"></a> MHA 服务器</h3><h4 id="开启免密登录"><a class="markdownIt-Anchor" href="#开启免密登录"></a> 开启免密登录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成ssh密钥</span><br>ssh-keygen<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到master服务器</span><br>ssh-copy-id master@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到slave1服务器</span><br>ssh-copy-id slave1@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到slave2服务器</span><br>ssh-copy-id slave2@example.com<br></code></pre></td></tr></table></figure><h4 id="安装mha-manager"><a class="markdownIt-Anchor" href="#安装mha-manager"></a> 安装MHA Manager</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载aliyun epel源</span><br>wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装所需依赖</span><br>yum install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装MHA Manager 的rpm包</span><br>rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装完成后，在/usr/bin/目录下有如下MHA相关文件：</span><br>• masterha_check_ssh:检查MHA的SSH配置情况。<br>• masterha_check_repl:检查MySQL复制状况。<br>• masterha_manager:启动MHA。<br>• masterha_check_status:检测当前MHA运行状态。<br>• masterha_master_monitor:检测Master是否宕机。<br>• masterha_master_switch:控制故障转移（自动或手动）。<br>• masterha_conf_host:添加或删除配置的server信息。<br></code></pre></td></tr></table></figure><h4 id="配置mha"><a class="markdownIt-Anchor" href="#配置mha"></a> 配置MHA</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">建立配置文件目录</span><br>mkdir -p /etc/masterha<br>mkdir -p /var/log/masterha/app1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建配置文件,并修改</span><br>vim /etc/masterha/app1.cnf<br><br>[server default]<br>manager_log=/var/log/masterha/app1/manager.log<br>manager_workdir=/var/log/masterha/app1<br>remote_workdir=/var/log/masterha/app1<br>user=root<br>password=123<br>ping_interval=1<br>repl_user=slave<br>repl_password=123<br>shutdown_script=&quot;&quot;<br>ssh_user=root<br><br>[server1]<br>candidate_master=1<br>hostname=192.168.0.202<br>ssh_port=22<br>master_binlog_dir=/tmp/<br><br>[server2]<br>candidate_master=1<br>hostname=192.168.0.203<br>ssh_port=22<br>master_binlog_dir=/tmp/<br><br>[server3]<br>candidate_master=1<br>hostname=192.168.0.204<br>ssh_port=22<br>master_binlog_dir=/tmp/<br></code></pre></td></tr></table></figure><h4 id="连接测试"><a class="markdownIt-Anchor" href="#连接测试"></a> 连接测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检测配置是否正常</span><br>masterha_check_repl --conf=/etc/masterha/app1.cnf                 # MySQL Replication Health is OK. 代表成功  | not yes 代表失败<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试密钥是否正常</span><br>masterha_check_ssh --conf=/etc/masterha/app1.cnf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动MHA服务</span><br>masterha_manager --conf=/etc/masterha/app1.cnf &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭服务</span><br>masterha_stop --conf=/etc/masterha/app1.cnf<br></code></pre></td></tr></table></figure><hr /><h3 id="master-服务器"><a class="markdownIt-Anchor" href="#master-服务器"></a> master 服务器</h3><h4 id="开启免密登录-2"><a class="markdownIt-Anchor" href="#开启免密登录-2"></a> 开启免密登录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成ssh密钥</span><br>ssh-keygen<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到MHA服务器</span><br>ssh-copy-id MHA@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到slave1服务器</span><br>ssh-copy-id slave1@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到slave2服务器</span><br>ssh-copy-id slave2@example.com<br></code></pre></td></tr></table></figure><h4 id="安装mha-node"><a class="markdownIt-Anchor" href="#安装mha-node"></a> 安装MHA Node</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载aliyun epel源</span><br>wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装所需依赖</span><br>yum install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装MHA Node 的rpm包</span><br>rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装完成后，在/usr/bin/目录下有如下MHA相关文件：</span><br>• apply_diff_relay_logs：识别差异的中继日志事件并将其差异的事件应用于其它slave。<br>• filter_mysqlbinlog：去除不必要的ROLLBACK事件（MHA已不再使用这个工具）。<br>• purge_relay_logs：清除中继日志（不会阻塞SQL线程）。<br>• save_binary_logs：保存和复制master的二进制日志<br></code></pre></td></tr></table></figure><h4 id="开启logbin"><a class="markdownIt-Anchor" href="#开启logbin"></a> 开启logbin</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在 /etc/my.cnf 输入</span><br>[mysqld]<br>server-id=1<br>log-bin=/tmp/master<br>log-bin-index=/tmp/master<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分别给MHA root远程等登录与slave复制全部权限</span><br>grant all on *.* to root@&#x27;%&#x27; identified by &#x27;123&#x27;;<br>grant replication slave on *.* to &#123;username1&#125;@&#x27;%&#x27; identified by &#x27;&#123;password&#125;&#x27;;z<br></code></pre></td></tr></table></figure><hr /><h3 id="slave1-服务器"><a class="markdownIt-Anchor" href="#slave1-服务器"></a> slave1 服务器</h3><h4 id="开启免密登录-3"><a class="markdownIt-Anchor" href="#开启免密登录-3"></a> 开启免密登录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成ssh密钥</span><br>ssh-keygen<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到master服务器</span><br>ssh-copy-id master@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到MHA服务器</span><br>ssh-copy-id MHA@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到slave2服务器</span><br>ssh-copy-id slave2@example.com<br></code></pre></td></tr></table></figure><h4 id="安装mha-node-2"><a class="markdownIt-Anchor" href="#安装mha-node-2"></a> 安装MHA Node</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载aliyun epel源</span><br>wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装所需依赖</span><br>yum install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装MHA Node 的rpm包</span><br>rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装完成后，在/usr/bin/目录下有如下MHA相关文件：</span><br>• apply_diff_relay_logs：识别差异的中继日志事件并将其差异的事件应用于其它slave。<br>• filter_mysqlbinlog：去除不必要的ROLLBACK事件（MHA已不再使用这个工具）。<br>• purge_relay_logs：清除中继日志（不会阻塞SQL线程）。<br>• save_binary_logs：保存和复制master的二进制日志<br></code></pre></td></tr></table></figure><h4 id="开启logbin接收日志"><a class="markdownIt-Anchor" href="#开启logbin接收日志"></a> 开启logbin接收日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在 /etc/my.cnf 输入</span><br>[mysqld]<br>server-id=2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分别给MHA root远程等登录与slave复制全部权限</span><br>grant all on *.* to root@&#x27;%&#x27; identified by &#x27;123&#x27;;<br>grant replication slave on *.* to &#123;username1&#125;@&#x27;%&#x27; identified by &#x27;&#123;password&#125;&#x27;;<br></code></pre></td></tr></table></figure><h4 id="添加软连接"><a class="markdownIt-Anchor" href="#添加软连接"></a> 添加软连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果遇到找不到 mysql 或者 mysqlbinlog</span> <br>ln -s /usr/local/mysql/bin/mysql /usr/local/bin/mysql<br>ln -s /usr/local/mysql/bin/mysqlbinlog /usr/local/bin/mysqlbinlog<br></code></pre></td></tr></table></figure><hr /><h3 id="slave-2-服务器"><a class="markdownIt-Anchor" href="#slave-2-服务器"></a> slave 2 服务器</h3><h4 id="开启免密登录-4"><a class="markdownIt-Anchor" href="#开启免密登录-4"></a> 开启免密登录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成ssh密钥</span><br>ssh-keygen<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到master服务器</span><br>ssh-copy-id master@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到slave1服务器</span><br>ssh-copy-id slave1@example.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将ssh公钥copy到MHA服务器</span><br>ssh-copy-id MHA@example.com<br></code></pre></td></tr></table></figure><h4 id="安装mha-node-3"><a class="markdownIt-Anchor" href="#安装mha-node-3"></a> 安装MHA Node</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载aliyun epel源</span><br>wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装所需依赖</span><br>yum install perl-DBD-MySQL perl-Config-Tiny perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装MHA Node 的rpm包</span><br>rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装完成后，在/usr/bin/目录下有如下MHA相关文件：</span><br>• apply_diff_relay_logs：识别差异的中继日志事件并将其差异的事件应用于其它slave。<br>• filter_mysqlbinlog：去除不必要的ROLLBACK事件（MHA已不再使用这个工具）。<br>• purge_relay_logs：清除中继日志（不会阻塞SQL线程）。<br>• save_binary_logs：保存和复制master的二进制日志<br></code></pre></td></tr></table></figure><h4 id="开启logbin-2"><a class="markdownIt-Anchor" href="#开启logbin-2"></a> 开启logbin</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在 /etc/my.cnf 输入</span><br>[mysqld]<br>server-id=3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">分别给MHA root远程等登录与slave复制全部权限</span><br>grant all on *.* to root@&#x27;%&#x27; identified by &#x27;123&#x27;;<br>grant replication slave on *.* to &#123;username1&#125;@&#x27;%&#x27; identified by &#x27;&#123;password&#125;&#x27;;<br></code></pre></td></tr></table></figure><h4 id="添加软连接-2"><a class="markdownIt-Anchor" href="#添加软连接-2"></a> 添加软连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果遇到找不到 mysql 或者 mysqlbinlog</span> <br>ln -s /usr/local/mysql/bin/mysql /usr/local/bin/mysql<br>ln -s /usr/local/mysql/bin/mysqlbinlog /usr/local/bin/mysqlbinlog<br></code></pre></td></tr></table></figure><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mha介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mha介绍&quot;&gt;&lt;/a&gt; MHA介绍&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，它由</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql同步</title>
    <link href="https://wooxin.github.io/posts/b85bd126/"/>
    <id>https://wooxin.github.io/posts/b85bd126/</id>
    <published>2025-09-20T14:17:57.000Z</published>
    <updated>2025-09-20T14:18:17.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ab复制"><a class="markdownIt-Anchor" href="#ab复制"></a> AB复制</h2><p>首先我们先介绍什么是MySQL AB复制。 <br />AB复制又称主从复制，实现的是数据同步。如果要做MySQL AB复制，<a href="http://www.2cto.com/database/">数据库</a>版本尽量保持一致。如果版本不一致，从服务器版本高于主服务器，但是版本不一致不能做双向复制。MySQL AB复制有什么好处呢？有两点，第一是解决宕机带来的数据不一致，因为MySQL AB复制可以实时备份数据；第二点是减轻数据库服务器压力，这点很容易想到，多台服务器的性能一般比单台要好。但是MySQL AB复制不适用于大数据量，如果是大数据环境，推荐使用集群。<br />Mysql复制（replication）是一个异步的复制，从一个Mysql 实例（Master）复制到另一个Mysql 实例（Slave）。实现整个主从复制，需要由Master服务器上的IO进程，和Slave服务器上的Sql进程和IO进程共从完成。要实现主从复制，首先必须打开Master端的binary log（bin-log）功能，因为整个 <a href="http://www.it165.net/database/dbmy/">MySQL</a> 复制过程实际上就是Slave从Master端获取相应的二进制日志，然后再在自己slave端完全顺序的执行日志中所记录的各种操作。（二进制日志几乎记录了除select以外的所有针对数据库的sql操作语句）<br />主从复制的基本过程如下：</p><ol><li>Mysql  Slave端的IO进程连接上Master，向Master请求指定日志文件的指定位置（或者从最开始的日志）之后的日志内容；</li><li>Master接收到来自Slave的IO进程的请求后，负责复制的IO进程根据Slave的请求信息，读取相应日志内容，返回给Slave 的IO进程。并将本次请求读取的bin-log文件名及位置一起返回给Slave端。</li><li>Slave的IO进程接收到信息后，将接收到的日志内容依次添加到Slave端的relay-log文件的最末端，并将读取到的Master端的 bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚的告诉Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”；</li><li>Slave的Sql进程检测到relay-log中新增加了内容后，会马上解析relay-log的内容成为在Master端真实执行时候的那些可执行的内容，并在自身执行。</li></ol><h3 id="单机复制"><a class="markdownIt-Anchor" href="#单机复制"></a> 单机复制</h3><blockquote><p>最好先进行全库备份, 以免数据丢失</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -u root --all-databases &gt;&gt; /路径/&#123;文件&#125;.sock<br></code></pre></td></tr></table></figure><ol><li>在服务器A 开启binlog日志</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>server-id=1<br>log-bin=master<br>log-bin-index=master<br></code></pre></td></tr></table></figure><ol start="2"><li>在服务器A 给服务器B进行授权 使B服务器可以进行传输binlog日志</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">grant replication slave on *.* to &#123;username&#125;@&#x27;%&#x27; identified by &#x27;123&#x27;;<br><br># 在服务器B 测试是否可以正常登陆<br>mysql -u &#123;username&#125; -p123 -h &#123;服务器A ip&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在服务器B 开启binlog日志中的服务器名</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>server-id=2                                                           # 不能与服务器A相同<br></code></pre></td></tr></table></figure><ol start="4"><li>在服务器B 进行连接同步</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 首先确保 slave 关闭<br>stop slave;<br><br># 在服务器B 输入以下信息, 其中master_log_file和master_log_pos可以通过在服务器A输入 show master status\G进行获取<br>change master to master_host=&#x27;&#123;服务器A的IP&#125;&#x27;, master_user=&#x27;&#123;username&#125;&#x27;, master_password=&#x27;&#123;password&#125;&#x27;, master_log_file=&#x27;&#123;服务器a的binlog文件名&#125;&#x27;, master_log_pos=&#123;服务器A的binlog号&#125;;<br><br># 启动 slave <br>start slave;<br><br># 查看是否成功<br>show slave status\G;<br>  Slave_IO_Running: Yes<br>  Slave_SQL_Running: Yes<br></code></pre></td></tr></table></figure><hr /><h3 id="互为主从"><a class="markdownIt-Anchor" href="#互为主从"></a> 互为主从</h3><h4 id="主服务器a端"><a class="markdownIt-Anchor" href="#主服务器a端"></a> 主服务器A端</h4><ol><li>服务器A 开启binlog</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>server-id=1<br>log-bin=master1<br>log-bin-index=master1<br></code></pre></td></tr></table></figure><ol start="2"><li>服务器A 给服务器B进行登陆授权</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">grant replication slave on *.* to &#123;username1&#125;@&#x27;%&#x27; identified by &#x27;&#123;password&#125;&#x27;;<br></code></pre></td></tr></table></figure><ol start="3"><li>在服务器B 进行连接同步</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 首先确保 slave 关闭<br>stop slave;<br><br># 在服务器A 输入以下信息, 其中master_log_file和master_log_pos可以通过在服务器A输入 show master status\G进行获取<br>change master to master_host=&#x27;&#123;服务器B的IP&#125;&#x27;, master_user=&#x27;&#123;username2&#125;&#x27;, master_password=&#x27;&#123;password&#125;&#x27;, master_log_file=&#x27;&#123;服务器B的binlog文件名&#125;&#x27;, master_log_pos=&#123;服务器B的binlog号&#125;;<br><br># 启动 slave <br>start slave;<br><br># 查看是否成功<br>show slave status\G;<br>  Slave_IO_Running: Yes<br>  Slave_SQL_Running: Yes<br></code></pre></td></tr></table></figure><h4 id="从服务器b端"><a class="markdownIt-Anchor" href="#从服务器b端"></a> 从服务器B端</h4><ol><li>服务器B 开启binlog</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>server-id=2<br>log-bin=master2<br>log-bin-index=master2<br></code></pre></td></tr></table></figure><ol start="2"><li>服务器B 给服务器B进行登陆授权</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">grant replication slave on *.* to &#123;username2&#125;@&#x27;%&#x27; identified by &#x27;&#123;password&#125;&#x27;;<br></code></pre></td></tr></table></figure><ol start="3"><li>在服务器B 进行连接同步</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 首先确保 slave 关闭<br>stop slave;<br><br># 在服务器B 输入以下信息, 其中master_log_file和master_log_pos可以通过在服务器B输入 show master status\G进行获取<br>change master to master_host=&#x27;&#123;服务器A的IP&#125;&#x27;, master_user=&#x27;&#123;username1&#125;&#x27;, master_password=&#x27;&#123;password&#125;&#x27;, master_log_file=&#x27;&#123;服务器A的binlog文件名&#125;&#x27;, master_log_pos=&#123;服务器A的binlog号&#125;;<br><br># 启动 slave <br>start slave;<br><br># 查看是否成功<br>show slave status\G;<br>  Slave_IO_Running: Yes<br>  Slave_SQL_Running: Yes<br></code></pre></td></tr></table></figure><hr /><h2 id="半同步复制"><a class="markdownIt-Anchor" href="#半同步复制"></a> 半同步复制</h2><p>Mysql 主从复制（半同步） 异步 同步</p><ol><li><p>半同步复制</p><ol><li>在说明半同步复制之前我们先来了解一下，什么是同步复制？同步复制：同步复制可以定义为数据在同一时刻被提交到一台或多台机器，通常这是通过众所周知的“两阶段提交”做到的。虽然这确实给你在多系统中保持一致性，但也由于增加了额外的消息交换而造成性能下降。使用MyISAM或者InnoDB存储引擎的MySQL本身并不支持同步复制，然而有些技术，例如分布式复制块设备（简称DRBD），可以在下层的文件系统提供同步复制，允许第二个MySQL服务器在主服务器丢失的情况下接管（使用第二服务器的复本）。了解了同步复制我们正下面来说一下，什么是半同步复制？</li><li>MYSQL 5.5开始，支持半同步复制。之前版本的MySQL Replication都是异步（asynchronous）的，主库在执行完一些事务后，是不会管备库的进度的。如果备库不幸落后，而更不幸的是主库此时又出现Crash（例如宕机），这时备库中的数据就是不完整的。简而言之，在主库发生故障的时候，我们无法使用备库来继续提供数据一致的服务了。Semisynchronous Replication(半同步复制)则一定程度上保证提交的事务已经传给了至少一个备库。Semi synchronous中，仅仅保证事务的已经传递到备库上，但是并不确保已经在备库上执行完成了。</li><li>此外，还有一种情况会导致主备数据不一致。在某个session中，主库上提交一个事务后，会等待事务传递给至少一个备库，如果在这个等待过程中主库Crash，那么也可能备库和主库不一致，这是很致命的。如果主备网络故障或者备库挂了，主库在事务提交后等待10秒（rpl_semi_sync_master_timeout的默认值）后，就会继续。这时，主库就会变回原来的异步状态。</li><li>MySQL在加载并开启Semi-sync插件后，每一个事务需等待备库接收日志后才返回给客户端。如果做的是小事务，两台主机的延迟又较小，则Semi-sync可以实现在性能很小损失的情况下的零数据丢失。</li></ol></li><li><p>异步与半同步异同</p><ol><li>默认情况下MySQL的复制是异步的，Master上所有的更新操作写入Binlog之后并不确保所有的更新都被复制到Slave之上。异步操作虽然效率高，但是在Master/Slave出现问题的时候，存在很高数据不同步的风险，甚至可能丢失数据。</li><li>MySQL5.5引入半同步复制功能的目的是为了保证在master出问题的时候，至少有一台Slave的数据是完整的。在超时的情况下也可以临时转入异步复制，保障业务的正常使用，直到一台slave追赶上之后，继续切换到半同步模式。</li></ol></li></ol><h3 id="主服务器a端-2"><a class="markdownIt-Anchor" href="#主服务器a端-2"></a> 主服务器A端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 安装半同步master插件<br>install plugin rpl_semi_sync_master soname &#x27;semisync_master.so&#x27;;<br># 开启半同步插件<br>set global rpl_semi_sync_master_enabled=1;<br># 设置同步超时时间<br>set global rpl_semi_sync_master_timeout=1000;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 修改配置文件<br>[mysqld]<br>server-id=1<br>log-bin=master1<br>log-bin-index=master1<br>rpl_semi_sync_master_enabled=1<br>rpl_semi_sync_master_timeout=10000<br></code></pre></td></tr></table></figure><h3 id="从服务器b端-2"><a class="markdownIt-Anchor" href="#从服务器b端-2"></a> 从服务器B端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 安装半同步slave插件: <br>install plugin rpl_semi_sync_slave soname &#x27;semisync_slave.so&#x27;;<br># 开启半同步插件<br>set global rpl_semi_sync_slave_enabled=1;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 修改配置文件: <br>[mysqld]<br>server-id=2<br>rpl_semi_sync_slave_enabled=1<br><br># 重启B端<br>systemctl restart mysql<br><br># 查看状态<br>SHOW GLOBAL STATUS LIKE &#x27;rpl_semi%&#x27;;<br></code></pre></td></tr></table></figure><hr /><h2 id="gtid复制"><a class="markdownIt-Anchor" href="#gtid复制"></a> GTID复制</h2><h3 id="gtid概念介绍"><a class="markdownIt-Anchor" href="#gtid概念介绍"></a> GTID概念介绍</h3><ol><li>GTID即全局事务ID (global transaction identifier), 其保证为每一个在主上提交的事务在复制集群中可以生成一个唯一的ID。GTID最初由google实现，官方MySQL在5.6才加入该功能。mysql主从结构在一主一从情况下对于GTID来说就没有优势了，而对于2台主以上的结构优势异常明显，可以在数据不丢失的情况下切换新主。使用GTID需要注意: 在构建主从复制之前，在一台将成为主的实例上进行一些操作（如数据清理等），通过GTID复制，这些在主从成立之前的操作也会被复制到从服务器上，引起复制失败。也就是说通过GTID复制都是从最先开始的事务日志开始，即使这些操作在复制之前执行。比如在server1上执行一些drop、delete的清理操作，接着在server2上执行change的操作，会使得server2也进行server1的清理操作。</li><li>GTID实际上是由UUID+TID (即transactionId)组成的。其中UUID(即server_uuid) 产生于auto.conf文件(cat /data/mysql/data/auto.cnf)，是一个MySQL实例的唯一标识。TID代表了该实例上已经提交的事务数量，并且随着事务提交单调递增，所以GTID能够保证每个MySQL实例事务的执行（不会重复执行同一个事务，并且会补全没有执行的事务）。GTID在一组复制中，全局唯一。</li></ol><h3 id="gtid的组成"><a class="markdownIt-Anchor" href="#gtid的组成"></a> GTID的组成</h3><p>GTID = source_id:transaction_id<br />source_id，用于鉴别原服务器，即mysql服务器唯一的的server_uuid，由于GTID会传递到slave，所以也可以理解为源ID。<br />transaction_id，为当前服务器上已提交事务的一个序列号，通常从1开始自增长的序列，一个数值对应一个事务。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">3E11FA47-71CA-11E1-9E33-C80AA9429562:23<br>前面的一串为服务器的server_uuid，即3E11FA47-71CA-11E1-9E33-C80AA9429562，后面的23为transaction_id<br></code></pre></td></tr></table></figure><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><h4 id="主服务器a端-3"><a class="markdownIt-Anchor" href="#主服务器a端-3"></a> 主服务器A端</h4><p>在 /etc/my.cnf 添加如下信息 并在 数据库中对 远程用户授予 <code>replication slave</code> 权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[mysqld]<br>#binlog<br>#服务器id<br>server_id=1<br>log-bin=master<br>log-bin-index=master<br>log-slave-updates=1<br>#强烈建议，其他格式可能造成数据不一致<br>binlog_format=row<br><br>#GTID:<br>#开启gtid模式<br>gtid_mode=on<br>#强制gtid一致性，开启后对于特定create table不被支持<br>enforce_gtid_consistency=on<br></code></pre></td></tr></table></figure><h4 id="从服务器b端-3"><a class="markdownIt-Anchor" href="#从服务器b端-3"></a> 从服务器B端</h4><p>在 /etc/my.cnf 添加如下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[mysqld]<br>#binlog<br>#服务器id<br>server_id=1<br>log-bin=master<br>log-bin-index=master<br>log-slave-updates=1<br>#强烈建议，其他格式可能造成数据不一致<br>binlog_format=row<br><br>#GTID:<br> #开启gtid模式<br>gtid_mode=on<br>#强制gtid一致性，开启后对于特定create table不被支持<br>enforce_gtid_consistency=on<br><br>#relay log<br>skip_slave_start=1<br></code></pre></td></tr></table></figure><p>在服务器B 添加 slave信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">change master to master_host=&#x27;&#123;服务器AIP&#125;&#x27;,master_user=&#x27;&#123;username&#125;&#x27;,master_password=&#x27;&#123;password&#125;&#x27;,master_port=3306,master_log_file=&#x27;master.000001&#x27;,master_log_pos=154;<br></code></pre></td></tr></table></figure><hr /><h2 id="多源复制"><a class="markdownIt-Anchor" href="#多源复制"></a> 多源复制</h2><h3 id="使用多源复制的考虑"><a class="markdownIt-Anchor" href="#使用多源复制的考虑"></a> 使用多源复制的考虑：</h3><ol><li>灾备作用：将各个库汇总在一起，就算是其他库都挂了（整个机房都无法连接了），还有最后一个救命稻草；</li><li>备份：直接在这个从库中做备份，不影响线上的数据库；</li><li>减少成本：不需要每个库都做一个实例，也减少了DBA的维护成本；</li><li>数据统计：后期的一些数据统计，需要将所有的库汇总在一起。</li></ol><h3 id="配置-2"><a class="markdownIt-Anchor" href="#配置-2"></a> 配置</h3><p>在进行之前需要在 主服务器A端 和 主服务器B端 写入不同的数据以进行测试</p><h4 id="主服务器a端-4"><a class="markdownIt-Anchor" href="#主服务器a端-4"></a> 主服务器A端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 先在 主服务器A端 对 从服务器C端 开放 replication slave 权限<br>grant replication slave on *.* to master1@&#x27;%&#x27; identified by &quot;123&quot;;<br><br># 在 /etc/my.cnf 写入<br>[mysqld]<br>server_id=1<br>log-bin=master1<br>log-bin-index=master1<br><br># 在mysql之中查看master信息<br>show master status\G;<br>*************************** 1. row ***************************<br>File: master1.000001<br>Position: 154<br>Binlog_Do_DB:<br>Binlog_Ignore_DB:<br>Executed_Gtid_Set:<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="主服务器b端"><a class="markdownIt-Anchor" href="#主服务器b端"></a> 主服务器B端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 先在 主服务器B端 对 从服务器C端 开放 replication slave 权限<br>grant replication slave on *.* to master1@&#x27;%&#x27; identified by &quot;123&quot;;<br><br># 在 /etc/my.cnf 写入<br>[mysqld]<br>server_id=2<br>log-bin=master2<br>log-bin-index=master2<br><br># 在mysql之中查看master信息<br>show master status\G;<br>*************************** 1. row ***************************<br>File: master2.000001<br>Position: 154<br>Binlog_Do_DB:<br>Binlog_Ignore_DB:<br>Executed_Gtid_Set:<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="从服务器c端"><a class="markdownIt-Anchor" href="#从服务器c端"></a> 从服务器C端</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 在 从服务器C端 的 /etc/my.cnf 写入<br>[mysqld]<br>server-id=3<br>master_info_repository=TABLE<br>relay_log_info_repository=TABLE<br><br># 在mysql之中连接 A与B <br>CHANGE MASTER TO MASTER_HOST=&#x27;&#123;主服务器AIP&#125;, MASTER_USER=&#x27;&#123;username&#125;&#x27;, MASTER_PASSWORD=&#x27;&#123;password&#125;&#x27;, MASTER_LOG_FILE=&#x27;master1.000001&#x27;, MASTER_LOG_POS=154 FOR CHANNEL &#x27;master1&#x27;;<br><br>CHANGE MASTER TO MASTER_HOST=&#x27;&#123;主服务器BIP&#125;, MASTER_USER=&#x27;&#123;username&#125;&#x27;, MASTER_PASSWORD=&#x27;&#123;password&#125;&#x27;, MASTER_LOG_FILE=&#x27;master2.000001&#x27;, MASTER_LOG_POS=154 FOR CHANNEL &#x27;master2&#x27;;<br></code></pre></td></tr></table></figure><h4 id="验证数据是否同步"><a class="markdownIt-Anchor" href="#验证数据是否同步"></a> 验证数据是否同步</h4><h5 id="master1"><a class="markdownIt-Anchor" href="#master1"></a> master1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into test values(&#x27;king&#x27;)；<br></code></pre></td></tr></table></figure><h5 id="master2"><a class="markdownIt-Anchor" href="#master2"></a> master2</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into t1 values(&#x27;10000&#x27;);<br></code></pre></td></tr></table></figure><h5 id="slave"><a class="markdownIt-Anchor" href="#slave"></a> slave</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from test.test;<br>+-------+<br>| name |<br>+-------+<br>| robin |<br>| zorro |<br>| king |<br>+-------+<br>3 rows in set (0.01 sec)<br>mysql&gt; select * from db.t1;<br>+-------+<br>| id |<br>+-------+<br>| 100 |<br>| 200 |<br>| 10000 |<br>+-------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ab复制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ab复制&quot;&gt;&lt;/a&gt; AB复制&lt;/h2&gt;
&lt;p&gt;首先我们先介绍什么是MySQL AB复制。 &lt;br /&gt;
AB复制又称主从复制，实现的是数据同步。如果要做MySQL AB复制，&lt;a</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql日志管理</title>
    <link href="https://wooxin.github.io/posts/9b20b04c/"/>
    <id>https://wooxin.github.io/posts/9b20b04c/</id>
    <published>2025-09-20T14:16:56.000Z</published>
    <updated>2025-09-20T14:17:18.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志类型"><a class="markdownIt-Anchor" href="#日志类型"></a> 日志类型</h2><ul><li>错误日志<ul><li><code>/var/log/mysqld.log</code></li></ul></li><li>慢查询日志</li><li>二进制日志</li></ul><h2 id="慢查询日志-slow-query-log"><a class="markdownIt-Anchor" href="#慢查询日志-slow-query-log"></a> 慢查询日志 slow query log</h2><h3 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h3><p>记录慢查询</p><h3 id="慢查询定义"><a class="markdownIt-Anchor" href="#慢查询定义"></a> 慢查询定义</h3><p>执行时长超过long_query_time指定的值的查询<br />默认值10s</p><h3 id="启用慢查询日志"><a class="markdownIt-Anchor" href="#启用慢查询日志"></a> 启用慢查询日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[mysqld]<br>long_query_time=10<br>slow_query_log=ON<br>slow_query_log_file=slow.log<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select sleep(15);<br>+-----------+<br>| sleep(15) |<br>+-----------+<br>|         0 |<br>+-----------+<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@localhost data]# cat slow.log <br>/usr/sbin/mysqld, Version: 5.7.17-log (MySQL Community Server (GPL)). started with:<br>Tcp port: 0  Unix socket: /data/mysql.sock<br>Time                 Id Command    Argument<br># Time: 2021-06-02T05:50:44.216487Z<br># User@Host: root[root] @ localhost []  Id:     4<br># Query_time: 15.000596  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0<br>SET timestamp=1622613044;<br>select sleep(15);<br></code></pre></td></tr></table></figure><h2 id="二进制日志-binary-log"><a class="markdownIt-Anchor" href="#二进制日志-binary-log"></a> 二进制日志 binary log</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[mysqld]<br>server_id=10<br>log_bin=master<br></code></pre></td></tr></table></figure><ul><li>server_id：为MySQL服务器分配唯一的ID，取值范围1–2^32</li><li>log_bin：启用二进制日志, 默认存放到数据目录</li></ul><h3 id="二进制日志命名格式"><a class="markdownIt-Anchor" href="#二进制日志命名格式"></a> 二进制日志命名格式</h3><ul><li>master.xxxxxx</li><li>master.index<br />文本文件，记录当前服务器都有哪些二进制日志文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@localhost ~]# cat /data/master.index <br>./master.000001<br>./master.000002<br>./master.000003<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[root@localhost ~]# file /data/master.000001 <br>/data/master.000001: MySQL replication log<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;日志类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#日志类型&quot;&gt;&lt;/a&gt; 日志类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;错误日志
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/var/log/mysqld.log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql用户与权限</title>
    <link href="https://wooxin.github.io/posts/19e3f215/"/>
    <id>https://wooxin.github.io/posts/19e3f215/</id>
    <published>2025-09-20T14:16:16.000Z</published>
    <updated>2025-09-20T14:16:37.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户"><a class="markdownIt-Anchor" href="#用户"></a> 用户</h2><p>账号权限</p><ol><li>是否能连接数据库 合法用户都可以连接</li><li>是否能够操作数据 需要授权</li></ol><h3 id="创建用户并设置密码"><a class="markdownIt-Anchor" href="#创建用户并设置密码"></a> 创建用户并设置密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 创建用户 &#123;username&#125; 并设置密码 &#123;password&#125; 默认&#123;username&#125;@&#x27;%&#x27; 即允许所有网段登陆<br>create user &#123;username&#125; identified by &#x27;&#123;password&#125;&#x27;;<br><br># 创建用户 &#123;username&#125; 并设置密码 &#123;password&#125; &#123;username&#125;@localhost 只允许本地登陆<br>create user &#123;username&#125;@localhost identified by &#x27;&#123;password&#125;&#x27;;<br><br># 创建用户 &#123;username&#125; 并设置密码 &#123;password&#125; &#123;username&#125;@192.168.1.0/255.255.255.0 只允该网段登陆<br>create user &#123;username&#125;@192.168.1.0/255.255.255.0 identified by &#x27;&#123;password&#125;&#x27;;<br><br># 创建用户 &#123;username&#125; 并设置密码 &#123;password&#125; &#123;username&#125;@192.168.1.100 只允该ip登陆<br>create user &#123;username&#125;@192.168.1.100 identified by &#x27;&#123;password&#125;&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>注意：mariadb中% 不包括本机 如本机登录在设置@localhost</p></blockquote><h3 id="删除用户"><a class="markdownIt-Anchor" href="#删除用户"></a> 删除用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 删除用户<br>drop user &#123;username&#125;@localhost;<br></code></pre></td></tr></table></figure><h3 id="查询用户权限"><a class="markdownIt-Anchor" href="#查询用户权限"></a> 查询用户权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看权限<br>show grants for &#123;username&#125; \G;<br></code></pre></td></tr></table></figure><hr /><h2 id="权限"><a class="markdownIt-Anchor" href="#权限"></a> 权限</h2><p>MySQL存取控制包含2个阶段：<br />阶段1：服务器检查是否允许你连接。<br />阶段2：假定你能连接，服务器检查你发出的每个请求。看你是否有足够的权限实施它。例如，如果你从数据库表中选择(select)行或从数据库删除表，服务器确定你对表有SELECT权限或对数据库有DROP权限。</p><h3 id="授权权限"><a class="markdownIt-Anchor" href="#授权权限"></a> 授权权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 授权格式<br>grant &#123;权限&#125; on &#123;库.表&#125; to &#123;username&#125;@localhost;<br><br># 查看权限<br>show grants for &#123;username&#125; \G;<br><br># 授权 所有权限 到某库某表 给用户&#123;username&#125;@localhost<br>grant all on &#123;库.表&#125; to &#123;username&#125;@localhost identified by &#x27;&#123;password&#125;&#x27;;<br></code></pre></td></tr></table></figure><h3 id="移除权限"><a class="markdownIt-Anchor" href="#移除权限"></a> 移除权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 授权格式<br>revoke &#123;权限&#125; on &#123;库.表&#125; to &#123;username&#125;@localhost;<br></code></pre></td></tr></table></figure><hr /><h3 id="查看权限"><a class="markdownIt-Anchor" href="#查看权限"></a> 查看权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 用户信息mysql.user存储所有用户信息,权限信息分布不同的表中 user1 user2 user3<br><br># user1 权限保存在 mysql.user<br>grant all on *.* to user1@localhost identified by &#x27;123&#x27;;<br><br># user2 权限保存在 mysql.db<br>grant all on mydb.* to user2@localhost identified by &#x27;123&#x27;;<br><br># user3 权限保存在 mysql.tables_priv<br>grant all on db.dpt to userc3@localhost identified by &#x27;123&#x27;;<br><br># user4 权限保存在 mysql.columns_priv<br>grant select(dpt_name) on db.dpt to user4@localhost identified by &#x27;123&#x27;;<br></code></pre></td></tr></table></figure><h4 id="刷新授权表"><a class="markdownIt-Anchor" href="#刷新授权表"></a> 刷新授权表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">flush privileges;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用户&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#用户&quot;&gt;&lt;/a&gt; 用户&lt;/h2&gt;
&lt;p&gt;账号权限&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是否能连接数据库 合法用户都可以连接&lt;/li&gt;
&lt;li&gt;是否能够操作数据 需要授权&lt;/li&gt;
&lt;/ol&gt;
&lt;</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql备份与恢复</title>
    <link href="https://wooxin.github.io/posts/f9bee56b/"/>
    <id>https://wooxin.github.io/posts/f9bee56b/</id>
    <published>2025-09-20T14:14:12.000Z</published>
    <updated>2025-09-20T14:14:38.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备份恢复"><a class="markdownIt-Anchor" href="#备份恢复"></a> 备份恢复</h2><p>冷备 热备<br />离线 在线<br />物理 逻辑<br />一般分为物理备份(物理文件)和逻辑备份(sql语句)<br />物理备份 只要备份物理文件 速度快不跨平台 linux windos<br />逻辑备份 sql语句的备份 速度慢 跨平台 linxu sql — &gt; windows<br />还可以分为离线备份(物理)和在线备份(逻辑)</p><h3 id="热备份"><a class="markdownIt-Anchor" href="#热备份"></a> 热备份</h3><p>逻辑备份 不区分引擎 不区分系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">热备份 使用root用户将全部数据备份到 /all.sql</span><br>[username@hostname]:$  mysqldump -u root -p&#x27;password&#x27; --all-databases &gt; /all.sql<br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复 从/all.sql恢复全部数据</span><br>[username@hostname]:$  mysql -u root -p&#x27;password&#x27; &lt; /all.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用root用户将mydb库备份到 /mydb.sql</span><br>[username@hostname]:$  mysqldump -u root -p&#x27;password&#x27; --databases mydb &gt; /mydb.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用root用户将mydb库下的mydb表备份到 /mytb.sql</span><br>[username@hostname]:$  mysqldump -u root -p&#x27;password&#x27; mydb mytb &gt; /mytb.sql<br></code></pre></td></tr></table></figure><h4 id="模拟备份流程"><a class="markdownIt-Anchor" href="#模拟备份流程"></a> 模拟备份流程</h4><ol><li>进行热备份</li><li>杀死mysql进程</li><li>删掉data目录</li><li>初始化数据库(修改权限) 启动数据库</li><li>使用初始化密码登录，然后修改密码</li><li>使用新密码恢复数据： mysql -u root &lt; /mysql_backup/all.sql</li></ol><hr /><h3 id="冷备份"><a class="markdownIt-Anchor" href="#冷备份"></a> 冷备份</h3><p>物理备份 区分引擎 区分系统</p><h4 id="模拟备份流程-2"><a class="markdownIt-Anchor" href="#模拟备份流程-2"></a> 模拟备份流程</h4><ol><li>将数据目录进行tar -cf data.tar ./data 备份</li><li>杀死mysql进程</li><li>删除data目录</li><li>将data目录解压到数据目录</li><li>修改权限 chown -R mysql:mysql ./data</li><li>启动数据库</li></ol><hr /><h2 id="导入导出"><a class="markdownIt-Anchor" href="#导入导出"></a> 导入导出</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show global variables like &#x27;%secure%&#x27;;<br></code></pre></td></tr></table></figure><p>• 当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出<br />• 当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下<br />• 当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">/etc/my.<span class="hljs-keyword">cnf</span><br>secure_file_priv =<br></code></pre></td></tr></table></figure><h3 id="导出"><a class="markdownIt-Anchor" href="#导出"></a> 导出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 将 &#123;tablename&#125; 表 所有的数据 导出 到 /backup/a.txt<br>select * from &#123;tablename&#125; into outfile &#x27;/backup/a.txt&#x27;;<br><br># 将 &#123;tablename&#125; 表 所有的数据 导出 到 /backup/a.txt 分隔符是 &#x27;,&#x27; 结尾符 是 &#x27;\n&#x27;<br>select * from &#123;tablename&#125; into outfile &#x27;/backup/c.txt&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;<br></code></pre></td></tr></table></figure><h3 id="导入"><a class="markdownIt-Anchor" href="#导入"></a> 导入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 从 /backup/a.txt 把数据导入到 &#123;tablename&#125; 表中 分隔符是 &#x27;,&#x27; 结尾符 是 &#x27;\n&#x27;<br>load data infile &#x27;/backup/a.txt&#x27; into table &#123;tablename&#125; fields terminated by &#x27;\t&#x27; lines terminated by &#x27;\n&#x27; ;<br></code></pre></td></tr></table></figure><hr /><h2 id="logbin"><a class="markdownIt-Anchor" href="#logbin"></a> logbin</h2><h3 id="物理备份"><a class="markdownIt-Anchor" href="#物理备份"></a> 物理备份</h3><ol><li>在mysql的配置文件加入</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">server-id=<span class="hljs-number">1</span><br><span class="hljs-built_in">log</span>-bin=&#123;路径&#125;/master<br><span class="hljs-built_in">log</span>-bin-<span class="hljs-built_in">index</span>=&#123;路径&#125;/master<br></code></pre></td></tr></table></figure><ol start="2"><li>重启mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart mysql<br></code></pre></td></tr></table></figure><ol start="3"><li>进入进入mysql</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -uroot -p<br></code></pre></td></tr></table></figure><h4 id="模拟恢复"><a class="markdownIt-Anchor" href="#模拟恢复"></a> 模拟恢复</h4><ol><li>关闭mysql进程</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop mysql<br>pkill mysqld<br></code></pre></td></tr></table></figure><ol start="2"><li>删除data数据目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -fr /&#123;url&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>初始化mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mysql/bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data<br></code></pre></td></tr></table></figure><ol start="4"><li>启动mysql服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start mysql<br></code></pre></td></tr></table></figure><ol start="5"><li>进入mysql并修改密码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set password=password(&#x27;123&#x27;);<br></code></pre></td></tr></table></figure><ol start="6"><li>恢复数据</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqlbinlog /&#123;路径&#125;/master-000001 | mysql -uroot -p123<br></code></pre></td></tr></table></figure><h3 id="逻辑备份"><a class="markdownIt-Anchor" href="#逻辑备份"></a> 逻辑备份</h3><ol><li>在mysql的配置文件加入</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">server-id=<span class="hljs-number">1</span><br><span class="hljs-built_in">log</span>-bin=&#123;路径&#125;/master<br><span class="hljs-built_in">log</span>-bin-<span class="hljs-built_in">index</span>=&#123;路径&#125;/master<br></code></pre></td></tr></table></figure><ol start="2"><li>重启mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart mysql<br></code></pre></td></tr></table></figure><ol start="3"><li>进入进入mysql</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -uroot -p<br></code></pre></td></tr></table></figure><h4 id="模拟恢复-2"><a class="markdownIt-Anchor" href="#模拟恢复-2"></a> 模拟恢复</h4><ol><li>关闭mysql进程</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop mysql<br>pkill mysqld<br></code></pre></td></tr></table></figure><ol start="2"><li>删除data数据目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -fr /&#123;url&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>初始化mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/mysql/bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data<br></code></pre></td></tr></table></figure><ol start="4"><li>启动mysql服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start mysql<br></code></pre></td></tr></table></figure><ol start="5"><li>进入mysql并修改密码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set password=password(&#x27;123&#x27;);<br></code></pre></td></tr></table></figure><ol start="6"><li>查看mysqlbinlog段落</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqlbinlog -v /&#123;路径&#125;/master-000002<br></code></pre></td></tr></table></figure><ol start="8"><li>恢复数据</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqlbinlog --start-position=625 --stop-position=1020 /&#123;路径&#125;/master-000002 | mysql -uroot -p123<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;备份恢复&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#备份恢复&quot;&gt;&lt;/a&gt; 备份恢复&lt;/h2&gt;
&lt;p&gt;冷备 热备&lt;br /&gt;
离线 在线&lt;br /&gt;
物理 逻辑&lt;br /&gt;
一般分为物理备份(物理文件)和逻辑备份(sql语句)&lt;br </summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql事务,索引</title>
    <link href="https://wooxin.github.io/posts/4f318dc3/"/>
    <id>https://wooxin.github.io/posts/4f318dc3/</id>
    <published>2025-09-20T14:12:46.000Z</published>
    <updated>2025-09-20T14:13:07.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务-transaction"><a class="markdownIt-Anchor" href="#事务-transaction"></a> 事务 Transaction</h2><ul><li>针对修改操作</li><li>保证修改操作要么同时成功执行、回滚</li></ul><h3 id="启动事务"><a class="markdownIt-Anchor" href="#启动事务"></a> 启动事务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; start transaction;<br></code></pre></td></tr></table></figure><h3 id="提交事务"><a class="markdownIt-Anchor" href="#提交事务"></a> 提交事务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&gt; commit;<br></code></pre></td></tr></table></figure><h3 id="回滚事务"><a class="markdownIt-Anchor" href="#回滚事务"></a> 回滚事务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rollback;<br></code></pre></td></tr></table></figure><hr /><h2 id="索引-index"><a class="markdownIt-Anchor" href="#索引-index"></a> 索引 Index</h2><h3 id="索引的引用"><a class="markdownIt-Anchor" href="#索引的引用"></a> 索引的引用</h3><ul><li>建立合适的索引，优化、提高查询速度</li><li>针对数据表</li><li>不推荐使用经常变化的数据字段建立索引</li></ul><h3 id="查看索引"><a class="markdownIt-Anchor" href="#查看索引"></a> 查看索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW INDEX FROM Account;<br><br>+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+<br>| Table   | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |<br>+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+<br>| Account |          0 | PRIMARY  |            1 | id          | A         |           5 |     NULL | NULL   |      | BTREE      |         |               |<br>+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+<br></code></pre></td></tr></table></figure><ul><li>默认会使用主键字段生成索引</li></ul><h3 id="创建索引"><a class="markdownIt-Anchor" href="#创建索引"></a> 创建索引</h3><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE INDEX index_name ON tb_name(字段, 字段)<br> <br>mysql&gt; CREATE INDEX username_key ON Account(username);<br></code></pre></td></tr></table></figure><h3 id="创建索引-2"><a class="markdownIt-Anchor" href="#创建索引-2"></a> 创建索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DROP INDEX username_key ON Account;<br></code></pre></td></tr></table></figure><h3 id="使用查询分析器explain"><a class="markdownIt-Anchor" href="#使用查询分析器explain"></a> 使用查询分析器explain</h3><h4 id="无索引的情况"><a class="markdownIt-Anchor" href="#无索引的情况"></a> 无索引的情况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; EXPLAIN SELECT * FROM sp WHERE price=4000;<br><br>+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+<br>| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+<br>|  1 | SIMPLE      | sp    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 490028 |    10.00 | Using where |<br>+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------------+<br></code></pre></td></tr></table></figure><h4 id="有索引的情况"><a class="markdownIt-Anchor" href="#有索引的情况"></a> 有索引的情况</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE INDEX price_key ON sp(price);<br>mysql&gt; EXPLAIN SELECT * FROM sp WHERE price=4000;<br><br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------+<br>| id | select_type | table | partitions | type | possible_keys | key       | key_len | ref   | rows | filtered | Extra |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------+<br>|  1 | SIMPLE      | sp    | NULL       | ref  | price_key     | price_key | 5       | const |   40 |   100.00 | NULL  |<br>+----+-------------+-------+------------+------+---------------+-----------+---------+-------+------+----------+-------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事务-transaction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#事务-transaction&quot;&gt;&lt;/a&gt; 事务 Transaction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;针对修改操作&lt;/li&gt;
&lt;li&gt;保证修改操作要么同时成功执行</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql语句</title>
    <link href="https://wooxin.github.io/posts/e115e1b7/"/>
    <id>https://wooxin.github.io/posts/e115e1b7/</id>
    <published>2025-09-20T14:10:55.000Z</published>
    <updated>2025-09-20T14:12:17.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ddl数据定义语言createalterdropdeclare"><a class="markdownIt-Anchor" href="#ddl数据定义语言createalterdropdeclare"></a> DDL—数据定义语言(Create，Alter，Drop，DECLARE)</h2><h3 id="库"><a class="markdownIt-Anchor" href="#库"></a> 库</h3><h4 id="创建库"><a class="markdownIt-Anchor" href="#创建库"></a> 创建库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database &#123;database_name&#125;;<br>创建数据库<br></code></pre></td></tr></table></figure><ul><li>注意字符集设定</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database &#123;database_name&#125; character set = &#x27;utf8&#x27;;<br>创建utf-8字符集的数据库<br></code></pre></td></tr></table></figure><h4 id="修改库"><a class="markdownIt-Anchor" href="#修改库"></a> 修改库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update database <br></code></pre></td></tr></table></figure><ul><li>修改字符集</li></ul><h4 id="删除库"><a class="markdownIt-Anchor" href="#删除库"></a> 删除库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop &#123;database_name&#125;;<br></code></pre></td></tr></table></figure><hr /><h3 id="表"><a class="markdownIt-Anchor" href="#表"></a> 表</h3><h4 id="创建表"><a class="markdownIt-Anchor" href="#创建表"></a> 创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table &#123;table_name&#125;;<br></code></pre></td></tr></table></figure><h5 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h5><p>整形:</p><ul><li>tinyint   (1字节)</li><li>smallint  (2字节)</li><li>mediumint (3字节)</li><li>int       (4字节)</li><li>bigint    (8字节)<br />浮点数:</li><li>float     (4字节)</li><li>double    (8字节)</li><li>decimal   (4字节)<br />字符串:</li><li>char      (2字节)<br />日期:</li><li>year</li><li>date      ()</li><li>time</li><li>datetime</li><li>timestamp<br />枚举:</li><li>enum</li><li>set</li></ul><h5 id="约束"><a class="markdownIt-Anchor" href="#约束"></a> 约束</h5><p>无符号:</p><ul><li>unsigned<br />0补齐:</li><li>zerofill<br />非空:</li><li>not null<br />默认:</li><li>default<br />索引:</li><li>index</li><li>unique</li><li>primary key<br />自动增长:</li><li>auto_incremect</li><li>auto_incremect需要搭配unique或primary key使用</li></ul><h4 id="修改表"><a class="markdownIt-Anchor" href="#修改表"></a> 修改表</h4><p><strong>alter</strong></p><p>修改表名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rename table &#123;table_name&#125; to &#123;table_name&#125;;<br></code></pre></td></tr></table></figure><p>修改列名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table &#123;table_name&#125; change &#123;col&#125; &#123;col char(11)&#125;;<br></code></pre></td></tr></table></figure><p>修改类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table test1 modify phone char(11) after name;修改某一列位置<br></code></pre></td></tr></table></figure><p>修改约束:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table myinfo add primary key(id); 添加primary key<br>alter table test1 drop primary key; 删除primary key<br><br>alter table test1 modify phone char(11) unique; 添加unique或index<br>alter table test1 modify phone char(11); 删除unique或index<br></code></pre></td></tr></table></figure><hr /><h3 id="dml数据操纵语言selectdeleteupdateinsert"><a class="markdownIt-Anchor" href="#dml数据操纵语言selectdeleteupdateinsert"></a> DML—数据操纵语言(Select，Delete，Update，Insert)</h3><h4 id="insert-插入"><a class="markdownIt-Anchor" href="#insert-插入"></a> insert 插入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into &#123;表名&#125;(列名1, 列名2...) values(数据1, 数据2);         # 按照表名括号内的关键字填写数值<br>insert into &#123;表名&#125; values(数据1, 数据2);                         # 按照表默认排序进行录入<br></code></pre></td></tr></table></figure><h4 id="delete-删除"><a class="markdownIt-Anchor" href="#delete-删除"></a> delete 删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from &#123;表名&#125;;                                             # 删除表内所有数据<br>delete from &#123;表名&#125; where &#123;列名&#125;=&#123;数据&#125;;                          # 删除 列名 = 数值 相匹配的记录<br></code></pre></td></tr></table></figure><h4 id="update-更新"><a class="markdownIt-Anchor" href="#update-更新"></a> update 更新</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update &#123;表名&#125; set &#123;列名&#125; = 数值;                                     # 修改表内该列名下所有的数值为该数值<br>update &#123;表名&#125; set &#123;列名&#125; = 数值 where &#123;列名2&#125; = 数值2;                # 根据 &#123;列名2&#125; = 数值2 来修改 &#123;列名&#125; = 数值<br></code></pre></td></tr></table></figure><h4 id="select-查看"><a class="markdownIt-Anchor" href="#select-查看"></a> select 查看</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from &#123;表名&#125;;                                               # 查看该表内所有数据<br>select 数据1, 数据2... from &#123;表名&#125;;                                  # 查看指定数据<br>select distinct 数据 from &#123;表名&#125;;                                   # 去掉重复行<br>select 数据 from &#123;表名&#125; limit 5;                                    # 显示前5行<br>select 数据 from &#123;表名&#125; limit 5,5;                                  # 显示从第5行开始的后5行即6-10行<br>select 数据 from &#123;库名.表名&#125;;                                        # 没有使用 数据 进入db库时查询db库的t1表<br>select &#123;表名.数据&#125; from &#123;库名.表名&#125;;                                 # 指定库的表 指定表的列<br></code></pre></td></tr></table></figure><h5 id="排序检索语句"><a class="markdownIt-Anchor" href="#排序检索语句"></a> 排序检索语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 数据1, 数据2 from &#123;表名&#125; order by 数据1;                      # 按 数据1 排序<br>select 数据1, 数据2 from &#123;表名&#125; order by 数据1, 数据2;               # 先按 数据1 排序 数据1 相同在按 数据2 排序<br>select 数据1, 数据2 from &#123;表名&#125; order by 数据1 desc;                 # 按 数据1 反向排序<br>select 数据1, 数据2 from &#123;表名&#125; order by 数据1 desc, 数据2;          # 先按 数据1 反向排序 数据1 相同在按 数据2 排序<br>select 数据1, 数据2, 数据3 from &#123;表名&#125; order by 数据1 desc limit 1;  # 查找该表中 数据1 数值最高的人<br></code></pre></td></tr></table></figure><h5 id="等值链接内连接"><a class="markdownIt-Anchor" href="#等值链接内连接"></a> 等值链接(内连接)</h5><p>只连接匹配的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 显示emp表的内容与dept表的内容 来自 employee和department表, 会产生 迪卡尔集<br>select employee.emp_id,employee.emp_name,department.dept_name from employee,department;<br><br># 显示emp表的内容与dept表的内容 来自 employee和department表 根据 employee.dept_id = department.dept_id 来做对比<br>select employee.emp_id,employee.emp_name,department.dept_name from employee,department where employee.dept_id = department.dept_id;<br></code></pre></td></tr></table></figure><h5 id="不等值连接外连接"><a class="markdownIt-Anchor" href="#不等值连接外连接"></a> 不等值连接(外连接)</h5><p>左外连接 left join</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 显示emp表的内容与dept表的内容 来自 employee和department表 根据 employee.dept_id 作为主表,department.dept_id 作为辅助表来做对比<br>select employee.emp_id,employee.emp_name,department.dept_name from employee left join department on employee.dept_id = department.dept_id;<br></code></pre></td></tr></table></figure><hr /><h2 id="重置mysql的密码"><a class="markdownIt-Anchor" href="#重置mysql的密码"></a> 重置mysql的密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mail ~]# vim /etc/my.cnf<br>[mysqld]<br>skip-grant-tables<br><br>[root@mail ~]# systemctl restart mysqlsrc<br>[root@mail ~]# mysql -u root<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">update mysql.user <span class="hljs-built_in">set</span> authentication_string=password(<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-built_in">where</span> User=<span class="hljs-string">&#x27;root&#x27;</span>;</span><br>[root@mail ~]# systemctl restart mysqlsrc<br>[root@mail ~]# mysql -u root -p&#x27;123&#x27;<br></code></pre></td></tr></table></figure><h2 id="ddl"><a class="markdownIt-Anchor" href="#ddl"></a> DDL</h2><h3 id="库-2"><a class="markdownIt-Anchor" href="#库-2"></a> 库</h3><h4 id="创建库-2"><a class="markdownIt-Anchor" href="#创建库-2"></a> 创建库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database &#123;database_name&#125;;<br>创建数据库<br></code></pre></td></tr></table></figure><ul><li>注意字符集设定</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database &#123;database_name&#125; character set = &#x27;utf8&#x27;;<br>创建utf-8字符集的数据库<br></code></pre></td></tr></table></figure><h4 id="修改库-2"><a class="markdownIt-Anchor" href="#修改库-2"></a> 修改库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update database <br></code></pre></td></tr></table></figure><ul><li>修改字符集</li></ul><h4 id="删除库-2"><a class="markdownIt-Anchor" href="#删除库-2"></a> 删除库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop &#123;database_name&#125;;<br></code></pre></td></tr></table></figure><hr /><h3 id="表-2"><a class="markdownIt-Anchor" href="#表-2"></a> 表</h3><h4 id="创建表-2"><a class="markdownIt-Anchor" href="#创建表-2"></a> 创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table &#123;table_name&#125;;<br></code></pre></td></tr></table></figure><h5 id="类型-2"><a class="markdownIt-Anchor" href="#类型-2"></a> 类型</h5><p>整形:</p><ul><li>tinyint   (1字节)</li><li>smallint  (2字节)</li><li>mediumint (3字节)</li><li>int       (4字节)</li><li>bigint    (8字节)<br />浮点数:</li><li>float     (4字节)</li><li>double    (8字节)</li><li>decimal   (4字节)<br />字符串:</li><li>char      (2字节)<br />日期:</li><li>year</li><li>date      ()</li><li>time</li><li>datetime</li><li>timestamp<br />枚举:</li><li>enum</li><li>set</li></ul><h5 id="约束-2"><a class="markdownIt-Anchor" href="#约束-2"></a> 约束</h5><p>无符号:</p><ul><li>unsigned<br />0补齐:</li><li>zerofill<br />非空:</li><li>not null<br />默认:</li><li>default<br />索引:</li><li>index</li><li>unique</li><li>primary key<br />自动增长:</li><li>auto_incremect</li><li>auto_incremect需要搭配unique或primary key使用</li></ul><h4 id="修改表-2"><a class="markdownIt-Anchor" href="#修改表-2"></a> 修改表</h4><p><strong>alter</strong></p><p>修改表名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rename table &#123;table_name&#125; to &#123;table_name&#125;;<br></code></pre></td></tr></table></figure><p>修改列名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table &#123;table_name&#125; change &#123;col&#125; &#123;col char(11)&#125;;<br></code></pre></td></tr></table></figure><p>修改类型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table test1 modify phone char(11) after name;修改某一列位置<br></code></pre></td></tr></table></figure><p>修改约束:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table myinfo add primary key(id); 添加primary key<br>alter table test1 drop primary key; 删除primary key<br><br>alter table test1 modify phone char(11) unique; 添加unique或index<br>alter table test1 modify phone char(11); 删除unique或index<br></code></pre></td></tr></table></figure><hr /><h3 id="dml数据操纵语言selectdeleteupdateinsert-2"><a class="markdownIt-Anchor" href="#dml数据操纵语言selectdeleteupdateinsert-2"></a> DML—数据操纵语言(Select，Delete，Update，Insert)</h3><h4 id="insert-插入-2"><a class="markdownIt-Anchor" href="#insert-插入-2"></a> insert 插入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into &#123;表名&#125;(列名1, 列名2...) values(数据1, 数据2);         # 按照表名括号内的关键字填写数值<br>insert into &#123;表名&#125; values(数据1, 数据2);                         # 按照表默认排序进行录入<br></code></pre></td></tr></table></figure><h4 id="delete-删除-2"><a class="markdownIt-Anchor" href="#delete-删除-2"></a> delete 删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from &#123;表名&#125;;                                             # 删除表内所有数据<br>delete from &#123;表名&#125; where &#123;列名&#125;=&#123;数据&#125;;                          # 删除 列名 = 数值 相匹配的记录<br></code></pre></td></tr></table></figure><h4 id="update-更新-2"><a class="markdownIt-Anchor" href="#update-更新-2"></a> update 更新</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update &#123;表名&#125; set &#123;列名&#125; = 数值;                                     # 修改表内该列名下所有的数值为该数值<br>update &#123;表名&#125; set &#123;列名&#125; = 数值 where &#123;列名2&#125; = 数值2;                # 根据 &#123;列名2&#125; = 数值2 来修改 &#123;列名&#125; = 数值<br></code></pre></td></tr></table></figure><h4 id="select-查看-2"><a class="markdownIt-Anchor" href="#select-查看-2"></a> select 查看</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from &#123;表名&#125;;                                               # 查看该表内所有数据<br>select 数据1, 数据2... from &#123;表名&#125;;                                  # 查看指定数据<br>select distinct 数据 from &#123;表名&#125;;                                   # 去掉重复行<br>select 数据 from &#123;表名&#125; limit 5;                                    # 显示前5行<br>select 数据 from &#123;表名&#125; limit 5,5;                                  # 显示从第5行开始的后5行即6-10行<br>select 数据 from &#123;库名.表名&#125;;                                        # 没有使用 数据 进入db库时查询db库的t1表<br>select &#123;表名.数据&#125; from &#123;库名.表名&#125;;                                 # 指定库的表 指定表的列<br></code></pre></td></tr></table></figure><h5 id="排序检索语句-2"><a class="markdownIt-Anchor" href="#排序检索语句-2"></a> 排序检索语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 数据1, 数据2 from &#123;表名&#125; order by 数据1;                      # 按 数据1 排序<br>select 数据1, 数据2 from &#123;表名&#125; order by 数据1, 数据2;               # 先按 数据1 排序 数据1 相同在按 数据2 排序<br>select 数据1, 数据2 from &#123;表名&#125; order by 数据1 desc;                 # 按 数据1 反向排序<br>select 数据1, 数据2 from &#123;表名&#125; order by 数据1 desc, 数据2;          # 先按 数据1 反向排序 数据1 相同在按 数据2 排序<br>select 数据1, 数据2, 数据3 from &#123;表名&#125; order by 数据1 desc limit 1;  # 查找该表中 数据1 数值最高的人<br></code></pre></td></tr></table></figure><hr /><h2 id="重置mysql的密码-2"><a class="markdownIt-Anchor" href="#重置mysql的密码-2"></a> 重置mysql的密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mail ~]# vim /etc/my.cnf<br>[mysqld]<br>skip-grant-tables<br><br>[root@mail ~]# systemctl restart mysqlsrc<br>[root@mail ~]# mysql -u root<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">update mysql.user <span class="hljs-built_in">set</span> authentication_string=password(<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-built_in">where</span> User=<span class="hljs-string">&#x27;root&#x27;</span>;</span><br>[root@mail ~]# systemctl restart mysqlsrc<br>[root@mail ~]# mysql -u root -p&#x27;123&#x27;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ddl数据定义语言createalterdropdeclare&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ddl数据定义语言createalterdropdeclare&quot;&gt;&lt;/a&gt; DDL—数据定义语言(Create，Alter，D</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql安装</title>
    <link href="https://wooxin.github.io/posts/eb81faa3/"/>
    <id>https://wooxin.github.io/posts/eb81faa3/</id>
    <published>2025-09-20T14:09:29.000Z</published>
    <updated>2025-09-20T14:10:15.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rpm包安装"><a class="markdownIt-Anchor" href="#rpm包安装"></a> rpm包安装</h2><h3 id="配置目录"><a class="markdownIt-Anchor" href="#配置目录"></a> 配置目录</h3><table><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td>配置文件目录</td><td>/etc/my.cnf &amp;&amp; /etc/my.cnf.d/</td></tr><tr><td>数据主目录</td><td>/var/lib/mysql</td></tr><tr><td>socket文件</td><td>/var/lib/mysql/mysql.sock</td></tr><tr><td>端口</td><td>3306</td></tr><tr><td>日志文件</td><td>/var/log/mysqld.log</td></tr><tr><td>启动服务</td><td>systemctl restart mysqld</td></tr></tbody></table><h3 id="获取密码"><a class="markdownIt-Anchor" href="#获取密码"></a> 获取密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. 获取密码:<br>cat /var/log/mysqld.log | grep password<br><br>2. 登录数据库<br>mysql -u root -p&#x27;#!D9dyRla7To&#x27;<br><br>3. 修改密码:<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash"><span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&#x27;Robin_123&#x27;</span>);</span><br><br>4. 重新登录:<br>mysql -u root -p&#x27;Robin_123&#x27;<br></code></pre></td></tr></table></figure><h3 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h3><table><thead><tr><th>1</th><th>2</th></tr></thead><tbody><tr><td>show databases;</td><td>查看所有数据库</td></tr><tr><td>create database mydb;</td><td>创建数据库</td></tr><tr><td>use mydb;</td><td>切换数据库</td></tr><tr><td>create table user_info(id int,name char(10));</td><td>创建表</td></tr><tr><td>show tables;</td><td>显示表</td></tr><tr><td>desc user_info;</td><td>描述表(看属性)</td></tr><tr><td>insert into user_info(id, name) values(1,‘robin’);</td><td>插入数据</td></tr><tr><td>select * from user_info;</td><td>查看数据</td></tr><tr><td>drop table user_info;</td><td>删除表</td></tr><tr><td>drop database mydb;</td><td>删除库</td></tr></tbody></table><h3 id="密码不正确"><a class="markdownIt-Anchor" href="#密码不正确"></a> 密码不正确</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. systemctl stop mysqld<br>2. rm -rf /var/lib/mysql/* &amp;&amp; &gt; /var/log/mysqld.log<br>3. systemctl start mysqld 或者 mysqld --initialize --datadir=/var/lib/mysql<br>4. chown -R mysql.mysql /var/lib/mysql<br>5. cat /var/log/mysqld.log | grep password<br>6. systemctl restart mysqld<br>7. mysql -u root -p&#x27;KTdr2+yppDsq&#x27;<br></code></pre></td></tr></table></figure><h2 id="源码包安装"><a class="markdownIt-Anchor" href="#源码包安装"></a> 源码包安装</h2><h3 id="源码包下载"><a class="markdownIt-Anchor" href="#源码包下载"></a> 源码包下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-boost-5.7.38.tar.gz<br></code></pre></td></tr></table></figure><h3 id="安装源码包"><a class="markdownIt-Anchor" href="#安装源码包"></a> 安装源码包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xf mysql-boost-5.7.38.tar.gz -C /opt/<br><span class="hljs-built_in">cd</span> /opt/mysql-5.7.38/<br><br>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DWITH_READLINE=1 -DMYSQL_TCP_PORT=3306 -DMYSQL_UNIX_ADDR=/usr/local/mysql/socks/mysql.sock -DENABLED_LOCAL_INFILE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/mysql/boost<br></code></pre></td></tr></table></figure><h3 id="启动流程"><a class="markdownIt-Anchor" href="#启动流程"></a> 启动流程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. 系统中需要有mysql帐号（没有rpm的mysql）<br>useradd -u 27 -d /var/lib/mysql -s /bin/false mysql<br><br>2. 创建数据目录<br>mkdir /usr/local/mysql/data<br><br>3. 不使用rpm产生的配置文件<br>mv /etc/my.cnf /etc/my.cnf.bak<br><br>4. 初始化<br>/usr/local/mysql/bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data<br>初始化时 数据目录必须为空目录<br><br>5. 修改权限<br>chown -R mysql.mysql /usr/local/mysql/<br><br>6. 启动mysql<br>/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;<br><br>7. 检查端口:<br>netstat -anplt | grep :3306<br>tcp6 0 0 :::3306 :::* LISTEN 60187/mysqld<br><br>8. 登录<br>/usr/local/mysql/bin/mysql -uroot -p&quot;Rkadj:2opk#5&quot;<br><br>9. 修改密码<br>set password=password(&#x27;Robin_123&#x27;);<br></code></pre></td></tr></table></figure><h3 id="修改源码mysql的启动方式"><a class="markdownIt-Anchor" href="#修改源码mysql的启动方式"></a> 修改源码mysql的启动方式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqldd<br>chkconfig --add mysqldd<br>service mysqldd restart<br><br>开机自启动<br>chkconfig --add mysqldd<br>chkconfig mysqldd on<br>&amp;&amp;<br>systemctl restart mysqldd<br></code></pre></td></tr></table></figure><h3 id="修改源码客户端"><a class="markdownIt-Anchor" href="#修改源码客户端"></a> 修改源码客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>1.系统中所有的命令都在固定目录下的($PATH)<br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br><br>2.所以想要执行源码mysql命令使用相对路径及必须$PATH中含有/usr/local/mysql/bin/<br>需要修改PATH这个环境变量<br><br>临时修改<br>[root@server local]# PATH=/usr/local/mysql/bin:$PATH<br><br>永久修改<br>[root@localhost support-files]# vim /etc/profile<br>PATH=/usr/local/mysql/bin:$PATH<br>export PATH<br><br>[root@localhost support-files]# source /etc/profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;rpm包安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#rpm包安装&quot;&gt;&lt;/a&gt; rpm包安装&lt;/h2&gt;
&lt;h3 id=&quot;配置目录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#配置目录&quot;&gt;&lt;/a&gt; 配置</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux数据库 - mysql</title>
    <link href="https://wooxin.github.io/posts/6d4e3357/"/>
    <id>https://wooxin.github.io/posts/6d4e3357/</id>
    <published>2025-09-20T14:07:58.000Z</published>
    <updated>2025-09-20T14:09:51.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h2><h3 id="什么是数据"><a class="markdownIt-Anchor" href="#什么是数据"></a> 什么是数据?</h3><p>数据(data)是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的的原始素材。数据是<a href="http://baike.baidu.com/view/1527.htm">信息</a>的表现形式和载体，可以是符号、文字、数字、语音、图像、视频等。数据和信息是不可分离的，数据是信息的表达，信息是数据的内涵。数据本身没有意义，数据只有对实体行为产生影响时才成为信息。数据可以是连续的值，比如声音、图像，称为<a href="http://baike.baidu.com/view/292017.htm">模拟数据</a>。也可以是离散的，如符号、文字，称为<a href="http://baike.baidu.com/view/1337259.htm">数字数据</a>。在计算机系统中，数据以二进制信息单元0,1的形式表示。</p><h3 id="数据存储的发展史"><a class="markdownIt-Anchor" href="#数据存储的发展史"></a> 数据存储的发展史</h3><h3 id="什么是数据库"><a class="markdownIt-Anchor" href="#什么是数据库"></a> 什么是数据库?</h3><p>数据库（Database）:是按照<a href="http://baike.baidu.com/view/9900.htm">数据结构</a>来组织、<a href="http://baike.baidu.com/view/87682.htm">存储</a>和管理数据的仓库</p><h3 id="什么是数据库管理系统dbms"><a class="markdownIt-Anchor" href="#什么是数据库管理系统dbms"></a> 什么是数据库管理系统(DBMS)?</h3><p>数据库管理系统:是由数据库及其管理<a href="http://baike.baidu.com/view/37.htm">软件</a>组成的系统</p><ol><li>提供数据持久性的存储,备份,恢复</li><li>支持事务管理</li><li>数据操作的并发</li><li>支持独立的管理语言(sql语句)</li></ol><h3 id="使用数据库的优势"><a class="markdownIt-Anchor" href="#使用数据库的优势"></a> 使用数据库的优势:</h3><ol><li><p>数据的独立性:<br />元数据的存储,应用程序程序不需数据的格式问题</p></li><li><p>数据的冗余:<br />最小化数据冗余,保障数据的统一性和一致性</p></li><li><p>数据的安全:<br />不同的用户可以看到独立的数据</p></li><li><p>数据的利用率:<br />使用结构化的数据管理语言(sql语句)</p></li><li><p>简单的数据备份和恢复:<br />提供多种数据备份恢复方式,使数据的安全性更高</p></li></ol><h3 id="数据库分类"><a class="markdownIt-Anchor" href="#数据库分类"></a> 数据库分类:</h3><ol><li><p>关系型数据库(MySQL,Oracle,db2,SQL server)<br />关系数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。关系模型是由埃德加·科德于1970年首先提出的，并配合“科德十二定律”。现如今虽然对此模型有一些批评意见，但它还是数据存储的传统标准。标准数据查询语言SQL就是一种基于关系数据库的语言，这种语言执行对关系数据库中数据的检索和操作。 关系模型由关系数据结构、关系操作集合、关系完整性约束三部分组成。</p></li><li><p>非关系型数据库(MongoDB Hbase Cassandra)</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据库&quot;&gt;&lt;/a&gt; 数据库&lt;/h2&gt;
&lt;h3 id=&quot;什么是数据&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是数据&quot;&gt;&lt;/a&gt; 什么是数据?&lt;/h</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="Mysql" scheme="https://wooxin.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络管理 - ip</title>
    <link href="https://wooxin.github.io/posts/79bde3d2/"/>
    <id>https://wooxin.github.io/posts/79bde3d2/</id>
    <published>2025-09-20T09:16:44.000Z</published>
    <updated>2025-09-20T09:19:10.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ip地址的组成"><a class="markdownIt-Anchor" href="#ip地址的组成"></a> IP地址的组成</h2><p>IP地址由4部分数字组成，每部分数字对应于8位二进制数字，各部分之间用小数点分开 这是点分2进制 .每如果换算为10进制我们称为点分10进制个ip地址由两部分组成网络地址(NetID)和主机地址(HostID).网络地址表示其属于互联网中的哪一个网络，而主机地址则表示其属于该网络中的哪一台主机.</p><h3 id="a类地址"><a class="markdownIt-Anchor" href="#a类地址"></a> A类地址</h3><p>A类地址的范围其实是从1-126之间。<br />如：10.0.0.1, 第一段号码为网络号码, 剩下的三段号码为本地计算机的号码. 转换为2进制来说, 一个A类IP地址由<strong>1字节的网络地址</strong>和<strong>3字节主机地址</strong>组成，网络地址的最高位必须是“0”, 地址范围从0.0.0.1 到126.0.0.0。可用的A类网络有126个，每个网络能容纳1亿多个主机（2的24次方的-2主机数目）。<br />以子网掩码来进行区别：：255.0.0.0<br /><code>127.0.0.0 到 127.255.255.255</code>是保留地址，用做循环测试用的</p><h3 id="b类地址"><a class="markdownIt-Anchor" href="#b类地址"></a> B类地址</h3><p>B类地址：范围从128-191，如172.168.1.1，第一和第二段号码为网络号码，剩下的2段号码为本地计算机的号码。转换为2进制来说，一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，网络地址的最高位必须是“10”，地址范围从128.0.0.0到191.255.255.255。可用的B类网络有16384个，每个网络能容纳6万多个主机 。(2的16次方-2)<br />以子网掩码来进行区别：255.255.0.0<br /><code>169.254.0.0 到 169.254.255.255</code>是保留地址。如果你的IP地址是自动获取IP地址，而你在网络上又没有找到可用的DHCP服务器，这时你将会从169.254.0.0到169.254.255.255中临时获得一个IP地址。</p><h3 id="c类地址"><a class="markdownIt-Anchor" href="#c类地址"></a> C类地址</h3><p>C类地址：范围从192-223，如192.168.1.1，第一，第二，第三段号码为网络号码，剩下的最后一段号码为本地计算机的号码。转换为2进制来说，一个C类IP地址由3字节的网络地址和1字节的主机地址组成，网络地址的最高位必须是“110”。范围从192.0.0.0到223.255.255.255。C类网络可达209万余个，每个网络能容纳254个主机。(2的8次方-2)<br />以子网掩码来进行区别： 255.255.255.0</p><h3 id="d类地址"><a class="markdownIt-Anchor" href="#d类地址"></a> D类地址</h3><p>D类地址：范围从224-239，D类IP地址第一个字节以“1110”开始，它是一个专门保留的地址。它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中。多点广播地址用来一次寻址一组计算机，它标识共享同一协议的一组计算机。<br />224.0.0.0-239.255.255.255 组播地址</p><h3 id="e类地址"><a class="markdownIt-Anchor" href="#e类地址"></a> E类地址</h3><p>E类地址：范围从240-254，以“11110”开始，为将来使用保留。 全零（“0．0．0．0”）地址对应于当前主机。全“1”的IP地址（“255．255．255．255”）是当前子网的广播地址。<br />240.0.0.0-255.255.255.254 保留地址</p><h2 id="ip地址转换"><a class="markdownIt-Anchor" href="#ip地址转换"></a> IP地址转换</h2><p>ip地址: 202.197.119.110<br />若掩码为:255.255.255.0 求网络号和主机号<br />ip转换为2进制 1100 1010. 1100 0101. 0111 0111. 0110 1110<br />子网掩码2进制 1111 1111. 1111 1111. 1111 1111. 0000 0000<br />相与运算 1100 1010. 1100 0101. 0111 0111. 0000 0000 网络号<br />ip转换为2进制 1100 1010. 1100 0101. 0111 0111. 0110 1110<br />子网掩码取反 0000 0000. 0000 0000. 0000 0000. 1111 1111<br />相与运算 0000 0000. 0000 0000. 0000 0000. 0110 1110 主机号<br />ip 202.197.118.110/24 是否与上一个ip再统一网段? 求网络号 相同则同一网段<br />ip转换为2进制 1100 101. 1100 0101. 0111 0110. 0110 1110<br />求得网络号 1100 1010.1100 0101.0111 0110. 0000 0000<br />求得结果 网络号不同 所以不再同一网络中</p><h2 id="子网掩码"><a class="markdownIt-Anchor" href="#子网掩码"></a> 子网掩码</h2><h3 id="私有地址"><a class="markdownIt-Anchor" href="#私有地址"></a> 私有地址</h3><p>所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址<br />在A类地址中，10.0.0.0到10.255.255.255是私有地址/8<br />在B类地址中，172.16.0.0到172.31.255.255是私有地址。/16<br />在C类地址中，192.168.0.0到192.168.255.255是私有地址。/24</p><h2 id="不同网段通信"><a class="markdownIt-Anchor" href="#不同网段通信"></a> 不同网段通信</h2><h3 id="网关服务器"><a class="markdownIt-Anchor" href="#网关服务器"></a> 网关服务器</h3><p>通过路由(网关)通信<br />准备3台虚拟机 作路由的虚拟机2块网卡 其他的单网卡<br />设置ip地址<br /><strong>虚拟机1:</strong> 192.168.100.201/24 网关指向 192.168.100.254<br /><strong>路由:</strong></p><ul><li><strong>ens33:</strong> 192.168.100.254/24</li><li><strong>ens37:</strong> 10.10.10.254/24<br /><strong>虚拟机2:</strong> 10.10.10.100/24 网关指向 10.10.10.254<br /><strong>路由:</strong> 开启转发功能<br />临时:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 0 为关闭转发功能</span><br><span class="hljs-comment"># 1 为开启转发功能</span><br><span class="hljs-comment"># 该文件为内核参数， 只能用echo 1 &gt; 覆盖</span><br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>永久：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/lib/sysctl.d/00-system.conf <br>net.ipv4.ip_forward = 1<br></code></pre></td></tr></table></figure><h3 id="互设静态路由"><a class="markdownIt-Anchor" href="#互设静态路由"></a> 互设静态路由</h3><h3 id="一半网关一半路由"><a class="markdownIt-Anchor" href="#一半网关一半路由"></a> 一半网关一半路由</h3><p>网关得打开路由转发功能</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ip地址的组成&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ip地址的组成&quot;&gt;&lt;/a&gt; IP地址的组成&lt;/h2&gt;
&lt;p&gt;IP地址由4部分数字组成，每部分数字对应于8位二进制数字，各部分之间用小数点分开 这是点分2进制 .每如果换算为1</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="网络" scheme="https://wooxin.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="ip" scheme="https://wooxin.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络管理 - tcpip</title>
    <link href="https://wooxin.github.io/posts/dbd835eb/"/>
    <id>https://wooxin.github.io/posts/dbd835eb/</id>
    <published>2025-09-20T09:14:48.000Z</published>
    <updated>2025-09-20T09:19:04.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tcpip包"><a class="markdownIt-Anchor" href="#tcpip包"></a> TCP/IP包</h2><h3 id="什么是osi参考模型"><a class="markdownIt-Anchor" href="#什么是osi参考模型"></a> 什么是OSI参考模型</h3><ol><li>物理层（Physical Layer）：物理层定义了传输介质和设备之间的物理连接方式，包括电压、电缆规范、传输速率等。它处理比特流的传输。</li><li>数据链路层（Data Link Layer）：数据链路层负责在相邻节点之间可靠传输数据帧，通过物理地址（MAC地址）识别设备。它提供了一种错误检测和纠正的机制。</li><li>网络层（Network Layer）：网络层负责在网络中选择最佳路径并进行分组转发。它使用逻辑地址（IP地址）来标识设备和网络。</li><li>传输层（Transport Layer）：传输层提供端到端的可靠数据传输，确保数据的完整性、有序性和可靠性。它使用端口号来标识应用程序之间的通信。</li><li>会话层（Session Layer）：会话层建立、管理和终止应用程序之间的会话连接。它提供了数据交换的控制和同步机制。</li><li>表示层（Presentation Layer）：表示层负责数据的格式转换、加密和压缩，以确保不同系统之间的数据能够正确解释和显示。</li><li>应用层（Application Layer）：应用层是最高层，它提供了用户和应用程序之间的接口，包括文件传输、电子邮件、远程登录等。</li></ol><h3 id="七层osi参考模型的特性"><a class="markdownIt-Anchor" href="#七层osi参考模型的特性"></a> 七层OSI参考模型的特性</h3><p>每个层次都有特定的功能和协议，数据在从一个层次传递到另一个层次时会经过相应的封装和解封装过程。OSI参考模型的设计使得不同厂商的设备和软件能够互操作，从而实现跨平台和跨网络的通信。</p><h3 id="七层osi参考模型的总结-tcp-ip"><a class="markdownIt-Anchor" href="#七层osi参考模型的总结-tcp-ip"></a> 七层OSI参考模型的总结 (TCP / IP)</h3><p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />TCP / IP<br />应用层： 它只负责产生相应格式的数据 ssh ftp nfs cifs dns http smtp pop3<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />传输层： 定义数据传输的两种模式：<br />TCP（传输控制协议：面向连接，可靠的，效率相对不高）<br />UDP（用户数据报协议：非面向连接，不可靠的，但效率高）<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />网络层： 连接不同的网络如以太网、令牌环网<br />IP （路由，分片） 、ICMP、 IGMP<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />数据链路层：以太网传输<br />ARP ( 地址解析协议，作用是将IP解析成MAC )<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />物理层： 主要任务是规定各种传输介质和接口与传输信号相关的一些特性<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p><h2 id="tcpdump"><a class="markdownIt-Anchor" href="#tcpdump"></a> tcpdump</h2><p>tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息</p><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th><th></th></tr></thead><tbody><tr><td>tcpdump</td><td>-i &lt;interface&gt;</td><td>指定网络接口</td><td>通过指定网络接口来捕获网络数据包</td><td></td></tr><tr><td>tcpdump</td><td>-n</td><td>禁用主机名解析</td><td>显示IP地址而不是主机名</td><td></td></tr><tr><td>tcpdump</td><td>-c &lt;count&gt;</td><td>捕获指定数量的数据包后停止</td><td>指定捕获的数据包数量</td><td></td></tr><tr><td>tcpdump</td><td>-s &lt;snaplen&gt;</td><td>指定数据包的最大捕获长度</td><td>设置数据包的最大捕获长度，以字节为单位</td><td></td></tr><tr><td>tcpdump</td><td>-w &lt;file&gt;</td><td>将捕获的数据包写入文件</td><td>将捕获的数据包保存到指定的文件中</td><td></td></tr><tr><td>tcpdump</td><td>-r &lt;file&gt;</td><td>从文件中读取数据包</td><td>从指定的文件中读取数据包进行分析</td><td></td></tr><tr><td>tcpdump</td><td>-A</td><td>以ASCII格式显示数据包内容</td><td>以ASCII格式显示数据包的内容</td><td></td></tr><tr><td>tcpdump</td><td>-X</td><td>以十六进制和ASCII格式显示数据包内容</td><td>以十六进制和ASCII格式显示数据包的内容</td><td></td></tr><tr><td>tcpdump</td><td>-vvv</td><td>显示详细的调试信息</td><td>显示更详细的调试信息，包括更多的协议细节</td><td></td></tr><tr><td>tcpdump</td><td>-e</td><td>显示以太网头部信息</td><td>显示以太网帧的头部信息</td><td></td></tr><tr><td>tcpdump</td><td>-q</td><td>简化输出</td><td>以简化的格式输出结果</td><td></td></tr><tr><td>tcpdump</td><td>-S</td><td>以绝对序号显示数据包</td><td>以绝对序号显示数据包的序号</td><td></td></tr><tr><td>tcpdump</td><td>-t</td><td>不显示时间戳</td><td>不显示数据包的时间戳</td><td></td></tr><tr><td>tcpdump</td><td>-l</td><td>行缓冲输出</td><td>使用行缓冲输出模式</td><td></td></tr><tr><td>tcpdump</td><td>-B &lt;buffer_size&gt;</td><td>设置捕获缓冲区大小</td><td>设置捕获数据包的缓冲区大小，以字节为单位</td><td></td></tr><tr><td>tcpdump</td><td>-F &lt;file&gt;</td><td>从文件中读取过滤条件</td><td>从指定的文件中读取过滤条件</td><td></td></tr><tr><td>tcpdump</td><td>-G &lt;rotate_seconds&gt;</td><td>自动循环文件</td><td>捕获数据包到一个文件一段时间后，自动切换到新文件</td><td></td></tr><tr><td>tcpdump</td><td>-W &lt;file_count&gt;</td><td>设置循环文件的数量</td><td>设置循环文件的数量，循环文件的命名格式为&lt;file&gt;.&lt;number&gt;</td><td></td></tr><tr><td>tcpdump</td><td>-L</td><td>列出可用的网络接口</td><td>列出系统上可用的网络接口</td><td></td></tr><tr><td>tcpdump</td><td>-E &lt;file&gt;</td><td>从文件中读取扩展信息</td><td>从指定的文件中读取扩展信息</td><td></td></tr><tr><td>tcpdump</td><td>-v</td><td>显示详细信息</td><td>显示更详细的信息，包括更多的协议细节</td><td></td></tr><tr><td>tcpdump</td><td>-V</td><td>显示版本信息</td><td>显示tcpdump的版本信息</td><td></td></tr><tr><td>tcpdump</td><td>-h</td><td>显示帮助信息</td><td>显示tcpdump的帮助信息</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><hr /><h2 id="数据链路层"><a class="markdownIt-Anchor" href="#数据链路层"></a> 数据链路层</h2><h3 id="arp协议"><a class="markdownIt-Anchor" href="#arp协议"></a> ARP协议</h3><p>ARP协议是“Address Resolution Protocol”（地址解析协议）的缩写。<br />ARP地址解析协议用于将计算机的网络地址（IP地址32位）转化为物理地址（MAC地址48位）[RFC826]。ARP协议是属于数据链路层的协议，在以太网中的数据帧从一个主机到达网内的另一台主机是根据48位的以太网地址（硬件地址）来确定接口的，而不是根据32位的IP地址。内核（如驱动）必须知道目的端的硬件地址才能发送数据</p><ol><li>应用程序构造数据包，该示例是产生ICMP包，被提交给内核（网络驱动程序）；</li><li>内核检查是否能够转化该IP地址为MAC地址，也就是在本地的ARP缓存中查看IP-MAC对应表[1]；</li><li>如果存在该IP-MAC对应关系，那么跳到步骤7；如果不存在该IP-MAC对应关系，那么接续下面的步骤；</li><li>内核进行ARP广播，目的地的MAC地址是FF-FF-FF-FF-FF-FF，ARP命令类型为REQUEST（1），其中包含有自己的MAC地址；</li><li>当192.168.1.2主机接收到该ARP请求后，将源主机的IP地址及MAC更新至自己的arp缓冲中，然后发送一个ARP的REPLY（2）命令，其中包含自己的MAC地址；</li><li>本地获得192.168.1.2主机的IP-MAC地址对应关系，并保存到ARP缓存中；</li><li>内核将把IP转化为MAC地址，然后封装在以太网头结构中，再把数据发送出去；</li></ol><p>使用arp-a命令就可以查看本地的ARP缓存内容，所以，执行一个本地的PING命令后，ARP缓存就会存在一个目的IP的记录了。当然，如果你的数据包是发送到不同网段的目的地，那么就一定存在一条网关的IP-MAC地址对应的记录</p><h3 id="以太网报头"><a class="markdownIt-Anchor" href="#以太网报头"></a> 以太网报头</h3><p>以太网报头中的前两个字段是以太网的源地址和目的地址。目的地址为全F的特殊地址是广播地址。电缆上的所有以太网接口都要接收广播的数据帧<br />两个字节长的以太网帧类型表示后面数据的类型。对于ARP请求或应答来说，该字段的值为0x0806<br />hardware (硬件)和protocol (协议)用来描述ARP分组中的各个字段。例如，一个ARP请求分组询问协议地址（这里是IP地址）对应的硬件地址（这里是以太网地址）</p><ul><li>硬件类型字段表示硬件地址的类型。它的值为1即表示以太网地址。</li><li>协议类型字段表示要映射的协议地址类型。它的值为0x0800即表示IP地址</li><li>硬件地址长度和协议地址长度分别指出硬件地址和协议地址的长度，以字节为单位。对于以太网上IP地址的ARP请求或应答来说，它们的值分别为6和4。 各占用1字节</li><li>op操作字段指出四种操作类型，它们是ARP请求（值为1）、ARP应答（值为2）、RARP请求（值为3）和R ARP应答（值为4）。</li><li>接下来的四个字段是发送端的硬件地址（在本例中是以太网地址）、发送端的协议地址（IP地址）、</li><li>目的端的硬件地址和目的端的协议地址。注意，这里有一些重复信息：在以太网的数据帧报头中和ARP请求数据帧中都有发送端的硬件地址。<br />对于一个ARP请求来说，除目的端硬件地址外的所有其他的字段都有填充值。当系统收到一份目的端为本机的ARP请求报文后，它就把硬件地址填进去，然后用两个目的端地址分别替换两个发送端地址，并把操作字段置为2，最后把它发送回去。</li></ul><h4 id="rarp"><a class="markdownIt-Anchor" href="#rarp"></a> RARP</h4><p>RARP即反向地址转换协议。<br />反向地址转换协议（RARP：Reverse Address Resolution Protocol） 反向地址转换协议（RARP）允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。网络管理员在局域网网关路由器里创建一个表以映射物理地址（MAC）和与其对应的 IP 地址。当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器，此机器就会存储起来以便日后使用</p><h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3><ol><li>IP冲突的本质是什么？<br />我们知道，如果网络中存在相同IP地址的主机的时候，就会报告出IP地址冲突的警告。这是怎么产生的呢？<br />比如某主机B规定IP地址为192.168.0.1，如果它处于开机状态，那么其他机器A更<br />改IP地址为192.168.0.1就会造成IP地址冲突。其原理就是：主机A在连接网络（或更改IP地址）的时候就会向网络发送ARP包广播自己的IP地址，也就是freearp。如果网络中存在相同IP地址的主机B，那么B就会通过ARP来reply该地址，当A接收到这个reply后，A就会跳出IP地址冲突的警告，当然B也会有警告</li><li>arp欺骗<br />ARP协议并不只在发送了ARP请求才接收ARP应答。当计算机接收到ARP应答数据包的时候，就会对本地的ARP缓存进行更新，将应答中的IP和MAC地址存储在ARP缓存中。因此，在上面的假设网络中，B向A发送一个自己伪造的ARP应答，而这个应答中的数据为发送方IP地址是192.168.10.3（C的IP地址），MAC地址是DD-DD-DD-DD-DD-DD（C的MAC地址本来应该是CC-CC-CC-CC-CC-CC，这里被伪造了）。当A接收到B伪造的ARP应答，就会更新本地的ARP缓存，将本地的IP-MAC对应表更换为接收到的数据格式，由于这一切都是A的系统内核自动完成的，A可不知道被伪造了。</li></ol><hr /><h2 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h2><h3 id="ip协议"><a class="markdownIt-Anchor" href="#ip协议"></a> ip协议</h3><p>IP是英文Internet Protocol（网络之间互连的协议）的缩写，中文简称为“网协”，也就是为计算机网络相互连接进行通信而设计的协议。</p><h4 id="ip协议简介"><a class="markdownIt-Anchor" href="#ip协议简介"></a> IP协议简介:</h4><p>IP协议是TCP/IP协议族中最为核心的协议。所有TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输。</p><h4 id="ip协议特点"><a class="markdownIt-Anchor" href="#ip协议特点"></a> IP协议特点</h4><ul><li>不可靠（unreliable）: 它不能保证IP数据报能成功地到达目的地。IP仅提供尽力而为的传输服务。如果发生某种错误时，如某个路由器暂时用完了缓冲区， IP有一个简单的错误处理算法：丢弃该数据报，然后发送ICMP消息报给信源端。任何要求的可靠性必须由上层来提供（如TCP）。</li><li>无连接（connectionless）： 这个术语的意思是IP并不维护任何关于后续数据报的状态信息。每个数据报的处理是相互独立的。这也说明， IP数据报可以不按发送顺序接收。如果一信源向相同的信宿发送两个连续的数据报（先是A，然后是B），每个数据报都是独立地进行路由选择，可能选择不同的路线，因此B可能在A到达之前先到达。</li></ul><h4 id="ip协议首部-20字节"><a class="markdownIt-Anchor" href="#ip协议首部-20字节"></a> IP协议首部 20字节</h4><p>IP数据报首部的固定部分中的各字段:</p><ol><li>版本　占4位，指IP协议的版本。通信双方使用的IP协议版本必须一致。目前广泛使用的IP协议版本号为4（即IPv4）。关于IPv6</li><li>首部长度　占4位，可表示的最大十进制数值是15(1111)则表示60字节头长度.最常用的首部长度就是20字节（即首部长度为0101）</li><li>服务类型 占8位，区分服务 用来获得更好的服务. 高层协议通过服务类型字段告诉ip处理设备,应该如何处理这个数据包,该字段占一个字节长(包括3bit优先级[0~7最高] 第4bit延迟 吞吐量标志第5bit 可靠性标志第6个bit 第7bit最小开销标志)</li><li>总长度　总长度指首部和数据之和的长度，单位为字节。总长度字段为16位，因此数据报的最大长度为2^16-1=65535字节, 在IP层下面的每一种数据链路层都有自己的帧格式，其中包括帧格式中的数据字段的最大长度，这称为最大传送单元MTU(Maximum Transfer Unit)。当一个数据报封装成链路层的帧时，此数据报的总长度（即首部加上数据部分）一定不能超过下面的数据链路层的MTU值。</li><li>标识(identification)　占16位。IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将此值赋给标识字段。但这个“标识”并不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的MTU而必须分片时，这个标识字段的值就被复制到所有的数据报的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。</li><li>标志(flag)　包分片标识 占3位，但目前只有2位有意义。第一位保留<ul><li>标志字段中的最低位记为MF(More Fragment)。MF=1即表示后面“还有分片”的数据报。MF=0表示这已是若干数据报片中的最后一个。</li><li>标志字段中间的一位记为DF(Don’t Fragment)，意思是“不能分片”。只有当DF=0时才允许分片。</li></ul></li><li>片偏移　占13位 表示当前的这个数据分片在原有数据包中所处的位置,有了这个字段就便于目标主机一片一片的重组数据包</li><li>生存时间　占8位，生存时间字段常用的的英文缩写是TTL(Time To Live),每记过一个路由器 该值就减1,当TTL值为0时,路由器就会丢弃该数据,并且向发包主机返回一个报警信息.后来把TTL字段的功能改为“跳数限制&quot;.TTL的意义是指明数据报在网络中至多可经过多少个路由器。显然，数据报在网络上经过的路由器的最大数值是255.若把TTL的初始值设为1，就表示这个数据报只能在本局域网中传送.这种机制避免了数据包在网络中无线的循环</li><li>协议　占8位，协议字段指出此数据报携带上层的数据是使用何种协议.比如 tcp 该值为6 udp该值17 1表示为ICMP协议， 2表示为IGMP协议</li><li>首部检验和　占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和（一些字段，如生存时间、标志、片偏移等都可能发生变化）。</li><li>源地址　占32位。</li><li>目的地址　占32位</li></ol><h4 id="ip分片"><a class="markdownIt-Anchor" href="#ip分片"></a> IP分片</h4><p>超过1500 byte，发送端分片，接收端重组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看eth0网卡</span><br>[root@server2 ~]<span class="hljs-comment"># ip link show eth0</span><br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000<br><span class="hljs-built_in">link</span>/ether 00:0c:29:21:4d:a6 brd ff:ff:ff:ff:ff:ff<br><br><span class="hljs-comment"># 使用tcpdump 对 eth0 网卡进行抓包 并写入 fragment.txt 文件</span><br>[root@server ~]<span class="hljs-comment"># tcpdump -i eth0 -nn -s 1500 icmp and host 192.168.116.100 -w fragment.txt</span><br><span class="hljs-comment"># 发送 一次 4000 大小的数据包到 192.168.0.100  </span><br>[root@server ~]<span class="hljs-comment"># ping -c 1 -s 4000 192.168.0.100</span><br>PING 192.168.0.100 (192.168.0.100) 4000(4028) bytes of data.<br>4008 bytes from 192.168.0.100: icmp_seq=1 ttl=128 time=0.463 ms<br></code></pre></td></tr></table></figure><p>因为 mtu 超过了1500 所以会进行分片</p><h4 id="利用ip碎片攻击"><a class="markdownIt-Anchor" href="#利用ip碎片攻击"></a> 利用ip碎片攻击</h4><p>IP首部有两个字节表示整个IP数据包的长度，所以IP数据包最长只能为0xFFFF，就是65535字节。如果有意发送总长度超过65535的IP碎片，一些老的系统内核在处理的时候就会出现问题，导致崩溃或者拒绝服务。另外，如果分片之间偏移量经过精心构造，一些系统就无法处理，导致死机。所以说，漏洞的起因是出在重组算法上。下面我们逐个分析一些著名的碎片攻击程序，来了解如何人为制造IP碎片来攻击系统</p><blockquote><p>ping of death是利用ICMP协议的一种碎片攻击。攻击者发送一个长度超过65535的Echo Request数据包，目标主机在重组分片的时候会造成事先分配的65535字节缓冲区溢出，系统通常会崩溃或挂起。ping不就是发送ICMP Echo Request数据包的吗？让我们尝试攻击一下吧！不管IP和ICMP首部长度了，数据长度反正是多多益善，就65535吧，发送一个包：<br />ping -c 1 -s 65535 192.168.0.1<br />Error: packet size 65535 is too large. Maximum is 65507<br />不走运，看来Linux自带的ping不允许我们做坏事。<br />65507是它计算好的：65535-20-8=65507。Win2K下的ping更抠门，数据只允许65500大小。所以你必须找另外的程序来发包，但是目前新版本的操作系统已经搞定这个缺陷了,还有jolt2 和 teardrop</p></blockquote><h4 id="如何阻止ip碎片攻击"><a class="markdownIt-Anchor" href="#如何阻止ip碎片攻击"></a> 如何阻止IP碎片攻击</h4><ul><li>Windows系统请打上最新的Service Pack，目前的Linux内核已经不受影响。</li><li>如果可能，在网络边界上禁止碎片包通过，或者用iptables限制每秒通过碎片包的数目。</li><li>如果防火墙有重组碎片的功能，请确保自身的算法没有问题，否则被DoS就会影响整个网络。</li><li>Win2K系统中，自定义IP安全策略，设置 “碎片检查”</li></ul><h3 id="icmp协议"><a class="markdownIt-Anchor" href="#icmp协议"></a> icmp协议</h3><h4 id="icmp协议简介"><a class="markdownIt-Anchor" href="#icmp协议简介"></a> ICMP协议简介</h4><p>ICMP是（Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。<br />ICMP经常被认为是IP层的一个组成部分。它传递差错报文以及其他需要注意的信息。ICMP报文通常被IP层或更高层协议（TCP或UDP）使用。一些ICMP报文把差错报文返回给用户进程<br />其功能主要有：</p><ul><li>侦测远端主机是否存在。</li><li>建立及维护路由资料。</li><li>重导资料传送路径。</li></ul><h4 id="icmp首部-8字节"><a class="markdownIt-Anchor" href="#icmp首部-8字节"></a> ICMP首部 8字节</h4><h4 id="icmp响应类型"><a class="markdownIt-Anchor" href="#icmp响应类型"></a> ICMP响应类型</h4><ol><li>Echo Reply（回显应答）：用于响应Echo Request消息，通常用于网络连通性测试（例如ping命令）。</li><li>Destination Unreachable（目标不可达）：用于指示数据包无法到达目标地址。常见的原因包括目标主机不可达、网络不可达、端口不可达等。</li><li>Source Quench（源点压制）：用于指示源主机发送速度过快，要求其减缓发送速度以避免网络拥塞。</li><li>Redirect（重定向）：用于指示路由器告知主机发送数据包的最佳路径，并提供一个更佳的下一跳路由器地址。</li><li>Time Exceeded（超时）：用于指示某个数据包在传输过程中发生了超时。常见的原因包括数据包在路由器上被丢弃或者数据包在网络中循环转发。</li><li>Parameter Problem（参数问题）：用于指示某个数据包的头部包含错误或者不完整的参数。</li><li>Timestamp Reply（时间戳应答）：用于响应Timestamp Request消息，提供时间信息。</li></ol><p>8 响应请求（ECHO-REQUEST）<br />0 响应应答（ECHO-REPLY）<br />3 不可到达</p><h5 id="type3-code8"><a class="markdownIt-Anchor" href="#type3-code8"></a> type=3 code=8</h5><p>网络不可到达</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 模拟 type=3 code=8 问题</span><br><span class="hljs-comment"># 有网关 ping不存在的网段主机 网关开转发并且没有该网段路由(网关没有设置自己网关)</span><br>tcpdump -nn -i ens33 icmp -w /tmp/icmp-3.txt<br></code></pre></td></tr></table></figure><blockquote><p>意思是在一个网关主机上ping另一个网关的主机, 并且网关服务器必须开启转发但不能有被ping主机的网段<br />如:<br />服务器A: 网络(192.168.10.100) 网关(192.168.10.0)<br />网关服务器: 开启转发 网络1(192.168.10.1) 网络2(100.100.100.0)<br />服务器B: 网络(99.99.99.99)</p></blockquote><h5 id="type3-code1"><a class="markdownIt-Anchor" href="#type3-code1"></a> type=3 code=1</h5><p>主机不可到达</p><ol><li>ping本网段的一台主机,主机不存在(lo响应自己)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -nn -i lo icmp -w /tmp/icmp-1.txt<br></code></pre></td></tr></table></figure><blockquote><p>意思是ping一个本网段并不存在的主机, 需要与本机同一网段, 但不能是真是存在的</p></blockquote><ol start="2"><li>ping不在本网段的主机 有网关 网关开转发并且有该网段路由 对应主机不存在</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -nn -i ens33 icmp -w /tmp/icmp-2.txt<br></code></pre></td></tr></table></figure><blockquote><p>意思是在一个网关主机上ping另一个网关的主机, 并且网关服务器必须开启转发并填入双方主机网关, 但不能有被ping主机的IP<br />如:<br />服务器A: 网络(192.168.10.100) 网关(192.168.10.0)<br />网关服务器: 开启转发 网络1(192.168.10.1) 网络2(100.100.100.0)<br />服务器B: 网络(100.100.100.100) <strong>注意:</strong> 不能真的有100.100这个IP的存在</p></blockquote><h5 id="type3-code2"><a class="markdownIt-Anchor" href="#type3-code2"></a> type=3 code=2</h5><p>协议不可到达</p><h5 id="type3-code3"><a class="markdownIt-Anchor" href="#type3-code3"></a> type=3 code=3</h5><ol><li>ping存在主机 对应主机有防火墙 REJECT</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -p icmp -j REJECT <span class="hljs-comment"># 创建规则</span><br>iptables -t filter -D INPUT -p icmp -j REJECT <span class="hljs-comment"># 删除规则</span><br><br><span class="hljs-comment"># ping已经管控了icmp的主机</span><br>tcpdump -nn -i ens33 icmp -w /tmp/icmp-2.txt<br></code></pre></td></tr></table></figure><ol start="2"><li>指定一个主机 不打开的dns服务, 解析域名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -nn -i ens33 icmp -w /tmp/icmp-4.txt<br></code></pre></td></tr></table></figure><h3 id="checksum校验和字段-16位"><a class="markdownIt-Anchor" href="#checksum校验和字段-16位"></a> checksum校验和字段 16位</h3><p>wireshark考虑到window系统与Linux系统发出的ping报文（主要指ping应用字段而非包含IP头的ping包）的字节顺序不一样（windows为LE：little-endian byte order，Linux为BE：big-endian），为了体现wireshark的易用性，开发者将其分别显示出来。</p><hr /><h2 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h2><h3 id="udp协议"><a class="markdownIt-Anchor" href="#udp协议"></a> udp协议</h3><p>不用先与对方建立连接（非面向连接）</p><h4 id="udp协议的简介"><a class="markdownIt-Anchor" href="#udp协议的简介"></a> UDP协议的简介</h4><p>UDP 是User Datagram Protocol的简称， 中文名是用户数据包协议.是OSI参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。在网络中它与TCP协议一样用于处理 UDP数据包。在OSI模型中，在第四层传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说当报文发送之后，是无法得知其是否安全完整到达的。</p><h4 id="udp协议的特点"><a class="markdownIt-Anchor" href="#udp协议的特点"></a> UDP协议的特点</h4><p>它不属于连接型协议，因而具有资源消耗小，处理速度快的优点，所以通常音频、视频和普通数据在传送时使用UDP较多，因为它们即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。比如我们聊天用的QQ 视频会议软件就是使用的UDP协议。<br />非面向连接：不用先与对方建立连接，不握手<br />不可靠的：没有确认机制</p><ol><li>无连接性：UDP是一种无连接的协议，发送方在发送数据之前不需要与接收方建立连接。每个UDP数据包都是独立的，不依赖于之前或之后的数据包。</li><li>非可靠性：相对于TCP的可靠性，UDP不提供数据包的可靠性保证。它没有确认机制，也不会进行重传操作。一旦数据包被发送出去，UDP就不再关心其是否到达目标主机。</li><li>高效性：由于UDP不需要维护连接状态和执行复杂的传输控制机制，它的开销相对较小，传输效率较高。这使得UDP在实时应用程序中非常有用，如音频和视频流媒体。</li><li>面向数据报：UDP将数据划分为数据报（Datagram），每个数据报都有自己的完整标识。这意味着应用程序可以控制数据的边界，确保接收方按照正确的顺序接收和处理数据。</li><li>支持多播和广播：UDP可以轻松地支持多播和广播传输。多播传输允许将数据发送到一个组中的多个接收方，而广播传输则将数据发送到网络中的所有设备。</li><li>低延迟：由于UDP的简单性和无连接性，它对延迟非常敏感。这使得UDP适用于需要快速传输的应用程序，如实时游戏和视频会议。</li></ol><h4 id="udp协议首部-8字节"><a class="markdownIt-Anchor" href="#udp协议首部-8字节"></a> UDP协议首部 8字节</h4><p>数据报文的长度＝DATA长度 ＋ 8字节UDP首部的长度 ＋ 20字节IP首部的长度</p><p><strong>source port:</strong> 主动访问端的源端口总是大于1024的随机端口<br /><strong>destination port:</strong> 目的端口<br /><strong>length:</strong> 指的是当前UDP的数据段的长度（DATA长度＋UDP首部的长度）</p><h4 id="udp抓包实验"><a class="markdownIt-Anchor" href="#udp抓包实验"></a> UDP抓包实验</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 tcpdump 对 192.168.0.101 进行udp协议抓包</span><br>[root@server2 ~]<span class="hljs-comment"># tcpdump -i eth0 -nn udp and host 192.168.0.101</span><br><br><span class="hljs-comment"># 打开本地udp端口5555</span><br>[root@server2 ~]<span class="hljs-comment"># nc -l 192.168.0.101 -u 5555</span><br><br><span class="hljs-comment"># 连接到192.168.0.101的udp 5555端口</span><br>[root@server2 ~]<span class="hljs-comment"># nc 192.168.0.101 -u 5555</span><br><br></code></pre></td></tr></table></figure><h4 id="udp-flood攻击"><a class="markdownIt-Anchor" href="#udp-flood攻击"></a> UDP Flood攻击</h4><p>UDP Flood是日渐猖厥的流量型DoS攻击，原理也很简单。常见的情况是利用大量UDP小包冲击DNS服务器或Radius认证服务器、流媒体视频服务器。 100k pps的UDP Flood经常将线路上的骨干设备例如防火墙打瘫，造成整个网段的瘫痪。由于UDP协议是一种无连接的服务，在UDP FLOOD攻击中，攻击者可发送大量伪造源IP地址的小UDP包。但是，由于UDP协议是无连接性的，所以只要开了一个UDP的端口提供相关服务的话，那么就可针对相关的服务进行攻击。</p><h3 id="tcp协议"><a class="markdownIt-Anchor" href="#tcp协议"></a> tcp协议</h3><h4 id="tcp协议的简介"><a class="markdownIt-Anchor" href="#tcp协议的简介"></a> TCP协议的简介</h4><p>Transmission Control Protocol 传输控制协议,TCP是一种面向连接（连接导向）的、可靠的、基于字节流的传输层（Transport layer）通信协议，由IETF的RFC 793说明（specified）。TCP在IP报文的协议号是6。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，UDP是同一层内另一个重要的传输协议。</p><h4 id="tcp协议的特点"><a class="markdownIt-Anchor" href="#tcp协议的特点"></a> TCP协议的特点</h4><ol><li><p>可靠性：TCP提供可靠的数据传输机制。它使用确认机制和超时重传来确保数据的完整性和准确性。当接收方收到数据时，它会发送确认消息给发送方，如果发送方在一定时间内没有收到确认消息，它会重新发送数据。</p></li><li><p>面向连接：在使用TCP之前，发送方和接收方需要建立一个连接。这个连接是双向的，可以在两个方向上进行数据传输。连接的建立过程包括三次握手，即发送方发送连接请求，接收方回复确认，最后发送方再次回复确认。</p></li><li><p>流量控制：TCP使用流量控制机制来确保发送方不会以超过接收方处理能力的速度发送数据。接收方可以通过窗口大小告知发送方可以接收的数据量。</p></li><li><p>拥塞控制：TCP使用拥塞控制机制来避免网络拥塞。当网络出现拥塞时，TCP会降低发送速率，并且定期增加发送速率，以便逐步恢复。</p></li><li><p>面向字节流：TCP将数据视为一串无结构的字节流，而不是独立的消息。它会将数据分割成适当的大小，并在接收端重新组装。</p></li><li><p>可扩展性：TCP是一种通用协议，可以在不同类型的网络中使用，例如局域网（LAN）和广域网（WAN）。它可以适应不同的网络环境和各种应用需求。</p></li><li><p>面向连接： 三次握手和四次挥手</p><ul><li>SYN 同步标记</li><li>FIN 结束标记</li></ul></li><li><p>可靠的： 确认和重传机制</p><ul><li>确认机制： ACK 确认标记</li><li>重传机制： 在RTT（数据段往返时间），没有收到ACK，则认为需要重传整个数据段</li></ul></li><li><p>TCP的状态</p></li><li><p>TCP的标记</p><ul><li>SYN： 同步标记位</li><li>ACK： 确认标记位（包括三次握手中的确认及之后数据传输时的确认）</li><li>RST： 重置标记位（访问一个未打开的TCP端口时，服务器返回一个带RST标记位的响应）</li><li>PSH： 推标记位 （延时性比较高的时候都会加上PSH,比较快的发送出去,不往缓存中放，ssh，telnet，ftp-command）</li><li>URG： 紧急标志位（通信的时候网络故障问题引起的数据没传完，会发送一个URG标记位）</li><li>FIN： 结束标记位 ( 发送端完成发送任务，双方都需要确认没有数据再发给对方 )</li></ul></li></ol><h4 id="tcp协议首部-4字节"><a class="markdownIt-Anchor" href="#tcp协议首部-4字节"></a> TCP协议首部 4字节</h4><p><strong>Source Port / Destination Port:</strong> 来源端口/目的端口。其中包含来源端口/目的端口的端口号。<br /><strong>Sequence Number:</strong> 封包序号。当数据要从一台主机传送去另一台主机的时候，发送端会为封包建立起一个起始序号，然后按照所传送的数据长度(字节数值)，依次递增上去。使用递增之后的值来作为下一个封包的序号。这样接收端就可以根据序号来检测资料是否接收完整了。<br /><strong>Acknowledge Number:</strong> 回应序号。当接收端接收到 TCP 封包并通过检验确认之后，会依照发送序号、再加上数据长度产生一个响应序号，附在下一个响应封包送回给对方(无需额外的送出专门的确认封包)，这样接收端就知道刚才的封包已经被成功接收到了。假如基于网络状况或其它原因，当封包的定时器达到期限时，接收端还没接收到回应序号，就会认为该封包丢失了并加以重送。如果刚好重发封包之后才接收到响应，接收端就会根据序号来判断该封包是否被重复发送，如果是的话，将之丢弃不做任何处理</p><h5 id="contral-flag"><a class="markdownIt-Anchor" href="#contral-flag"></a> Contral Flag</h5><p>控制标记。一共有六个它们分别是：</p><h5 id="urgent-data"><a class="markdownIt-Anchor" href="#urgent-data"></a> Urgent data</h5><p>如果URG为1，表示这是一个携有紧急资料的封包。 TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。紧急指针指向包内数据段的某个字节不进入接收缓冲就直接交给上层进程,余下的数据要进入接收缓冲。通信的时候网络故障问题引起的数据没传完，会发送一个URG标记位</p><h5 id="acknowledgment-field-significant"><a class="markdownIt-Anchor" href="#acknowledgment-field-significant"></a> Acknowledgment field significant</h5><p>如果ACK为1，表示此封包属于一个要回应的封包。一般都会为1。</p><h5 id="push-function"><a class="markdownIt-Anchor" href="#push-function"></a> Push function</h5><p>如果PSH为1，此封包所携带的数据会直接上传给上层应用程序而无需经过TCP处理。</p><h5 id="reset"><a class="markdownIt-Anchor" href="#reset"></a> Reset</h5><p>如果RST为1，要求重传。表示要求重新设定封包再重新传递。</p><h5 id="synchronize-sequence-number"><a class="markdownIt-Anchor" href="#synchronize-sequence-number"></a> Synchronize sequence number</h5><p>如果SYN为1，表示要求双方进行同步沟通。</p><h5 id="no-more-data-for-sender-finish"><a class="markdownIt-Anchor" href="#no-more-data-for-sender-finish"></a> No more data for sender (Finish)</h5><p>如果FIN为1，表示传送结束，然後双方发出结束回应进而正式终止一个TCP传送过程</p><h5 id="window滑动窗口"><a class="markdownIt-Anchor" href="#window滑动窗口"></a> window滑动窗口</h5><p>TCP使用一种窗口（window）机制来控制数据流。当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的尺寸发送给另一端。当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区尺寸。剩余的缓冲区空间的大小被称为窗口（window） ，指出窗口大小的通知称为窗口通告（window advertisement） 。接收方在发送的每一确认中都含有一个窗口通告。<br />如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。然而，如果发送方操作的速度快于接收方（由于C P U更快） ，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口（ zero window） 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</p><blockquote><p>比如两台主机A向B主机发包,如果B主机的缓冲区缓冲的数据大小,超出部分就会被B机丢弃,也叫缓冲区溢出,那么这种情况如何解决?这就用到了滑动窗口机制,如果A主机并不确定B主机缓冲区大小,那么先发3个数据包给B主机,B主机缓冲区只有2,那么B主机就会应答给A主机数据包 补发数据3并且告诉A主机win_size2.A主机接收到后可能还会发3,4,5这3个数据给主机B,主机B再次应答补发数据包5并且告诉A主机win_size2,这时候A主机知道了B主机只能接受2个数据包.</p></blockquote><h5 id="chechsum"><a class="markdownIt-Anchor" href="#chechsum"></a> Chechsum</h5><p>当资料要传送出去的时候发送端会计算好封包资料大小然後得出这个检验值封包一起发送当接收端收到封包之後会再对资料大小进行计算看看是否和检验值一致如果结果不相称则被视为残缺封包会要求对方重发该个封包。</p><h5 id="16位紧急指针"><a class="markdownIt-Anchor" href="#16位紧急指针"></a> 16位紧急指针</h5><p>只有当URG标志置1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。</p><h4 id="tcp协议的3次握手"><a class="markdownIt-Anchor" href="#tcp协议的3次握手"></a> tcp协议的3次握手</h4><ol><li>第一次握手：客户端发送一个特殊的消息（称为SYN）给服务器端。这个消息包含了一些连接建立的参数，比如初始序列号。客户端希望与服务器建立连接。</li><li>第二次握手：服务器接收到客户端的SYN消息后，会发送一个确认消息（称为ACK）给客户端。同时，服务器也会发送自己的SYN消息给客户端。这个SYN消息通常被称为SYN/ACK消息。服务器确认了客户端的请求，并告诉客户端它也希望建立连接。</li><li>第三次握手：客户端接收到服务器端的SYN/ACK消息后，会发送一个确认消息（ACK）给服务器端。客户端确认了服务器的请求，并告诉服务器连接已经建立。</li></ol><h4 id="tcp协议的4次挥手"><a class="markdownIt-Anchor" href="#tcp协议的4次挥手"></a> tcp协议的4次挥手</h4><ol><li>第一次挥手：客户端发送一个关闭连接的请求给服务器端。这个消息称为FIN（Finish）消息。客户端表示它不再发送数据给服务器端了，但仍然可以接收服务器端发送的数据。</li><li>第二次挥手：服务器接收到客户端的关闭请求后，会发送一个确认消息给客户端。这个消息称为ACK（Acknowledgement）消息。服务器告诉客户端它已经收到了关闭请求。</li><li>第三次挥手：服务器发送一个关闭连接的请求给客户端。这个消息也是一个FIN消息。服务器表示它不再发送数据给客户端，并且也不再接收客户端发送的数据。</li><li>第四次挥手：客户端接收到服务器端的关闭请求后，会发送一个确认消息给服务器端。这也是一个ACK消息。客户端确认了服务器的关闭请求，并告诉服务器它已经准备好关闭连接。</li></ol><h4 id="序列号-确认号"><a class="markdownIt-Anchor" href="#序列号-确认号"></a> 序列号、确认号</h4><p>通信的双方各自维护着一套 seq 序列号，并对对方发送的数据包进行 ACK 确认。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server2 ~]<span class="hljs-comment"># tcpdump -i eth0 -nn -S -r tcp.tcpdump //-S详细的方式，适合看序列号</span><br>[root@server2 ~]<span class="hljs-comment"># tcpdump -i eth0 -nn -S -r tcp.tcpdump &gt; tcp.file</span><br></code></pre></td></tr></table></figure><h4 id="重传机制rtt"><a class="markdownIt-Anchor" href="#重传机制rtt"></a> 重传机制(RTT)</h4><p>每个数据段都有一个重传时间 这个时间是根据网络情况算出来.如果在该时间范围内没有ack 那就要重传数据段注意不是数据包.(数据段可能是N个数据包) 网络层不是管重传的只能在传输层完成</p><h4 id="mss最大报文段长度"><a class="markdownIt-Anchor" href="#mss最大报文段长度"></a> MSS最大报文段长度</h4><p>MSS表示TCP传往另一端最大块数据的长度。当一个连接建立时，连接的双方都要通知各自的MSS。一般来说，报文段越大，允许<br />每个报文段传输的数据就越多，相对于IP和TCP首部有更高的网络利用率。<br />以太网MSS： MTU（1500） - 40（TCP首部） - 20（IP首部） = 1440</p><h4 id="syn-flood"><a class="markdownIt-Anchor" href="#syn-flood"></a> syn flood</h4><p>攻击原理：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DDoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，常用假冒的IP或IP号段发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的半连接，并且会重试默认5次回应第二个握手包，塞满TCP等待连接队列，资源耗尽（CPU满负荷或内存不足），让正常的业务请求连接不进来</p><hr /><h2 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h2><h3 id="ftp协议"><a class="markdownIt-Anchor" href="#ftp协议"></a> ftp协议</h3><h4 id="ftp协议简介"><a class="markdownIt-Anchor" href="#ftp协议简介"></a> FTP协议简介</h4><p>FTP 是 TCP/IP 协议组中的协议之一，是英文File Transfer Protocol的缩写。该协议是Internet文件传送的基础，它由一系列规格说明文档组成，目标是提高文件的共享性，提供非直接使用远程计算机，使存储介质对用户透明和可靠高效地传送数据。简单的说，FTP就是完成两台计算机之间的拷贝，从远程计算机拷贝文件至自己的计算机上，称之为“下载（download）”文件。若将文件从自己计算机中拷贝至远程计算机上，则称之为“上载（upload）”文件。在TCP/IP协议中，FTP标准TCP端口号为21，Port方式数据端口为20。</p><h4 id="ftp两种模式"><a class="markdownIt-Anchor" href="#ftp两种模式"></a> FTP两种模式</h4><p>两种数据传输模式：主动模式，被动模式</p><p><strong>被动模式:</strong> 服务器端只开21和大于1024随机端口<br />服务器和客户端会协商好一个端口，然后客户端从这个端口读数据</p><p><strong>主动模式:</strong> 服务器端打开21和20端口<br />客户端和服务端通过20号端口传输数据</p><h5 id="被动模式测试"><a class="markdownIt-Anchor" href="#被动模式测试"></a> 被动模式测试</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># vsftpd服务器 (关闭selinux, firewalld)</span><br>systemctl restart vsftpd<br><br><span class="hljs-comment"># 客户端服务器 (登陆) 进入ftp服务器IP</span><br>nc &#123;ftp_server_ip&#125; 21<br>220 (vsFTPd 2.0.5)                               <span class="hljs-comment"># ftp服务版本</span><br>USER ftp<br>331 Please specify the password.<br>PASS<br>230 Login successful.<br>PASV<br>227 Entering Passive Mode (192,168,0,99,247,209) <span class="hljs-comment"># 服务器在该端口上等着客户端</span><br><br><span class="hljs-comment"># 客户端服务器 (监测) 监控本机IP</span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">256</span>*<span class="hljs-number">247</span>+<span class="hljs-number">109</span>))<br>63341<br>nc &#123;client_server_ip&#125; 63441<br><br><span class="hljs-comment"># 客户端服务器 (登陆) </span><br>list<br>150 Here comes the directory listing.<br>226 Directory send OK.<br><br><span class="hljs-comment"># 客户端服务器 (监测)</span><br>drwxr-xr-x 3 0 0 4096 Oct 23 05:53 mysql<br>drwxr-xr-x 2 0 0 4096 Oct 17 12:02 pub<br>-rwxr-xr-x 1 0 0 25088 Sep 28 12:15 实验.doc<br></code></pre></td></tr></table></figure><h5 id="主动模式测试"><a class="markdownIt-Anchor" href="#主动模式测试"></a> 主动模式测试</h5><p>服务器端只开21和20端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># vsftpd服务器 (关闭selinux, firewalld)</span><br>systemctl restart vsftpd<br><br><span class="hljs-comment"># 客户端服务器 (登陆) 进入ftp服务器IP</span><br>nc &#123;ftp_server_ip&#125; 21<br>220 (vsFTPd 2.0.5)                               <span class="hljs-comment"># ftp服务版本</span><br>USER ftp<br>331 Please specify the password.<br>PASS<br>230 Login successful.<br><br><span class="hljs-comment"># 客户端服务器 (监测) 监控本机IP</span><br><span class="hljs-comment"># 这里以10086端口为例子</span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">10086</span>/<span class="hljs-number">256</span>))<br>39<br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">10086</span>%<span class="hljs-number">256</span>))<br>102<br><br><span class="hljs-comment"># 客户端服务器 (登陆)</span><br>PORT 192,168,10,100,39,102                          <span class="hljs-comment"># 10086/256，商39，余102 客户端在该端口上等着服务器</span><br>200 PORT <span class="hljs-built_in">command</span> successful. Consider using PASV.<br>list<br>150 Here comes the directory listing.<br>226 Directory send OK.<br><br><span class="hljs-comment"># 客户端服务器 (监测)</span><br>drwxr-xr-x 3 0 0 4096 Oct 23 05:53 mysql<br>drwxr-xr-x 2 0 0 4096 Oct 17 12:02 pub<br>-rwxr-xr-x 1 0 0 25088 Sep 28 12:15 实验.doc<br></code></pre></td></tr></table></figure><h4 id="ftp的命令"><a class="markdownIt-Anchor" href="#ftp的命令"></a> FTP的命令</h4><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>tcpdump</td><td>-i &lt;interface&gt;</td><td>指定网络接口</td><td>通过指定网络接口来捕获网络数据包</td></tr><tr><td>tcpdump</td><td>-n</td><td>禁用主机名解析</td><td>显示IP地址而不是主机名</td></tr><tr><td>tcpdump</td><td>-c &lt;count&gt;</td><td>捕获指定数量的数据包后停止</td><td>指定捕获的数据包数量</td></tr><tr><td>tcpdump</td><td>-s &lt;snaplen&gt;</td><td>指定数据包的最大捕获长度</td><td>设置数据包的最大捕获长度，以字节为单位</td></tr><tr><td>tcpdump</td><td>-w &lt;file&gt;</td><td>将捕获的数据包写入文件</td><td>将捕获的数据包保存到指定的文件中</td></tr><tr><td>tcpdump</td><td>-r &lt;file&gt;</td><td>从文件中读取数据包</td><td>从指定的文件中读取数据包进行分析</td></tr><tr><td>tcpdump</td><td>-A</td><td>以ASCII格式显示数据包内容</td><td>以ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-X</td><td>以十六进制和ASCII格式显示数据包内容</td><td>以十六进制和ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-vvv</td><td>显示详细的调试信息</td><td>显示更详细的调试信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-e</td><td>显示以太网头部信息</td><td>显示以太网帧的头部信息</td></tr><tr><td>tcpdump</td><td>-q</td><td>简化输出</td><td>以简化的格式输出结果</td></tr><tr><td>tcpdump</td><td>-S</td><td>以绝对序号显示数据包</td><td>以绝对序号显示数据包的序号</td></tr><tr><td>tcpdump</td><td>-t</td><td>不显示时间戳</td><td>不显示数据包的时间戳</td></tr><tr><td>tcpdump</td><td>-l</td><td>行缓冲输出</td><td>使用行缓冲输出模式</td></tr><tr><td>tcpdump</td><td>-B &lt;buffer_size&gt;</td><td>设置捕获缓冲区大小</td><td>设置捕获数据包的缓冲区大小，以字节为单位</td></tr><tr><td>tcpdump</td><td>-F &lt;file&gt;</td><td>从文件中读取过滤条件</td><td>从指定的文件中读取过滤条件</td></tr><tr><td>tcpdump</td><td>-G &lt;rotate_seconds&gt;</td><td>自动循环文件</td><td>捕获数据包到一个文件一段时间后，自动切换到新文件</td></tr><tr><td>tcpdump</td><td>-W &lt;file_count&gt;</td><td>设置循环文件的数量</td><td>设置循环文件的数量，循环文件的命名格式为&lt;file&gt;.&lt;number&gt;</td></tr><tr><td>tcpdump</td><td>-L</td><td>列出可用的网络接口</td><td>列出系统上可用的网络接口</td></tr><tr><td>tcpdump</td><td>-E &lt;file&gt;</td><td>从文件中读取扩展信息</td><td>从指定的文件中读取扩展信息</td></tr><tr><td>tcpdump</td><td>-v</td><td>显示详细信息</td><td>显示更详细的信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-V</td><td>显示版本信息</td><td>显示tcpdump的版本信息</td></tr><tr><td>tcpdump</td><td>-h</td><td>显示帮助信息</td><td>显示tcpdump的帮助信息</td></tr></tbody></table><h3 id="http协议"><a class="markdownIt-Anchor" href="#http协议"></a> http协议</h3><h4 id="http协议简介"><a class="markdownIt-Anchor" href="#http协议简介"></a> HTTP协议简介</h4><p>超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</p><h4 id="使用浏览器访问web服务器"><a class="markdownIt-Anchor" href="#使用浏览器访问web服务器"></a> 使用浏览器访问web服务器</h4><p>红色部分： 客户端发给服务器<br />蓝色部分： 服务器回给客户端</p><h4 id="使用协议命令访问web服务器"><a class="markdownIt-Anchor" href="#使用协议命令访问web服务器"></a> 使用协议命令访问web服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@station99 ~]<span class="hljs-comment"># nc 192.168.0.51 80</span><br>GET / HTTP/1.1                                       <span class="hljs-comment"># 请求站点根目录 【HTTP协议名称及版本可选】</span><br>HOST: 192.168.0.99                                   <span class="hljs-comment"># 发起请求的服务端主机 【可选】</span><br>User-Agent: elinks-1.1                               <span class="hljs-comment"># 发起请求的客户端代理程序 【可选】</span><br>可以忽略其它协商<br>回车<br>回车<br></code></pre></td></tr></table></figure><h4 id="http的持久性连接"><a class="markdownIt-Anchor" href="#http的持久性连接"></a> HTTP的持久性连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打开/etc/http/conf/httpd.conf并添加</span><br>KeepAlive on                <span class="hljs-comment"># 保持连接开启 </span><br>KeepAliveTimeout 15         <span class="hljs-comment"># 保持通话时间 </span><br>MaxKeepAliveRequests 100    <span class="hljs-comment"># 最大维持交易请求</span><br></code></pre></td></tr></table></figure><h4 id="http头部解释扩展"><a class="markdownIt-Anchor" href="#http头部解释扩展"></a> HTTP头部解释（扩展）</h4><ol><li>Accept： 告诉WEB服务器自己接受什么介质类型，<em>/</em> 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。</li><li>Accept-Charset： 浏览器申明自己接收的字符集<ul><li>Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）</li><li>Accept-Language：浏览器申明自己接收的语言，语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等。</li></ul></li><li>Accept-Ranges： WEB服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。</li><li>Age： 当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。</li><li>Authorization： 当客户端接收到来自WEB服务器的 WWW-Authenticate 响应时，用该头部来回应自己的身份验证信息给WEB服务器。</li><li>Cache-Control： 请求：no-cache（不要缓存的实体，要求现在从WEB服务器去取）<ul><li>max-age：（只接受 Age 值小于 max-age 值，并且没有过期的对象）</li><li>max-stale：（可以接受过去的对象，但是过期时间必须小于max-stale 值）</li><li>min-fresh：（接受其新鲜生命期大于其当前 Age 跟 min-fresh 值之和的缓存对象）</li><li>响应：public(可以用 Cached 内容回应任何用户)</li><li>private（只能用缓存内容回应先前请求该内容的那个用户）</li><li>no-cache（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端）</li><li>max-age：（本响应包含的对象的过期时间）</li><li>ALL: no-store（不允许缓存）</li></ul></li><li>Connection： 请求：close（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。<br />keepalive（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。<br />响应：close（连接已经关闭）。<br />keepalive（连接保持着，在等待本次连接的后续请求）。<br />Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒）。<br />例如：Keep-Alive：300</li><li>Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip<ul><li>Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。</li><li>Content-Length： WEB 服务器告诉浏览器自己响应的对象的长度。例如：Content-Length: 26012</li><li>Content-Range： WEB 服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range: bytes 21010-47021/47022</li><li>Content-Type： WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml</li></ul></li><li>ETag： 就是一个对象（比如URL）的标志值，就一个对象而言，比如一个 html 文件，如果被修改了，其 Etag 也会被修改， 所以，ETag 的作用跟 Last-Modified 的作用差不多，主要供 WEB 服务器 判断一个对象是否改变了。比如前一次请求某个 html 文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得的 ETag 值发送给 WEB 服务器，然后 WEB 服务器会把这个 ETag 跟该文件的当前ETag 进行对比，然后就知道这个文件有没有改变了。</li><li>Expired： WEB服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB服务器验证了其有效性后，才能用来响应客户请求。<ul><li>是 HTTP/1.0 的头部。例如：Expires：Sat, 23 May 2009 10:02:12 GMT</li></ul></li><li>Host： 客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号。例如：Host：<a href="http://rss.sina.com.cn">rss.sina.com.cn</a></li><li>If-Match： 如果对象的 ETag 没有改变，其实也就意味著对象没有改变，才执行请求的动作。<ul><li>If-None-Match： 如果对象的 ETag 改变了，其实也就意味著对象也改变了，才执行请求的动作。</li></ul></li><li>If-Modified-Since：如果请求的对象在该头部指定的时间之后修改了，才执行请求的动作（比如返回对象），否则返回代码304，告诉浏览器该对象没有修改。</li><li>If-Range： 浏览器告诉 WEB 服务器，如果我请求的对象没有改变，就把我缺少的部分给我，如果对象改变了，就把整个对象给我。 浏览器通过发送请求对象的ETag 或者 自己所知道的最后修改时间给 WEB 服务器，让其判断对象是否改变了。总是跟 Range 头部一起使用。</li><li>Last-Modified： WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。</li><li>Location： WEB 服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。</li><li>Pramga： 主要使用 Pramga: no-cache，相当于 Cache-Control： no-cache。</li><li>Proxy-Authenticate： 代理服务器响应浏览器，要求其提供代理身份验证信息。Proxy-Authorization： 浏览器响应代理服务器的身份验证请求，提供自己的身份信息。</li><li>Range： 浏览器（比如 Flashget 多线程下载时）告诉 WEB 服务器自己想取对象的哪部分。</li><li>Referer： 浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。</li><li>Server: WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61 (Unix)</li><li>User-Agent: 浏览器表明自己的身份（是哪种浏览器）。</li><li>Transfer-Encoding: WEB 服务器表明自己对本响应消息体（不是消息体里面的对象） 作了怎样的编码，比如是否分块（chunked）。</li><li>Vary: WEB服务器用该头部的内容告诉 Cache 服务器，在什么条件下才能用本响应所返回的对象响应后续的请求。假如源WEB服务器在接到第一个请求消息时，其响应消息的头部为： Content-Encoding: gzip; Vary: Content-Encoding， 那么 Cache 服务器会分析后续请求消息的头部，检查其 Accept-Encoding，是否跟先前响应的 Vary 头部值一致，即是否使用相同的内容编码方法，这样就可以防止 Cache 服务器用自己Cache 里面压缩后的实体响应给不具备解压能力的浏览器。</li><li>Via： 列出从客户端到 OCS 或者相反方向的响应经过了哪些代理服务器，他们用什么协议（和版本）发送的请求。当客户端请求到达第一个代理服务器时，该服务器会在自己发出的请求里面添加 Via 头部，并填上自己的相关信息，当下一个代理服务器 收到第一个代理服务器的请求时，会在自己发出的请求里面复制前一个代理服务器的请求的Via头部，并把自己的相关信息加到后面， 以此类推，当 OCS 收到最后一个代理服务器的请求时，检查 Via 头部，就知道该请求所经过的路由。</li></ol><h3 id="nc命令补充"><a class="markdownIt-Anchor" href="#nc命令补充"></a> nc命令补充</h3><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>tcpdump</td><td>-i &lt;interface&gt;</td><td>指定网络接口</td><td>通过指定网络接口来捕获网络数据包</td></tr><tr><td>tcpdump</td><td>-n</td><td>禁用主机名解析</td><td>显示IP地址而不是主机名</td></tr><tr><td>tcpdump</td><td>-c &lt;count&gt;</td><td>捕获指定数量的数据包后停止</td><td>指定捕获的数据包数量</td></tr><tr><td>tcpdump</td><td>-s &lt;snaplen&gt;</td><td>指定数据包的最大捕获长度</td><td>设置数据包的最大捕获长度，以字节为单位</td></tr><tr><td>tcpdump</td><td>-w &lt;file&gt;</td><td>将捕获的数据包写入文件</td><td>将捕获的数据包保存到指定的文件中</td></tr><tr><td>tcpdump</td><td>-r &lt;file&gt;</td><td>从文件中读取数据包</td><td>从指定的文件中读取数据包进行分析</td></tr><tr><td>tcpdump</td><td>-A</td><td>以ASCII格式显示数据包内容</td><td>以ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-X</td><td>以十六进制和ASCII格式显示数据包内容</td><td>以十六进制和ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-vvv</td><td>显示详细的调试信息</td><td>显示更详细的调试信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-e</td><td>显示以太网头部信息</td><td>显示以太网帧的头部信息</td></tr><tr><td>tcpdump</td><td>-q</td><td>简化输出</td><td>以简化的格式输出结果</td></tr><tr><td>tcpdump</td><td>-S</td><td>以绝对序号显示数据包</td><td>以绝对序号显示数据包的序号</td></tr><tr><td>tcpdump</td><td>-t</td><td>不显示时间戳</td><td>不显示数据包的时间戳</td></tr><tr><td>tcpdump</td><td>-l</td><td>行缓冲输出</td><td>使用行缓冲输出模式</td></tr><tr><td>tcpdump</td><td>-B &lt;buffer_size&gt;</td><td>设置捕获缓冲区大小</td><td>设置捕获数据包的缓冲区大小，以字节为单位</td></tr><tr><td>tcpdump</td><td>-F &lt;file&gt;</td><td>从文件中读取过滤条件</td><td>从指定的文件中读取过滤条件</td></tr><tr><td>tcpdump</td><td>-G &lt;rotate_seconds&gt;</td><td>自动循环文件</td><td>捕获数据包到一个文件一段时间后，自动切换到新文件</td></tr><tr><td>tcpdump</td><td>-W &lt;file_count&gt;</td><td>设置循环文件的数量</td><td>设置循环文件的数量，循环文件的命名格式为&lt;file&gt;.&lt;number&gt;</td></tr><tr><td>tcpdump</td><td>-L</td><td>列出可用的网络接口</td><td>列出系统上可用的网络接口</td></tr><tr><td>tcpdump</td><td>-E &lt;file&gt;</td><td>从文件中读取扩展信息</td><td>从指定的文件中读取扩展信息</td></tr><tr><td>tcpdump</td><td>-v</td><td>显示详细信息</td><td>显示更详细的信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-V</td><td>显示版本信息</td><td>显示tcpdump的版本信息</td></tr><tr><td>tcpdump</td><td>-h</td><td>显示帮助信息</td><td>显示tcpdump的帮助信息</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tcpip包&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tcpip包&quot;&gt;&lt;/a&gt; TCP/IP包&lt;/h2&gt;
&lt;h3 id=&quot;什么是osi参考模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是osi</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="网络" scheme="https://wooxin.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="tcpip" scheme="https://wooxin.github.io/tags/tcpip/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络管理 - iptables</title>
    <link href="https://wooxin.github.io/posts/fdc792/"/>
    <id>https://wooxin.github.io/posts/fdc792/</id>
    <published>2025-09-20T09:13:07.000Z</published>
    <updated>2025-09-20T09:15:40.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iptables"><a class="markdownIt-Anchor" href="#iptables"></a> iptables</h2><h3 id="iptables的简介"><a class="markdownIt-Anchor" href="#iptables的简介"></a> iptables的简介</h3><p>netfilter/iptables IP 信息包过滤系统是一种功能强大的工具，可用于添加、编辑和除去规则，这些规则是在做信息包过滤决定时，防火墙所遵循和组成的规则。这些规则存储在专用的信息包过滤表中，而这些表集成在 Linux 内核中。在信息包过滤表中，规则被分组放在我们所谓的链（chain）中。<br />虽然 netfilter/iptables IP 信息包过滤系统被称为单个实体，但它实际上由两个组件netfilter 和 iptables 组成。<br />netfilter 组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。<br />iptables 组件是一种工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易。<br />netfilter/iptables 的最大优点是它可以配置有状态的防火墙。有状态的防火墙能够指定并记住为发送或接收信息包所建立的连接的状态。防火墙可以从信息包的连接跟踪状态获得该信息。在决定新的信息包过滤时，防火墙所使用的这些状态信息可以增加其效率和速度。<br />netfilter/iptables 的另一个重要优点是，它使用户可以完全控制防火墙配置和信息包过滤。您可以定制自己的规则来满足您的特定需求，从而只允许您想要的网络流量进入系统。</p><h3 id="iptables的命令"><a class="markdownIt-Anchor" href="#iptables的命令"></a> iptables的命令</h3><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>iptables</td><td>-A &lt;chain&gt;</td><td>向指定链添加规则</td><td>在指定的链末尾添加一条规则</td></tr><tr><td>iptables</td><td>-D &lt;chain&gt;</td><td>从指定链删除规则</td><td>从指定的链中删除一条规则</td></tr><tr><td>iptables</td><td>-I &lt;chain&gt;</td><td>在指定链的开头插入规则</td><td>在指定链的开头插入一条规则</td></tr><tr><td>iptables</td><td>-R &lt;chain&gt;</td><td>替换指定链的规则</td><td>替换指定链中的一条规则</td></tr><tr><td>iptables</td><td>-L</td><td>列出防火墙规则</td><td>列出当前防火墙中的所有规则</td></tr><tr><td>iptables</td><td>-F</td><td>清空防火墙规则</td><td>清除防火墙中的所有规则</td></tr><tr><td>iptables</td><td>-P &lt;chain&gt;</td><td>设置指定链的默认策略</td><td>设置指定链的默认策略，可选值为 ACCEPT、DROP、REJECT</td></tr><tr><td>iptables</td><td>-N &lt;chain&gt;</td><td>创建一个新的用户自定义链</td><td>创建一个新的用户自定义链</td></tr><tr><td>iptables</td><td>-X &lt;chain&gt;</td><td>删除一个用户自定义链</td><td>删除一个用户自定义链</td></tr><tr><td>iptables</td><td>-E &lt;chain&gt;</td><td>重命名一个用户自定义链</td><td>重命名一个用户自定义链</td></tr><tr><td>iptables</td><td>-Z</td><td>清空防火墙计数器</td><td>清除防火墙中的所有计数器</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j &lt;target&gt;</td><td>添加端口转发规则</td><td>将指定协议和端口的数据包转发到目标</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -s &lt;source&gt; -j &lt;target&gt;</td><td>添加源IP地址匹配规则</td><td>匹配指定源IP地址的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -d &lt;destination&gt; -j &lt;target&gt;</td><td>添加目标IP地址匹配规则</td><td>匹配指定目标IP地址的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -i &lt;interface&gt; -j &lt;target&gt;</td><td>添加输入接口匹配规则</td><td>匹配指定输入接口的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -o &lt;interface&gt; -j &lt;target&gt;</td><td>添加输出接口匹配规则</td><td>匹配指定输出接口的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -m &lt;module&gt; -j &lt;target&gt;</td><td>添加使用指定模块的规则</td><td>使用指定的模块匹配数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -p &lt;protocol&gt; -s &lt;source&gt; --dport &lt;port&gt; -j &lt;target&gt;</td><td>添加复合条件的规则</td><td>匹配指定协议、源IP地址和目标端口的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -p &lt;protocol&gt; -m &lt;module&gt; –<option> -j &lt;target&gt;</td><td>添加使用模块的复合条件规则</td><td>使用指定的模块和选项匹配数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-m &lt;module&gt; --help</td><td>显示指定模块的帮助信息</td><td>显示指定模块的帮助信息</td></tr><tr><td>iptables</td><td>-h</td><td>显示帮助信息</td><td>显示iptables的帮助信息</td></tr></tbody></table><h3 id="iptables基础命令"><a class="markdownIt-Anchor" href="#iptables基础命令"></a> iptables基础命令</h3><h4 id="新增一条规则-追加"><a class="markdownIt-Anchor" href="#新增一条规则-追加"></a> 新增一条规则 (追加)</h4><p>追加在最下方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 放开所有入站</span><br>iptables -t filter -A INPUT -j ACCEPT<br><span class="hljs-comment"># 放开所有出站</span><br>iptables -t filter -A OUTPUT -j ACCEPT<br><span class="hljs-comment"># 禁止所有入站</span><br>iptables -t filter -A INPUT -j DROP<br><span class="hljs-comment"># 禁止所有出站</span><br>iptables -t filter -A OUTPUT -j DROP<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -A &#123;table&#125; -j &#123;动作&#125;<br><span class="hljs-comment"># 示例</span><br>iptables -A INPUT -s 192.168.10.10 -p icmp -j DROP<br>iptables -A INPUT -s 192.168.10.10 -p tcp --dport 80 -j DROP<br>iptables -A INPUT -s 192.168.10.10 -i eth0 -p tcp --dport 80 -j DROP<br></code></pre></td></tr></table></figure><h4 id="新增一条规则-插入"><a class="markdownIt-Anchor" href="#新增一条规则-插入"></a> 新增一条规则 (插入)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 插入到第一条之前</span><br>iptables -t filter -I 1 INPUT -j ACCEPT<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -I &#123;table&#125; -j &#123;动作&#125;<br></code></pre></td></tr></table></figure><h4 id="删除一条规则"><a class="markdownIt-Anchor" href="#删除一条规则"></a> 删除一条规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除一条入站规则</span><br>iptables -t filter -D INPUT &#123;number&#125;<br><span class="hljs-comment"># 删除一条出站规则</span><br>iptables -t filter -D OUTPUT &#123;number&#125;<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -D &#123;table&#125; &#123;number&#125;<br></code></pre></td></tr></table></figure><h4 id="修改一条规则"><a class="markdownIt-Anchor" href="#修改一条规则"></a> 修改一条规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改一条规则</span><br>iptables -t filter -R INPUT 1 -s 192.168.10.10 -p tcp --dport 80 -j ACCEPT<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -R &#123;table&#125; &#123;参数&#125; -j &#123;动作&#125;<br></code></pre></td></tr></table></figure><h4 id="查看所有规则"><a class="markdownIt-Anchor" href="#查看所有规则"></a> 查看所有规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以英文形式显示表</span><br>iptables -L<br><span class="hljs-comment"># 以数字形式显示表</span><br>iptables -L -n<br><span class="hljs-comment"># 以序号形式显示表 (表内顺序越高有限度越高)</span><br>iptables -L -n --line-numbers<br></code></pre></td></tr></table></figure><h4 id="添加自定义链"><a class="markdownIt-Anchor" href="#添加自定义链"></a> 添加自定义链</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加一条自定义链</span><br>ptables -t filter -N woxtbl<br><span class="hljs-comment"># 添加一条链接</span><br>iptables -t filter -A INPUT -j woxtbl<br></code></pre></td></tr></table></figure><h4 id="删除空的自定义链"><a class="markdownIt-Anchor" href="#删除空的自定义链"></a> 删除空的自定义链</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除自定义链 (必须处于无链接状态并且自定义链中不能有规则)</span><br>iptables -t filter -X woxtbl<br></code></pre></td></tr></table></figure><h4 id="清除所有表内规则"><a class="markdownIt-Anchor" href="#清除所有表内规则"></a> 清除所有表内规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -F<br>iptables -F &#123;table&#125;<br></code></pre></td></tr></table></figure><h4 id="设置默认策略"><a class="markdownIt-Anchor" href="#设置默认策略"></a> 设置默认策略</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置默认丢弃</span><br>iptables -t filter -P INPUT DROP<br><span class="hljs-comment"># 设置默认放行</span><br>iptables -t filter -P INPUT ACCEPT<br></code></pre></td></tr></table></figure><hr /><h3 id="iptables的解释"><a class="markdownIt-Anchor" href="#iptables的解释"></a> iptables的解释</h3><p>从INPUT链进来的包包括<br />其它主机访问本机的数据包<br />本机访问其它主机时，其它主机给本机回的数据包</p><p>从OUTPUT链出去的包包括<br />本机访问访其它主机的数据包<br />其它主机访问本机时，本机给其它主机回的数据包</p><hr /><h3 id="iptables扩展命令"><a class="markdownIt-Anchor" href="#iptables扩展命令"></a> iptables扩展命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看扩展命令icmp的用法</span><br>iptables -m icmp -h<br><br><span class="hljs-comment"># 扩展命令icmp的用法</span><br>iptables -t filter -A INPUT -p icmp -m icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><hr /><h2 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h2><h5 id="拒接80端口访问"><a class="markdownIt-Anchor" href="#拒接80端口访问"></a> 拒接80端口访问</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -I INPUT -s 192.168.10.124 -p tcp --dport 80 -j DROP<br>iptables -t filter -I INPUT -d 192.168.10.62 -p tcp --dport 80 -j DROP<br>iptables -t filter -I OUTPUT -d 192.168.10.124 -p tcp --sport 80 -j DROP<br>iptables -t filter -I OUTPUT -s 192.168.10.62 -p tcp --sport 80 -j DROP<br></code></pre></td></tr></table></figure><h5 id="只允许http-ftp-sshd"><a class="markdownIt-Anchor" href="#只允许http-ftp-sshd"></a> 只允许http, ftp, sshd</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-function"><span class="hljs-title">iptbl</span></span>()&#123;<br>        iptables -F<br>        iptables -t filter -P INPUT DROP<br>        iptables -t filter -P OUTPUT DROP<br><br>        iptables -t filter -I INPUT -p tcp --dport 80 -j ACCEPT<br>        iptables -t filter -I OUTPUT -j ACCEPT<br><br>        iptables -t filter -I INPUT -p tcp --dport 22 -j ACCEPT<br><br>        iptables -t filter -I INPUT -p tcp --dport 25565 -j ACCEPT<br><br>        iptables -t filter -I INPUT -p tcp --dport 20 -j ACCEPT<br>        iptables -t filter -I INPUT -p tcp --dport 21 -j ACCEPT<br><br>        iptables -t filter -I INPUT -i lo -j ACCEPT<br>        iptables -t filter -I OUTPUT -o lo -j ACCEPT<br>&#125;<br>iptbl<br></code></pre></td></tr></table></figure><h5 id="别人ping不通我-我可以ping别人"><a class="markdownIt-Anchor" href="#别人ping不通我-我可以ping别人"></a> 别人ping不通我, 我可以ping别人</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -p icmp -m icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><h5 id="禁止1921681010到19216810100的人访问我的http服务"><a class="markdownIt-Anchor" href="#禁止1921681010到19216810100的人访问我的http服务"></a> 禁止192.168.10.10到192.168.10.100的人访问我的http服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -p tcp --dport 80 -m iprange --src-range 192.168.10.10-192.168.10.100 -j DROP<br></code></pre></td></tr></table></figure><h5 id="禁止某个mac地址访问"><a class="markdownIt-Anchor" href="#禁止某个mac地址访问"></a> 禁止某个MAC地址访问</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -m mac --mac-source 52:54:00:20:77:86 -j DROP<br></code></pre></td></tr></table></figure><h5 id="禁止19216810124访问我的212280端口"><a class="markdownIt-Anchor" href="#禁止19216810124访问我的212280端口"></a> 禁止192.168.10.124访问我的21,22,80端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -s 192.168.10.124 -p tcp -m multiport --destination-ports 21,22,80 -j DROP<br></code></pre></td></tr></table></figure><h5 id=""><a class="markdownIt-Anchor" href="#"></a> </h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>iptables -F<br><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_NEW&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_ES&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_RE&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_IN&quot;</span><br><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_NEW&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_ES&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_RE&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_IN&quot;</span><br><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_NEW&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_ES&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_RE&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_IN&quot;</span><br><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_NEW&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_ES&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_RE&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_IN&quot;</span><br></code></pre></td></tr></table></figure><h5 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> </h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>iptables -F<br>iptables -t filter -P INPUT DROP<br>iptables -t filter -P OUTPUT DROP<br><br>iptables -t filter -I INPUT -i lo -j ACCEPT<br>iptables -t filter -I OUTPUT -o lo -j ACCEPT<br><br>modprobe nf_conntrack_ftp<br><br>iptables -t filter -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 80 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 80 -m state --state ES -j ACCEPT<br><br><span class="hljs-comment"># port</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state NEW -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state RE -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state ES -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state ES -j ACCEPT<br><span class="hljs-comment"># pasv</span><br>iptables -t filter -A INPUT -p tcp -m state --state RE -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp -m state --state ES -j ACCEPT<br>iptables -t filter -A INPUT -p tcp -m state --state ES -j ACCEPT<br><br>iptables -t filter -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 22 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 22 -m state --state ES -j ACCEPT<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;iptables&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#iptables&quot;&gt;&lt;/a&gt; iptables&lt;/h2&gt;
&lt;h3 id=&quot;iptables的简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="网络" scheme="https://wooxin.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="iptables" scheme="https://wooxin.github.io/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件包管理 - yum-config-manager</title>
    <link href="https://wooxin.github.io/posts/5ea60cee/"/>
    <id>https://wooxin.github.io/posts/5ea60cee/</id>
    <published>2025-09-20T09:08:20.000Z</published>
    <updated>2025-09-20T09:10:04.286Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>yum-config-manager</td><td>–add-repo=URL</td><td>添加软件源</td><td>添加指定 URL 的软件源到系统中</td></tr><tr><td>yum-config-manager</td><td>–enable repository</td><td>启用软件源</td><td>启用指定的软件源</td></tr><tr><td>yum-config-manager</td><td>–disable repository</td><td>禁用软件源</td><td>禁用指定的软件源</td></tr><tr><td>yum-config-manager</td><td>–enableplugin plugin_name</td><td>启用插件</td><td>启用指定的插件</td></tr><tr><td>yum-config-manager</td><td>–disableplugin plugin_name</td><td>禁用插件</td><td>禁用指定的插件</td></tr><tr><td>yum-config-manager</td><td>–add-repo=FILE</td><td>添加软件源配置文件</td><td>添加指定文件中定义的软件源到系统中</td></tr><tr><td>yum-config-manager</td><td>–enable-repo=repository</td><td>启用指定名称的软件源</td><td>启用指定名称的软件源</td></tr><tr><td>yum-config-manager</td><td>–disable-repo=repository</td><td>禁用指定名称的软件源</td><td>禁用指定名称的软件源</td></tr><tr><td>yum-config-manager</td><td>–setopt=repository.option=value</td><td>设置软件源选项值</td><td>设置指定软件源的选项值</td></tr><tr><td>yum-config-manager</td><td>–save --setopt=repository.option=value</td><td>保存并设置软件源选项值</td><td>保存并设置指定软件源的选项值</td></tr><tr><td>yum-config-manager</td><td>–add-repo=URL --save</td><td>添加软件源并保存</td><td>添加指定 URL 的软件源并保存到系统中</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;yum-config-manager&lt;/td&gt;
&lt;td&gt;–add-repo=U</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="包管理" scheme="https://wooxin.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件包管理 - yum</title>
    <link href="https://wooxin.github.io/posts/423eb939/"/>
    <id>https://wooxin.github.io/posts/423eb939/</id>
    <published>2025-09-20T09:07:33.000Z</published>
    <updated>2025-09-20T09:10:09.681Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>yum</td><td>install package_name</td><td>安装软件包</td><td>安装指定的软件包及其依赖项</td></tr><tr><td>yum</td><td>update</td><td>更新所有已安装的软件包</td><td>更新系统中所有已安装的软件包到最新版本</td></tr><tr><td>yum</td><td>upgrade package_name</td><td>升级软件包</td><td>如果软件包已安装，将其升级到最新版本</td></tr><tr><td>yum</td><td>remove package_name</td><td>卸载软件包</td><td>从系统中卸载指定的软件包</td></tr><tr><td>yum</td><td>search keyword</td><td>搜索软件包</td><td>根据关键字搜索可用的软件包</td></tr><tr><td>yum</td><td>info package_name</td><td>查看软件包信息</td><td>显示指定软件包的详细信息</td></tr><tr><td>yum</td><td>list installed</td><td>列出已安装的软件包</td><td>显示系统中所有已安装的软件包信息</td></tr><tr><td>yum</td><td>list available</td><td>列出可用的软件包</td><td>显示可用的软件包信息</td></tr><tr><td>yum</td><td>provides file_path</td><td>查询文件所属的软件包</td><td>显示指定文件所属的软件包信息</td></tr><tr><td>yum</td><td>clean all</td><td>清理缓存和临时文件</td><td>清理 YUM 的缓存和临时文件</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;yum&lt;/td&gt;
&lt;td&gt;install package_name&lt;/td&gt;
</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="包管理" scheme="https://wooxin.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件包管理 - rpm</title>
    <link href="https://wooxin.github.io/posts/331ca29d/"/>
    <id>https://wooxin.github.io/posts/331ca29d/</id>
    <published>2025-09-20T09:07:04.000Z</published>
    <updated>2025-09-20T09:10:13.786Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>rpm</td><td>-i package.rpm</td><td>安装软件包</td><td>安装指定的 RPM 软件包</td></tr><tr><td>rpm</td><td>-U package.rpm</td><td>升级软件包</td><td>如果软件包已经安装，将其升级到指定版本</td></tr><tr><td>rpm</td><td>-e package_name</td><td>卸载软件包</td><td>从系统中卸载指定的软件包</td></tr><tr><td>rpm</td><td>-q package_name</td><td>查询软件包</td><td>显示指定软件包的详细信息</td></tr><tr><td>rpm</td><td>-qa</td><td>查询所有已安装的软件包</td><td>显示系统中所有已安装的软件包信息</td></tr><tr><td>rpm</td><td>-ql package_name</td><td>列出软件包文件</td><td>显示软件包中包含的文件列表</td></tr><tr><td>rpm</td><td>-Uvh package.rpm</td><td>安装或升级软件包并显示过程</td><td>显示安装或升级软件包的详细过程</td></tr><tr><td>rpm</td><td>-ivh package.rpm</td><td>安装软件包并显示过程</td><td>显示安装软件包的详细过程</td></tr><tr><td>rpm</td><td>-evh package_name</td><td>卸载软件包并显示过程</td><td>显示卸载软件包的详细过程</td></tr><tr><td>rpm</td><td>-qf file_path</td><td>查询文件所属的软件包</td><td>显示指定文件属于哪个软件包</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rpm&lt;/td&gt;
&lt;td&gt;-i package.rpm&lt;/td&gt;
&lt;td&gt;安装</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="包管理" scheme="https://wooxin.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件包管理 - 源码包</title>
    <link href="https://wooxin.github.io/posts/2293a009/"/>
    <id>https://wooxin.github.io/posts/2293a009/</id>
    <published>2025-09-20T09:06:24.000Z</published>
    <updated>2025-09-20T09:10:11.732Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>./configure</td><td>-prefix=&lt;install_path&gt;</td><td>配置源码包</td><td>设置安装路径</td></tr><tr><td>make</td><td></td><td>编译源码包</td><td>根据配置进行源码编译</td></tr><tr><td>make install</td><td></td><td>安装源码包</td><td>将编译后的程序和文件安装到指定路径</td></tr><tr><td>make clean</td><td></td><td>清理编译产生的文件</td><td>删除编译生成的临时文件</td></tr><tr><td>make uninstall</td><td></td><td>卸载已安装的源码包</td><td>从系统中移除已安装的源码包</td></tr><tr><td>make distclean</td><td></td><td>清理源码包及配置文件</td><td>删除编译生成的文件和配置信息</td></tr><tr><td>./autogen.sh</td><td></td><td>自动生成配置脚本</td><td>在源码包中运行自动生成配置脚本</td></tr><tr><td>./configure</td><td>–enable-feature</td><td>启用指定功能</td><td>在配置过程中启用指定的功能</td></tr><tr><td>make -jN</td><td></td><td>并行编译</td><td>使用 N 个线程并行编译加快编译速度</td></tr><tr><td>make test</td><td></td><td>运行测试</td><td>运行源码包中的测试用例</td></tr><tr><td>make dist</td><td></td><td>创建源码包的发布版本</td><td>创建用于发布的源码包版本</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;./configure&lt;/td&gt;
&lt;td&gt;-prefix=&amp;lt;instal</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Linux" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
    <category term="Linux" scheme="https://wooxin.github.io/tags/Linux/"/>
    
    <category term="包管理" scheme="https://wooxin.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>右键菜单的简单实现方式</title>
    <link href="https://wooxin.github.io/posts/d5d18b1/"/>
    <id>https://wooxin.github.io/posts/d5d18b1/</id>
    <published>2025-09-19T08:02:01.000Z</published>
    <updated>2025-09-19T14:53:32.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pug部分"><a class="markdownIt-Anchor" href="#pug部分"></a> pug部分</h2><p>忘记从哪儿看到的了, 一个现在已经不运营的博客<br />分别在需要的地方引用:</p><ol><li><code>javascript:initWordCountOnly()</code></li><li><code>javascript:initReadingTimeOnly()</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pug">#right-menu<br>.right-menu-list<br>a.right-menu-item(href=&quot;javascript:window.history.back();&quot;)<br>i.bi.bi-arrow-left-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.location.reload();&quot;)<br>i.bi.bi-arrow-down-right-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.history.forward();&quot;)<br>i.bi.bi-arrow-right-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.location.href = window.location.origin;&quot;)<br>i.bi.bi-house-fill<br>.right-menu-list<br>a.right-menu-item.row.m-0.p-0(href=&quot;javascript:randomPage();&quot;)<br>.col-3.m-0.p-0<br>i.bi.bi-shuffle<br>.col.m-0.p-0<br>span=&#x27;随机访问&#x27;<br>.right-menu-list.hide#menu-text<br>a.right-menu-item(href=&quot;javascript:rmf.copySelect();&quot;)<br>i.bi.bi-clipboard-fill<br>span=&#x27;复制内容&#x27;<br></code></pre></td></tr></table></figure><hr /><h2 id="js部分"><a class="markdownIt-Anchor" href="#js部分"></a> js部分</h2><p>随便写一个js代码即可, 我用最简单的方式来办</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> rmf = &#123;&#125;;<br><br>rmf.<span class="hljs-property">showRightMenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">isTrue, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> $rightMenu = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (isTrue) &#123;<br>        $rightMenu<br>            .<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;top&#x27;</span>, x + <span class="hljs-string">&#x27;px&#x27;</span>)<br>            .<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;left&#x27;</span>, y + <span class="hljs-string">&#x27;px&#x27;</span>)<br>            .<span class="hljs-title function_">stop</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>)<br>            .<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">80</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $rightMenu.<span class="hljs-title function_">stop</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">80</span>);<br>    &#125;<br>&#125;<br><br>rmf.<span class="hljs-property">copySelect</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;Copy&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>&#125;<br><br>rmf.<span class="hljs-property">scrollToTop</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    btf.<span class="hljs-title function_">scrollToDest</span>(<span class="hljs-number">0</span>, <span class="hljs-number">500</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">ctrlKey</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        $(<span class="hljs-string">&#x27;.right-menu-group.hide&#x27;</span>).<span class="hljs-title function_">hide</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getSelection</span>().<span class="hljs-title function_">toString</span>()) &#123;<br>            $(<span class="hljs-string">&#x27;#menu-text&#x27;</span>).<span class="hljs-title function_">show</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> pageX = event.<span class="hljs-property">clientX</span> + <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">let</span> pageY = event.<span class="hljs-property">clientY</span>;<br>        <span class="hljs-keyword">let</span> rmWidth = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>).<span class="hljs-title function_">width</span>();<br>        <span class="hljs-keyword">let</span> rmHeight = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>).<span class="hljs-title function_">height</span>();<br>        <span class="hljs-keyword">if</span> (pageX + rmWidth &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) &#123;<br>            pageX -= rmWidth + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (pageY + rmHeight &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) &#123;<br>            pageY -= pageY + rmHeight - <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>        &#125;<br><br>        rmf.<span class="hljs-title function_">showRightMenu</span>(<span class="hljs-literal">true</span>, pageY, pageX);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        rmf.<span class="hljs-title function_">showRightMenu</span>(<span class="hljs-literal">false</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> posts = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;a[href*=&quot;/post/&quot;], a.recent-post-item, a.textTags-posts-item&#x27;</span>));<br><br>    <span class="hljs-keyword">if</span> (posts.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> randomPost = posts[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * posts.<span class="hljs-property">length</span>)];<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = randomPost.<span class="hljs-property">href</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> randomPage = pages[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * pages.<span class="hljs-property">length</span>)];<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = randomPage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="stylus"><a class="markdownIt-Anchor" href="#stylus"></a> stylus</h2><p>简单的做一个样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#right-menu</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">none</span><br><span class="hljs-attribute">position</span> fixed<br><span class="hljs-attribute">width</span> <span class="hljs-number">160px</span><br><span class="hljs-attribute">height</span> fit-<span class="hljs-attribute">content</span><br><span class="hljs-attribute">top</span> <span class="hljs-number">10%</span><br><span class="hljs-attribute">left</span> <span class="hljs-number">10%</span><br><span class="hljs-attribute">background-color</span> $<span class="hljs-attribute">background-color</span>-<span class="hljs-attribute">right</span>-<span class="hljs-selector-tag">menu</span><br><span class="hljs-attribute">border</span> <span class="hljs-number">1px</span> solid $<span class="hljs-attribute">background-color</span>-<span class="hljs-selector-tag">main</span>-black<br><span class="hljs-attribute">border-radius</span> <span class="hljs-number">8px</span><br><span class="hljs-attribute">z-index</span> <span class="hljs-number">10000</span><br><span class="hljs-attribute">transition</span> <span class="hljs-number">0.3s</span><br><span class="hljs-selector-class">.right-menu-list</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">7px</span> <span class="hljs-number">6px</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">flex</span><br><span class="hljs-attribute">justify-content</span> space-between<br><span class="hljs-selector-class">.right-menu-list</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:nth-last-child</span>(<span class="hljs-number">1</span>))<br><span class="hljs-attribute">border-bottom</span> <span class="hljs-number">1px</span> dashed <span class="hljs-selector-id">#4259ef23</span><br><span class="hljs-selector-class">.right-menu-item</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">160px</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">border-radius</span> <span class="hljs-number">8px</span><br><span class="hljs-attribute">transition</span> <span class="hljs-number">0.3s</span><br><span class="hljs-attribute">color</span> $<span class="hljs-attribute">font</span>-home-black<br><span class="hljs-attribute">text-decoration</span> <span class="hljs-attribute">none</span><br>&amp;<span class="hljs-selector-pseudo">:hover</span><br><span class="hljs-attribute">background-color</span> $<span class="hljs-attribute">font</span>-home-<span class="hljs-selector-tag">main</span><br><span class="hljs-attribute">color</span> $<span class="hljs-attribute">font</span>-data-<span class="hljs-selector-tag">main</span><br><span class="hljs-selector-tag">i</span><br><span class="hljs-attribute">display</span> inline-block<br><span class="hljs-attribute">text-align</span> center<br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span><br><span class="hljs-selector-tag">span</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-selector-class">.right-menu-line</span><br><span class="hljs-selector-class">.right-menu-item</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">flex</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span><br>*<br><span class="hljs-attribute">height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">40px</span><br><span class="hljs-selector-class">.hide</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">none</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pug部分&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pug部分&quot;&gt;&lt;/a&gt; pug部分&lt;/h2&gt;
&lt;p&gt;忘记从哪儿看到的了, 一个现在已经不运营的博客&lt;br /&gt;
分别在需要的地方引用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ja</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="博客" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="pug" scheme="https://wooxin.github.io/tags/pug/"/>
    
    <category term="js" scheme="https://wooxin.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>如何统计字数与计算阅读时间</title>
    <link href="https://wooxin.github.io/posts/dc41cc6a/"/>
    <id>https://wooxin.github.io/posts/dc41cc6a/</id>
    <published>2025-09-19T07:13:43.000Z</published>
    <updated>2025-09-19T07:44:04.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js部分"><a class="markdownIt-Anchor" href="#js部分"></a> JS部分</h2><p>这个代码是之前的, 我用的是ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">WordCountUtils</span> = &#123;<br>    <span class="hljs-attr">countWords</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 你文章所在的ID或者类</span><br>        <span class="hljs-keyword">const</span> articleContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-content&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (!articleContent) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">const</span> clone = articleContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 这部分是不需要统计的, 尤其是code代码块, 俩面东西过多, 如果不排除的话字数非常夸张</span><br>        <span class="hljs-keyword">const</span> excludeSelectors = [<span class="hljs-string">&#x27;pre&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;script&#x27;</span>, <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;.highlight&#x27;</span>, <span class="hljs-string">&#x27;.giscus-frame&#x27;</span>];<br>        excludeSelectors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">selector</span> =&gt;</span> &#123;<br>            clone.<span class="hljs-title function_">querySelectorAll</span>(selector).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">remove</span>());<br>        &#125;);<br><br>        <span class="hljs-keyword">const</span> text = clone.<span class="hljs-property">textContent</span> || clone.<span class="hljs-property">innerText</span>;<br>        <span class="hljs-keyword">const</span> chineseChars = (text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[\u4e00-\u9fa5]/g</span>) || []).<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">const</span> englishWords = (text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\b[a-zA-Z]+\b/g</span>) || []).<span class="hljs-property">length</span>;<br><br>        <span class="hljs-keyword">return</span> chineseChars + englishWords;<br>    &#125;,<br><br>    <span class="hljs-attr">calculateReadingTime</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> words = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">countWords</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(words / <span class="hljs-number">300</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">initWordCountOnly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> words = <span class="hljs-title class_">WordCountUtils</span>.<span class="hljs-title function_">countWords</span>();<br>    <span class="hljs-keyword">const</span> countBody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-count-body&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (countBody) &#123;<br>        countBody.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-property">textContent</span> = words;<br>    &#125;<br>    <span class="hljs-keyword">return</span> words;<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">initReadingTimeOnly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> readingTime = <span class="hljs-title class_">WordCountUtils</span>.<span class="hljs-title function_">calculateReadingTime</span>();<br>    <span class="hljs-keyword">const</span> timeBody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-time-body&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (timeBody) &#123;<br>        timeBody.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-property">textContent</span> = readingTime;<br>    &#125;<br>    <span class="hljs-keyword">return</span> readingTime;<br>&#125;;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">initWordCountOnly</span>();<br>        <span class="hljs-title function_">initReadingTimeOnly</span>();<br>    &#125;, <span class="hljs-number">100</span>);<br>&#125;);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Pjax</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:success&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">initWordCountOnly</span>();<br>            <span class="hljs-title function_">initReadingTimeOnly</span>();<br>        &#125;, <span class="hljs-number">300</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="pug部分"><a class="markdownIt-Anchor" href="#pug部分"></a> Pug部分</h2><p>分别在需要的地方引用:</p><ol><li>javascript:initWordCountOnly()</li><li>javascript:initReadingTimeOnly()</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pug">#post-count-body.p-2 <br>    a(href=&quot;javascript:initWordCountOnly()&quot;) 0 <br>    span 字<br>span#post-time-head.p-2 耗时:<br>#post-time-body.p-2 <br>    a(href=&quot;javascript:initReadingTimeOnly()&quot;) 0 <br>    span 分钟<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;js部分&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#js部分&quot;&gt;&lt;/a&gt; JS部分&lt;/h2&gt;
&lt;p&gt;这个代码是之前的, 我用的是ts&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="博客" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="pug" scheme="https://wooxin.github.io/tags/pug/"/>
    
    <category term="js" scheme="https://wooxin.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>文章阅读进度百分比的实现</title>
    <link href="https://wooxin.github.io/posts/28109/"/>
    <id>https://wooxin.github.io/posts/28109/</id>
    <published>2025-09-17T11:11:56.000Z</published>
    <updated>2025-09-19T14:54:01.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pug相关"><a class="markdownIt-Anchor" href="#pug相关"></a> pug相关</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pug">//- 选择一个你需要的ID或者类<br>.reading-progress 0%<br></code></pre></td></tr></table></figure><h2 id="js相关"><a class="markdownIt-Anchor" href="#js相关"></a> js相关</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ReadingProgress</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> scrollContainer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> progressText = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateReadingProgress</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> scrollTop = scrollContainer.<span class="hljs-property">scrollTop</span>;<br>        <span class="hljs-keyword">const</span> scrollHeight = scrollContainer.<span class="hljs-property">scrollHeight</span>;<br>        <span class="hljs-keyword">const</span> clientHeight = scrollContainer.<span class="hljs-property">clientHeight</span>;<br>        <span class="hljs-keyword">const</span> maxScrollTop = scrollHeight - clientHeight;<br>        <br>        <span class="hljs-keyword">const</span> progress = maxScrollTop &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>((scrollTop / maxScrollTop) * <span class="hljs-number">100</span>, <span class="hljs-number">100</span>) : <span class="hljs-number">0</span>;<br><br>        progressText.<span class="hljs-property">textContent</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(progress) + <span class="hljs-string">&#x27;%&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// init</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 你的文章所在的ID或者类</span><br>        scrollContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#post-content&#x27;</span>);<br>        <span class="hljs-comment">// 你的0%所在的类或者ID</span><br>        progressText = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.reading-progress&#x27;</span>);<br><br>        <span class="hljs-keyword">if</span> (!scrollContainer || !progressText) <span class="hljs-keyword">return</span>;<br><br>        scrollContainer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, updateReadingProgress);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, updateReadingProgress);<br><br>        <span class="hljs-title function_">updateReadingProgress</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        init<br>    &#125;;<br>&#125;)();<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-title class_">ReadingProgress</span>.<span class="hljs-property">init</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, <span class="hljs-title class_">ReadingProgress</span>.<span class="hljs-property">init</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pug相关&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pug相关&quot;&gt;&lt;/a&gt; pug相关&lt;/h2&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    <category term="教程" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="博客" scheme="https://wooxin.github.io/categories/%E6%95%99%E7%A8%8B/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="pug" scheme="https://wooxin.github.io/tags/pug/"/>
    
    <category term="js" scheme="https://wooxin.github.io/tags/js/"/>
    
  </entry>
  
</feed>
