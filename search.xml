<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>右键菜单的简单实现方式</title>
      <link href="/posts/d5d18b1/"/>
      <url>/posts/d5d18b1/</url>
      
        <content type="html"><![CDATA[<h2 id="pug部分"><a class="markdownIt-Anchor" href="#pug部分"></a> pug部分</h2><p>忘记从哪儿看到的了, 一个现在已经不运营的博客<br />分别在需要的地方引用:</p><ol><li><code>javascript:initWordCountOnly()</code></li><li><code>javascript:initReadingTimeOnly()</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pug">#right-menu<br>.right-menu-list<br>a.right-menu-item(href=&quot;javascript:window.history.back();&quot;)<br>i.bi.bi-arrow-left-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.location.reload();&quot;)<br>i.bi.bi-arrow-down-right-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.history.forward();&quot;)<br>i.bi.bi-arrow-right-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.location.href = window.location.origin;&quot;)<br>i.bi.bi-house-fill<br>.right-menu-list<br>a.right-menu-item.row.m-0.p-0(href=&quot;javascript:randomPage();&quot;)<br>.col-3.m-0.p-0<br>i.bi.bi-shuffle<br>.col.m-0.p-0<br>span=&#x27;随机访问&#x27;<br>.right-menu-list.hide#menu-text<br>a.right-menu-item(href=&quot;javascript:rmf.copySelect();&quot;)<br>i.bi.bi-clipboard-fill<br>span=&#x27;复制内容&#x27;<br></code></pre></td></tr></table></figure><hr /><h2 id="js部分"><a class="markdownIt-Anchor" href="#js部分"></a> js部分</h2><p>随便写一个js代码即可, 我用最简单的方式来办</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> rmf = &#123;&#125;;<br><br>rmf.<span class="hljs-property">showRightMenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">isTrue, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> $rightMenu = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (isTrue) &#123;<br>        $rightMenu<br>            .<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;top&#x27;</span>, x + <span class="hljs-string">&#x27;px&#x27;</span>)<br>            .<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;left&#x27;</span>, y + <span class="hljs-string">&#x27;px&#x27;</span>)<br>            .<span class="hljs-title function_">stop</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>)<br>            .<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">80</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $rightMenu.<span class="hljs-title function_">stop</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">80</span>);<br>    &#125;<br>&#125;<br><br>rmf.<span class="hljs-property">copySelect</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;Copy&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>&#125;<br><br>rmf.<span class="hljs-property">scrollToTop</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    btf.<span class="hljs-title function_">scrollToDest</span>(<span class="hljs-number">0</span>, <span class="hljs-number">500</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">ctrlKey</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        $(<span class="hljs-string">&#x27;.right-menu-group.hide&#x27;</span>).<span class="hljs-title function_">hide</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getSelection</span>().<span class="hljs-title function_">toString</span>()) &#123;<br>            $(<span class="hljs-string">&#x27;#menu-text&#x27;</span>).<span class="hljs-title function_">show</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> pageX = event.<span class="hljs-property">clientX</span> + <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">let</span> pageY = event.<span class="hljs-property">clientY</span>;<br>        <span class="hljs-keyword">let</span> rmWidth = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>).<span class="hljs-title function_">width</span>();<br>        <span class="hljs-keyword">let</span> rmHeight = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>).<span class="hljs-title function_">height</span>();<br>        <span class="hljs-keyword">if</span> (pageX + rmWidth &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) &#123;<br>            pageX -= rmWidth + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (pageY + rmHeight &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) &#123;<br>            pageY -= pageY + rmHeight - <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>        &#125;<br><br>        rmf.<span class="hljs-title function_">showRightMenu</span>(<span class="hljs-literal">true</span>, pageY, pageX);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        rmf.<span class="hljs-title function_">showRightMenu</span>(<span class="hljs-literal">false</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> posts = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;a[href*=&quot;/post/&quot;], a.recent-post-item, a.textTags-posts-item&#x27;</span>));<br><br>    <span class="hljs-keyword">if</span> (posts.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> randomPost = posts[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * posts.<span class="hljs-property">length</span>)];<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = randomPost.<span class="hljs-property">href</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> randomPage = pages[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * pages.<span class="hljs-property">length</span>)];<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = randomPage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="stylus"><a class="markdownIt-Anchor" href="#stylus"></a> stylus</h2><p>简单的做一个样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#right-menu</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">none</span><br><span class="hljs-attribute">position</span> fixed<br><span class="hljs-attribute">width</span> <span class="hljs-number">160px</span><br><span class="hljs-attribute">height</span> fit-<span class="hljs-attribute">content</span><br><span class="hljs-attribute">top</span> <span class="hljs-number">10%</span><br><span class="hljs-attribute">left</span> <span class="hljs-number">10%</span><br><span class="hljs-attribute">background-color</span> $<span class="hljs-attribute">background-color</span>-<span class="hljs-attribute">right</span>-<span class="hljs-selector-tag">menu</span><br><span class="hljs-attribute">border</span> <span class="hljs-number">1px</span> solid $<span class="hljs-attribute">background-color</span>-<span class="hljs-selector-tag">main</span>-black<br><span class="hljs-attribute">border-radius</span> <span class="hljs-number">8px</span><br><span class="hljs-attribute">z-index</span> <span class="hljs-number">10000</span><br><span class="hljs-attribute">transition</span> <span class="hljs-number">0.3s</span><br><span class="hljs-selector-class">.right-menu-list</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">7px</span> <span class="hljs-number">6px</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">flex</span><br><span class="hljs-attribute">justify-content</span> space-between<br><span class="hljs-selector-class">.right-menu-list</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:nth-last-child</span>(<span class="hljs-number">1</span>))<br><span class="hljs-attribute">border-bottom</span> <span class="hljs-number">1px</span> dashed <span class="hljs-selector-id">#4259ef23</span><br><span class="hljs-selector-class">.right-menu-item</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">160px</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">border-radius</span> <span class="hljs-number">8px</span><br><span class="hljs-attribute">transition</span> <span class="hljs-number">0.3s</span><br><span class="hljs-attribute">color</span> $<span class="hljs-attribute">font</span>-home-black<br><span class="hljs-attribute">text-decoration</span> <span class="hljs-attribute">none</span><br>&amp;<span class="hljs-selector-pseudo">:hover</span><br><span class="hljs-attribute">background-color</span> $<span class="hljs-attribute">font</span>-home-<span class="hljs-selector-tag">main</span><br><span class="hljs-attribute">color</span> $<span class="hljs-attribute">font</span>-data-<span class="hljs-selector-tag">main</span><br><span class="hljs-selector-tag">i</span><br><span class="hljs-attribute">display</span> inline-block<br><span class="hljs-attribute">text-align</span> center<br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span><br><span class="hljs-selector-tag">span</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-selector-class">.right-menu-line</span><br><span class="hljs-selector-class">.right-menu-item</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">flex</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span><br>*<br><span class="hljs-attribute">height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">40px</span><br><span class="hljs-selector-class">.hide</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">none</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何统计字数与计算阅读时间</title>
      <link href="/posts/dc41cc6a/"/>
      <url>/posts/dc41cc6a/</url>
      
        <content type="html"><![CDATA[<h2 id="js部分"><a class="markdownIt-Anchor" href="#js部分"></a> JS部分</h2><p>这个代码是之前的, 我用的是ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">WordCountUtils</span> = &#123;<br>    <span class="hljs-attr">countWords</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 你文章所在的ID或者类</span><br>        <span class="hljs-keyword">const</span> articleContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-content&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (!articleContent) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">const</span> clone = articleContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 这部分是不需要统计的, 尤其是code代码块, 俩面东西过多, 如果不排除的话字数非常夸张</span><br>        <span class="hljs-keyword">const</span> excludeSelectors = [<span class="hljs-string">&#x27;pre&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;script&#x27;</span>, <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;.highlight&#x27;</span>, <span class="hljs-string">&#x27;.giscus-frame&#x27;</span>];<br>        excludeSelectors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">selector</span> =&gt;</span> &#123;<br>            clone.<span class="hljs-title function_">querySelectorAll</span>(selector).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">remove</span>());<br>        &#125;);<br><br>        <span class="hljs-keyword">const</span> text = clone.<span class="hljs-property">textContent</span> || clone.<span class="hljs-property">innerText</span>;<br>        <span class="hljs-keyword">const</span> chineseChars = (text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[\u4e00-\u9fa5]/g</span>) || []).<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">const</span> englishWords = (text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\b[a-zA-Z]+\b/g</span>) || []).<span class="hljs-property">length</span>;<br><br>        <span class="hljs-keyword">return</span> chineseChars + englishWords;<br>    &#125;,<br><br>    <span class="hljs-attr">calculateReadingTime</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> words = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">countWords</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(words / <span class="hljs-number">300</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">initWordCountOnly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> words = <span class="hljs-title class_">WordCountUtils</span>.<span class="hljs-title function_">countWords</span>();<br>    <span class="hljs-keyword">const</span> countBody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-count-body&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (countBody) &#123;<br>        countBody.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-property">textContent</span> = words;<br>    &#125;<br>    <span class="hljs-keyword">return</span> words;<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">initReadingTimeOnly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> readingTime = <span class="hljs-title class_">WordCountUtils</span>.<span class="hljs-title function_">calculateReadingTime</span>();<br>    <span class="hljs-keyword">const</span> timeBody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-time-body&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (timeBody) &#123;<br>        timeBody.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-property">textContent</span> = readingTime;<br>    &#125;<br>    <span class="hljs-keyword">return</span> readingTime;<br>&#125;;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">initWordCountOnly</span>();<br>        <span class="hljs-title function_">initReadingTimeOnly</span>();<br>    &#125;, <span class="hljs-number">100</span>);<br>&#125;);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Pjax</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:success&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">initWordCountOnly</span>();<br>            <span class="hljs-title function_">initReadingTimeOnly</span>();<br>        &#125;, <span class="hljs-number">300</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="pug部分"><a class="markdownIt-Anchor" href="#pug部分"></a> Pug部分</h2><p>分别在需要的地方引用:</p><ol><li>javascript:initWordCountOnly()</li><li>javascript:initReadingTimeOnly()</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pug">#post-count-body.p-2 <br>    a(href=&quot;javascript:initWordCountOnly()&quot;) 0 <br>    span 字<br>span#post-time-head.p-2 耗时:<br>#post-time-body.p-2 <br>    a(href=&quot;javascript:initReadingTimeOnly()&quot;) 0 <br>    span 分钟<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章阅读进度百分比的实现</title>
      <link href="/posts/28109/"/>
      <url>/posts/28109/</url>
      
        <content type="html"><![CDATA[<h2 id="pug相关"><a class="markdownIt-Anchor" href="#pug相关"></a> pug相关</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pug">//- 选择一个你需要的ID或者类<br>.reading-progress 0%<br></code></pre></td></tr></table></figure><h2 id="js相关"><a class="markdownIt-Anchor" href="#js相关"></a> js相关</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ReadingProgress</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> scrollContainer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> progressText = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateReadingProgress</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> scrollTop = scrollContainer.<span class="hljs-property">scrollTop</span>;<br>        <span class="hljs-keyword">const</span> scrollHeight = scrollContainer.<span class="hljs-property">scrollHeight</span>;<br>        <span class="hljs-keyword">const</span> clientHeight = scrollContainer.<span class="hljs-property">clientHeight</span>;<br>        <span class="hljs-keyword">const</span> maxScrollTop = scrollHeight - clientHeight;<br>        <br>        <span class="hljs-keyword">const</span> progress = maxScrollTop &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>((scrollTop / maxScrollTop) * <span class="hljs-number">100</span>, <span class="hljs-number">100</span>) : <span class="hljs-number">0</span>;<br><br>        progressText.<span class="hljs-property">textContent</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(progress) + <span class="hljs-string">&#x27;%&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// init</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 你的文章所在的ID或者类</span><br>        scrollContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#post-content&#x27;</span>);<br>        <span class="hljs-comment">// 你的0%所在的类或者ID</span><br>        progressText = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.reading-progress&#x27;</span>);<br><br>        <span class="hljs-keyword">if</span> (!scrollContainer || !progressText) <span class="hljs-keyword">return</span>;<br><br>        scrollContainer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, updateReadingProgress);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, updateReadingProgress);<br><br>        <span class="hljs-title function_">updateReadingProgress</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        init<br>    &#125;;<br>&#125;)();<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-title class_">ReadingProgress</span>.<span class="hljs-property">init</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, <span class="hljs-title class_">ReadingProgress</span>.<span class="hljs-property">init</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章阅读进度条的实现</title>
      <link href="/posts/22939/"/>
      <url>/posts/22939/</url>
      
        <content type="html"><![CDATA[<h2 id="pug相关"><a class="markdownIt-Anchor" href="#pug相关"></a> pug相关</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pug">//- 找到一个你想用的id或者类<br>#layout-top<br></code></pre></td></tr></table></figure><h2 id="js相关"><a class="markdownIt-Anchor" href="#js相关"></a> js相关</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">initLayoutTopSync</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> lt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#layout-top&#x27;</span>),<br>        pt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.reading-progress-text&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!lt || !pt) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">const</span> fill = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// 这里是定义颜色样式什么的</span><br>    fill.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">&#x27;position:absolute;top:0;left:0;height:5px;background:rgba(59,124,255,0.4);width:0%;&#x27;</span>;<br>    lt.<span class="hljs-title function_">appendChild</span>(fill);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">() =&gt;</span> fill.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = (<span class="hljs-built_in">parseFloat</span>(pt.<span class="hljs-property">textContent</span>) || <span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;%&#x27;</span>)<br>        .<span class="hljs-title function_">observe</span>(pt, &#123;<br>            <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span><br>        &#125;);<br><br>    fill.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = (<span class="hljs-built_in">parseFloat</span>(pt.<span class="hljs-property">textContent</span>) || <span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;%&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, initLayoutTopSync);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, initLayoutTopSync);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在electron中使用pug和stylus</title>
      <link href="/posts/54125/"/>
      <url>/posts/54125/</url>
      
        <content type="html"><![CDATA[<h2 id="在electron中使用pug"><a class="markdownIt-Anchor" href="#在electron中使用pug"></a> 在electron中使用pug</h2><p>下载<a href="https://www.npmjs.com/package/electron-pug">electron-pug</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install electron-pug<br></code></pre></td></tr></table></figure><p>在你的main.js中引用electron-pug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> setupPug = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron-pug&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在createWindow的BrowserWindow之前添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> pug;<br><span class="hljs-keyword">try</span> &#123;<br>    pug = <span class="hljs-keyword">await</span> <span class="hljs-title function_">setupPug</span>(&#123;<br>        <span class="hljs-attr">pretty</span>: <span class="hljs-literal">true</span><br>    &#125;);<br>    pug.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;electron-pug 错误&#x27;</span>, err));<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;无法启动 &#x27;electron-pug&#x27;&quot;</span>, err);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="在electron中使用stylus"><a class="markdownIt-Anchor" href="#在electron中使用stylus"></a> 在electron中使用stylus</h2><p>下载stylus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install stylus stylus-loader<br></code></pre></td></tr></table></figure><p>然后直接用就可以了, stylus会在运行时自动编译为css</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> pug </tag>
            
            <tag> stylus </tag>
            
            <tag> 预编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>telegram出现SMS Fee解决方法</title>
      <link href="/posts/42785/"/>
      <url>/posts/42785/</url>
      
        <content type="html"><![CDATA[<blockquote><p>警惕广告诈骗, 市面上的解决方法大多是骗人的</p></blockquote><h2 id="sim卡"><a class="markdownIt-Anchor" href="#sim卡"></a> SIM卡</h2><p>经过我的测试:</p><table><thead><tr><th style="text-align:center">国家</th><th style="text-align:center">测试</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">英国</td><td style="text-align:center">实体卡(giffgaff)</td><td style="text-align:center">SMS Fee</td></tr><tr><td style="text-align:center">美国</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">SMS Fee</td></tr><tr><td style="text-align:center">中国</td><td style="text-align:center">实体卡, 虚拟卡/实体卡(1069)</td><td style="text-align:center">OK</td></tr><tr><td style="text-align:center">阿曼</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">OK</td></tr><tr><td style="text-align:center">埃及</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">SMS Fee</td></tr><tr><td style="text-align:center">巴基斯坦</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">SMS Fee</td></tr></tbody></table><h2 id="vpn"><a class="markdownIt-Anchor" href="#vpn"></a> VPN</h2><p>我主要有三个机场, 其中一个是长期稳定的双线新加坡, 其他两个是市面上普通的机场, 但是三家在英国实体卡的基础上都无法注册, 故而得出结论<br /><code>25.09.15开始: VPN已经无法决定是否能成功绕过SMS Fee, 建议使用中国(+86)开头的SIM卡进行注册</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 通讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> telegram </tag>
            
            <tag> 通讯 </tag>
            
            <tag> 社交 </tag>
            
            <tag> 飞机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程5 - zabbix自定义</title>
      <link href="/posts/51207/"/>
      <url>/posts/51207/</url>
      
        <content type="html"><![CDATA[<h2 id="定义一个应用集"><a class="markdownIt-Anchor" href="#定义一个应用集"></a> 定义一个应用集</h2><ol><li>点击 配置 &gt; 主机 &gt; 应用集</li><li>点击右上角的 <strong>创建应用集</strong><ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li></ul></li></ol><hr /><h2 id="定义一个监控项"><a class="markdownIt-Anchor" href="#定义一个监控项"></a> 定义一个监控项</h2><ol><li>点击 配置 &gt; 主机 &gt; 监控项</li><li>点击右上角的 <strong>创建监控项</strong> (带<code>*</code>的为必填)<ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li><li><strong>类型:</strong> 按需选择, 默认为 zabbix客户端</li><li><strong>键值:</strong> <code>net.if.in[ens33,bytes]</code> 这里填写一张要监控流量的网卡名, in是入, out是出, total是总量</li><li><strong>信息类型:</strong> 数字, 因为网络没有负数, 而我们也不需要看小数点后的信息</li><li><strong>单位:</strong> 这里默认为byte, 所以这里写bps, 也可以不写</li><li><strong>更新间隔:</strong> 10s, 即每十秒刷新一次, 1m就是一分钟刷新一次</li><li><strong>自定义时间间隔:</strong> 无特殊需求无需调整</li><li><strong>历史数据保留期:</strong> 按需选择</li><li><strong>趋势存储时间:</strong> 按需选择</li><li><strong>查看值:</strong> 不变</li><li><strong>新的应用集:</strong> 不选择</li><li><strong>应用集:</strong> 选择我们刚刚创建的应用集</li><li><strong>填入主机资产字段:</strong></li><li><strong>描述:</strong> 按需填写</li><li><strong>已启用:</strong> 启用</li></ul></li><li>点击 预处理 &gt; 预定步骤 &gt; 添加<ul><li><strong>名称:</strong> 每秒更改</li><li><strong>名称:</strong> 自定义倍数, 8</li></ul></li></ol><hr /><h2 id="为什么要自定义监控项"><a class="markdownIt-Anchor" href="#为什么要自定义监控项"></a> 为什么要自定义监控项</h2><p>Q:  为什么要自定义监控项?<br />A:  因为我们对不同的服务器环境有不同的需求<br />Q:  自定义监控项有什么作用?<br />A:  比如说我们可以对某个服务进行监控, 如果发现该服务没有正常运, 我们还可以用动作来修复</p><h2 id="创建监控项"><a class="markdownIt-Anchor" href="#创建监控项"></a> 创建监控项</h2><p>比如这里我们要对 dhcpd 服务进行监控<br />有两个方法, 一个是使用脚本来获取dhcpd服务的运行状态, 一个是直接使用zabbix比较方便的proc监控项</p><h3 id="proc方法"><a class="markdownIt-Anchor" href="#proc方法"></a> Proc方法</h3><h4 id="proc-监控项"><a class="markdownIt-Anchor" href="#proc-监控项"></a> proc 监控项</h4><ol><li>转到 <strong>配置</strong> &gt; <strong>主机</strong>, 选择要监控的主机</li><li>点击 <strong>创建监控项</strong> 填写以下信息:<ul><li><strong>名称</strong>: 名称随便, 但尽量要见名知意</li><li><strong>类型</strong>: 选择 Zabbix agent</li><li><strong>键</strong>: 使用 <mark>proc.num[dhcpd]</mark></li><li><strong>类型</strong>: 选择 数字</li><li><strong>更新间隔</strong>: 设置为 30s</li></ul></li></ol><p>图形按照自己需求是否创建, 毕竟只有 true(1) 和 false(0)</p><h4 id="proc触发器"><a class="markdownIt-Anchor" href="#proc触发器"></a> proc触发器</h4><ol><li>在主机的 <strong>触发器</strong> 标签下，点击 <strong>创建触发器</strong>。</li><li>填写以下信息:<ul><li><strong>名称</strong>: 名称随便, 但尽量要见名知意</li><li><strong>表达式</strong>:<ul><li>点击 添加 , 然后选择你的监控项, 结果 = 0</li><li>或者自己填 <mark>{host: proc.num[dhcpd].last()}=0</mark> 将 <code>host</code> 替换为你的主机名</li></ul></li><li><strong>严重性</strong>: 选择合适的严重性等级</li><li><strong>事件成功迭代:</strong><ul><li><strong>恢复表达式:</strong> <mark>{<a href="http://zabbix-server.com">zabbix-server.com</a>: proc.num[dhcpd].last()}=1</mark></li></ul></li></ul></li></ol><h4 id="配置动作"><a class="markdownIt-Anchor" href="#配置动作"></a> 配置动作</h4><ol><li>转到 <strong>配置</strong> &gt; <strong>动作</strong></li><li>点击 <strong>创建动作</strong></li><li>设置条件, 例如:<ul><li><strong>触发器</strong> 状态为 PROBLEM</li></ul></li><li>在操作中进行编辑<ul><li><strong>默认操作步骤持续时间:</strong> 60s</li><li><strong>操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>步骤:</strong> 1-1</li><li><strong>步骤持续时间:</strong> 0</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li><li><strong>条件:</strong></li></ul></li><li><strong>恢复操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li></ul></li></ul></li></ol><h3 id="脚本方法"><a class="markdownIt-Anchor" href="#脚本方法"></a> 脚本方法</h3><h4 id="编写监控脚本"><a class="markdownIt-Anchor" href="#编写监控脚本"></a> 编写监控脚本</h4><p>在你所想要对dhcp服务进行监控的服务器上编写一个脚本, 并且设置为可执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> systemctl is-active --quiet dhcpd; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> 1<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> 0<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>为了方便所以还是输出1和0, 不使用汉字 是 否 , 是为了降低故障率</p><blockquote><p>注意: 由于zabbix是用zabbix用户执行的,所以要把脚本放在一个所有用户都能访问的目录</p></blockquote><h4 id="脚本监控项"><a class="markdownIt-Anchor" href="#脚本监控项"></a> 脚本监控项</h4><ol><li>点击 配置 &gt; 主机 &gt; 监控项</li><li>点击右上角的 <strong>创建监控项</strong> (带<code>*</code>的为必填)<ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li><li><strong>类型:</strong> 按需选择, 默认为 zabbix客户端</li><li><strong>键值:</strong> 使用 <mark>system.run[/path/to/check_dhcpd.sh]</mark></li><li><strong>类型</strong>: 选择 数字</li><li><strong>更新间隔</strong>: 设置为 30s</li></ul></li></ol><h4 id="脚本触发器"><a class="markdownIt-Anchor" href="#脚本触发器"></a> 脚本触发器</h4><ol><li>在主机的 <strong>触发器</strong> 标签下，点击 <strong>创建触发器</strong>。</li><li>填写以下信息:<ul><li><strong>名称</strong>: 名称随便, 但尽量要见名知意</li><li><strong>表达式</strong>:<ul><li>点击 添加 , 然后选择你的监控项, 结果 = 0</li><li>或者自己填 <mark>{host:system.run[/path/to/check_dhcpd.sh].last()}=0</mark> 将 <code>host</code> 替换为你的主机名</li></ul></li><li><strong>严重性</strong>: 选择合适的严重性等级</li><li><strong>事件成功迭代:</strong><ul><li><strong>恢复表达式:</strong> <mark>{host:system.run[/path/to/check_dhcpd.sh].last()}=1</mark></li></ul></li></ul></li></ol><h4 id="配置动作-2"><a class="markdownIt-Anchor" href="#配置动作-2"></a> 配置动作</h4><ol><li>转到 <strong>配置</strong> &gt; <strong>动作</strong></li><li>点击 <strong>创建动作</strong></li><li>设置条件, 例如:<ul><li><strong>触发器</strong> 状态为 PROBLEM</li></ul></li><li>在操作中进行编辑<ul><li><strong>默认操作步骤持续时间:</strong> 60s</li><li><strong>操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>步骤:</strong> 1-1</li><li><strong>步骤持续时间:</strong> 0</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li><li><strong>条件:</strong></li></ul></li><li><strong>恢复操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li></ul></li></ul></li></ol><hr /><h2 id="定义一个聚合图形"><a class="markdownIt-Anchor" href="#定义一个聚合图形"></a> 定义一个聚合图形</h2><ol><li>点击 检测 &gt; 聚合图形 &gt; 编辑聚合图形</li><li>在其中选择即可实现聚合图形的效果</li></ol><hr /><h2 id="定义一个图形"><a class="markdownIt-Anchor" href="#定义一个图形"></a> 定义一个图形</h2><ol><li>点击 配置 &gt; 主机 &gt; 图形</li><li>点击右上角的 <strong>创建图表</strong> (带<code>*</code>的为必填)<ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li><li><strong>宽(px):</strong> 自定义</li><li><strong>高度(px):</strong> 自定义</li><li><strong>图形类别:</strong> 选择一个自己喜欢的</li><li><strong>显示图例:</strong></li><li><strong>查看工作时间:</strong></li><li><strong>查看触发器:</strong></li><li><strong>百分比线(左):</strong></li><li><strong>百分比线(右):</strong></li><li><strong>纵轴Y最小值MIN:</strong></li><li><strong>纵轴最大值:</strong></li><li><strong>监控项:</strong> 选中想要只作为图标的监控项</li></ul></li><li>点击预览即可进行查看</li></ol><hr /><h2 id="触发器是什么"><a class="markdownIt-Anchor" href="#触发器是什么"></a> 触发器是什么?</h2><p>监控项仅负责收集数据,  而通常收集数据的目的还包括在某指标对应的数据超出合理范围时给相关人员发送告警信息,  &quot;触发器&quot;正是用于为监控项所收集的数据定义的阈值</p><p>每一个触发器仅能关联至一个监控项,  但可以为一个监控项同时使用多个触发器. 事实上,  为一个监控项定义多个具有不同阈值的触发器,  可以实现不同级别的报警功能</p><p>一个触发器由一个表达式构成,  它定义了监控项所采取的数据的一个阈值</p><p>一但某次采集的数据超出了此触发器定义的阈值,  触发器状态将会装换为&quot;problem&quot;; 而当采取的数据再次回归至合理范围内时,  其状态将重新返回&quot;ok&quot;</p><h2 id="触发器表达式"><a class="markdownIt-Anchor" href="#触发器表达式"></a> 触发器表达式</h2><p>触发器表达式高度灵活,  可以创建出非常复杂的测试条件<br />基本的触发器表达式如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&lt;server&gt;:&lt;key&gt;&lt;<span class="hljs-keyword">function</span>&gt;&#123;&lt;parameter&gt;&#125;&#125;&lt;operator&gt;&lt;constant&gt;<br></code></pre></td></tr></table></figure><ul><li><strong>server:</strong> 主机名</li><li><strong>key:</strong> 主机上关系的相应监控项的key</li><li><strong>function:</strong> 评估采集到的数据是否在合理范围内时所使用的函数,  其评估过程可以根据采集的数据, 当前时间及其他因素进行<ul><li>目前触发器所支持的函数有: avg count change date dayofweek delta diff iregexp last max min nodata now sum 等</li></ul></li><li><strong>parameter:</strong> 函数参数 大多数数值函数可以接受秒数为其参数,  而如果在数值参数之前使用&quot;#&quot;作为前缀,  则表示为最近几次的取值,  如sum(300)表示300秒内所有的取值之和,  而sum(#10)则表示最近10次取值之和<ul><li>此外avg count last min max还支持使用第二个参数用于完成时间限定: 例如 max(1h, 7d)将返回一周之前1小时内的最大值</li></ul></li></ul><h3 id="操作符"><a class="markdownIt-Anchor" href="#操作符"></a> 操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">/<br>*<br>-<br>+<br>&lt;<br>&gt;<br># 不等于<br>=<br>&amp; 逻辑与<br>| 逻辑或<br></code></pre></td></tr></table></figure><h4 id="例如"><a class="markdownIt-Anchor" href="#例如"></a> 例如:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;server.<span class="hljs-property">agent</span>.<span class="hljs-property">com</span>:system.<span class="hljs-property">cpu</span>.<span class="hljs-property">load</span>[all, avg1].<span class="hljs-title function_">last</span>(<span class="hljs-number">0</span>)&#125;&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><blockquote><p>表示主机server.agent.com上所有cpu的过去一分钟内的平均负载的最后一次取值大于3时将触发状态转换<br />对last函数来说, last(0)相当于last(#1)</p></blockquote><h2 id="创建触发器"><a class="markdownIt-Anchor" href="#创建触发器"></a> 创建触发器</h2><ol><li>点击 配置 &gt; 主机 &gt; 触发器</li><li>点击 <strong>创建触发器</strong> (带<code>*</code>的为必填)<ul><li>名称: 名称随便,  但尽量要见名知意</li><li>运营数据:</li><li>严重性: 根据自己需求来选择</li><li>表达式: 根据自己需求来填写</li><li>事件成功迭代:</li><li>问题事件生成模式:</li><li>事件成功关闭:</li><li>允许手动关闭:</li><li>URL:</li><li>描述:</li></ul></li></ol><h2 id="触发器触发执行动作"><a class="markdownIt-Anchor" href="#触发器触发执行动作"></a> 触发器触发执行动作</h2><p>在配置好的监控和触发器之后,  一旦正常工作中的某触发器状态发生改变,  一般意味着有异常情况发生,  此时通常需要采取一定的动作(action),  如告警或者执行远程命令等.</p><p>并非所有的触发器状态发生改变的场景都需要对其进行干预,  如装变为ok状态时,  相应的,  如果触发器的状态装变为problem,  就需要告知所有关心其相关监控指标的人员了.</p><p>通知(notifcation)是zabbix中最常用的动作之一.</p><h3 id="zabbix通知"><a class="markdownIt-Anchor" href="#zabbix通知"></a> zabbix通知</h3><p>一般需要两个步骤:</p><ul><li>定义所需的&quot;媒介&quot;: 通常指发送信息的途径,  如邮件,  Jabber和SMS等;</li><li>配置一个&quot;动作&quot;: 发送信息至某&quot;媒介&quot;;</li><li>动作由&quot;条件&quot;和&quot;操作&quot;组成,  他的逻辑为当&quot;条件&quot;满足时,  就执行响应的&quot;操作&quot;;</li><li>发送通知和执行远程命令是两个最基本的动作</li></ul><h3 id="zabbix事件"><a class="markdownIt-Anchor" href="#zabbix事件"></a> zabbix事件</h3><p>zabbix的事件是基于时间戳进行标记的, 它们是采取动作如发送邮件通知的基础, 其主要有三种途径:</p><ul><li>触发器事件:触发器状态每次发生改变, 都会生成相应事件, 且通常包含详细信息, 如发生的时间及新的状态等;</li><li>发现(discovery)事件:zabbix会周期性的扫描&quot;网络发现规则&quot;中指定的IP范围, 一旦发现主机或服务, 就会生成一个或几个发现事件;</li><li>发现事件有8类:service up ,  service down ,  host up,  host down,  service discovered ,  service lost, host discovered和host lost;</li><li>主动agent自动发现事件(也称作&quot;自动注册事件&quot;):当一个此前状态未知的主机agent发起检测请求时会生成此类事件.</li><li>因此, zabbix的通知机制也称作基于事件的通知机制, 也只有理解了事件本身, 才能定制出符合需求的通知系统</li></ul><h3 id="zabbix媒介"><a class="markdownIt-Anchor" href="#zabbix媒介"></a> zabbix媒介</h3><p>在zabbix中, 媒介指发送通知消息的通道, 其通常有以下几种类型:</p><ul><li>E-mail: 电子邮件,即通知邮件的方式发送通知信息</li><li>SMS: 手机短信,即通过连接至zabbix服务的GSM Modem发送通知</li><li>Jabber: Jabber消息:Jabber是一个开放的,基于XML的协议,能够实现基于Internet或LAN的即时通讯服务</li><li>自定义的通知脚本: 以上方式不能满足需求时:zabbix可以调用位于其配置文件&quot;AlterScriptsPath&quot;变量所定义脚本查找目录中的脚本来完成通知功能</li></ul><h2 id="定义报警媒介"><a class="markdownIt-Anchor" href="#定义报警媒介"></a> 定义报警媒介</h2><ol><li>依次点击 管理 &gt; 媒介 &gt; 创建媒介类型</li><li>报警媒介类型:<ul><li><strong>名称:</strong> 名称随便,  但尽量要见名知意</li><li><strong>类型:</strong> 电子邮件</li><li><strong>SMTP服务器:</strong> localhost</li><li><strong>SMTP服务器端口:</strong> 25</li><li><strong>SMTP HELO:</strong> localhost</li><li><strong>SMTP电邮:</strong> zabbix-server@localhost</li><li><strong>安全连接:</strong> 无</li><li><strong>认证:</strong> 无</li><li><strong>消息格式:</strong> HTML</li><li><strong>描述:</strong></li></ul></li></ol><h2 id="用户接受报警媒介"><a class="markdownIt-Anchor" href="#用户接受报警媒介"></a> 用户接受报警媒介</h2><ol><li>依次点击 管理 &gt; 用户 &gt; admin &gt; 报警媒介</li><li>点击报警媒介的添加来添加一个新的类型<ul><li><strong>类型:</strong> 选择刚刚创建的媒介</li><li><strong>收件人:</strong> <a href="mailto:root@localhost.com">root@localhost.com</a></li><li><strong>当启用时:</strong> 7x24</li><li><strong>如果存在严重性则使用:</strong> 全选</li><li>点击更新即可</li></ul></li></ol><h2 id="定义动作"><a class="markdownIt-Anchor" href="#定义动作"></a> 定义动作</h2><ol><li>依次点击 配置 &gt; 动作 &gt; 创建动作</li><li>在动作中进行编辑<ul><li><strong>名称:</strong> 名称随便,  但尽量要见名知意</li><li><strong>条件:</strong><ul><li><strong>类型:</strong> 触发器</li><li><strong>操作者:</strong> 等于</li><li><strong>触发器:</strong> 选择你创建的触发器</li></ul></li></ul></li><li>在操作中进行编辑<ul><li><strong>默认操作步骤持续时间:</strong> 60s</li><li><strong>操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>步骤:</strong> 1-1</li><li><strong>步骤持续时间:</strong> 0</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li><li><strong>条件:</strong></li></ul></li><li><strong>恢复操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li></ul></li></ul></li></ol><hr />]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程4 - zabbix agent</title>
      <link href="/posts/3206/"/>
      <url>/posts/3206/</url>
      
        <content type="html"><![CDATA[<h2 id="添加主机"><a class="markdownIt-Anchor" href="#添加主机"></a> 添加主机</h2><p>添加一个已经配置好的客户端</p><h3 id="zbx添加"><a class="markdownIt-Anchor" href="#zbx添加"></a> ZBX添加</h3><p>ZBX协议添加, 也是我们最常用的一个协议, 一般我们在客户端上安装了zabbix-agent并配置完成后即可进行连接</p><ol><li>打开 配置 &gt; 主机 &gt; 创建主机</li><li>填写<ul><li><strong>主机名称:</strong> 必填, 随意填写即可, 但要见名知意, 一般推荐写IP</li><li><strong>可见的名称:</strong> 如果填写则显示该项目, 如果不填写则显示主机名称, 一般推荐写主机名</li><li><strong>群组:</strong> 选择一个你自己创建的群组</li><li><strong>接口:</strong><ul><li><strong>类型:</strong> 客户端</li><li><strong>IP地址:</strong> 这里写的是客户端的IP</li><li><strong>DNS名称:</strong> 一般不用填写</li><li><strong>连接到:</strong> 内网地址够用, 我们选择IP</li><li><strong>端口:</strong> 10050, zabbix-agent客户端端口默认都是10050, 服务端是10051</li></ul></li></ul></li><li>点击添加, 我们这样就成功添加了一个主机</li></ol><h3 id="添加模板"><a class="markdownIt-Anchor" href="#添加模板"></a> 添加模板</h3><p>Q: 为什么要添加模板?<br />A: 因为不添加模板 <code>可用性</code> 的 <code>ZBX</code> 无法从 <font color="#7f7f7f">灰色</font> 变为 <font color="#9bbb59">绿色</font></p><ol><li>打开 配置 &gt; 主机 &gt; 点击一个主机 &gt; 模板</li><li>点击 选择 , 选中 <strong>Template OS Linux by Zabbix agent</strong> , 点击 更新 后就完成了</li><li>在确认为绿色后就可以删了, 我们后续可以自己去定义模板</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程3 - zabbix proxy</title>
      <link href="/posts/52295/"/>
      <url>/posts/52295/</url>
      
        <content type="html"><![CDATA[<h2 id="zabbix-代理端安装"><a class="markdownIt-Anchor" href="#zabbix-代理端安装"></a> zabbix 代理端安装</h2><p>如果我们服务器数量太过庞大, 由众多客户端发送大量零散的小数据包可能会导致服务端崩溃, 这时候就需要使用代理端进行统一数据包并一起发送给服务端</p><h3 id="安装zabbix库"><a class="markdownIt-Anchor" href="#安装zabbix库"></a> 安装Zabbix库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-proxy"><a class="markdownIt-Anchor" href="#安装zabbix-proxy"></a> 安装zabbix-proxy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install OpenIPMI unixODBC<br>yum install fping<br>yum install zabbix-proxy-mysql<br></code></pre></td></tr></table></figure><h3 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install mariadb-server mariadb<br>systemctl <span class="hljs-built_in">enable</span> --now mariadb<br></code></pre></td></tr></table></figure><h3 id="创建数据库并授权"><a class="markdownIt-Anchor" href="#创建数据库并授权"></a> 创建数据库并授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot<br>mysql&gt; <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&#x27;password&#x27;</span>);<br>mysql&gt; create database zabbix_proxy character <span class="hljs-built_in">set</span> <span class="hljs-string">&#x27;utf8&#x27;</span>;<br>mysql&gt; grant all on zabbix_proxy.* to zbxproxy@localhost identified by <span class="hljs-string">&#x27;zbxproxy&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="导入数据"><a class="markdownIt-Anchor" href="#导入数据"></a> 导入数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zcat /usr/share/doc/zabbix-proxy-mysql-5.0.45/schema.sql.gz | mysql -u zbxproxy -pzbxproxy zabbix_proxy<br></code></pre></td></tr></table></figure><h3 id="修改zabbix-proxy配置文件"><a class="markdownIt-Anchor" href="#修改zabbix-proxy配置文件"></a> 修改zabbix-proxy配置文件</h3><p>修改 /etc/zabbix/zabbix_proxy.conf , 修改下列项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Server=192.168.10.200                            <span class="hljs-comment"># 这里填写的是 zabbix-server 的IP</span><br>Hostname=proxy.zabbix.com                        <span class="hljs-comment"># 必须主机名 (proxy的主机名 必须解析)</span><br>DBHost=localhost<br>DBName=zabbix_proxy<br>DBUser=zbxproxy<br>DBPassword=zbxproxy<br>DBSocket=/var/lib/mysql/mysql.sock<br></code></pre></td></tr></table></figure><h3 id="设置为开机自启动"><a class="markdownIt-Anchor" href="#设置为开机自启动"></a> 设置为开机自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now zabbix-proxy<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-agent"><a class="markdownIt-Anchor" href="#安装zabbix-agent"></a> 安装zabbix-agent</h3><p>因为我们也需要监控proxy端, 以免proxy端错误我们却不知道, 故安装一个agent端用于代理端被监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="修改zabbix-agent配置文件"><a class="markdownIt-Anchor" href="#修改zabbix-agent配置文件"></a> 修改zabbix-agent配置文件</h3><p>修改 /etc/zabbix/zabbix_agentd.conf, 并且修改如下四行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Server=Zabbix                                     <span class="hljs-comment"># Server端主机名或IP地址</span><br>ServerActive= Zabbix                              <span class="hljs-comment"># Server端主机名或IP地址</span><br>Hostname=                                         <span class="hljs-comment"># Agent端的主机名</span><br>UnsafeUserParameters=1                            <span class="hljs-comment"># 是否限制用户自定义keys使用特殊字符</span><br></code></pre></td></tr></table></figure><h3 id="设置为开机自启动-2"><a class="markdownIt-Anchor" href="#设置为开机自启动-2"></a> 设置为开机自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now zabbix-agent<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程2 - zabbix安装</title>
      <link href="/posts/3526/"/>
      <url>/posts/3526/</url>
      
        <content type="html"><![CDATA[<h2 id="zabbix-服务端安装"><a class="markdownIt-Anchor" href="#zabbix-服务端安装"></a> zabbix 服务端安装</h2><p>在<a href="https://www.zabbix.com/cn/download">zabbix.com</a> (zabbix官网)可以按需下载</p><h3 id="安装zabbix库"><a class="markdownIt-Anchor" href="#安装zabbix库"></a> 安装Zabbix库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-server-web前端-agent"><a class="markdownIt-Anchor" href="#安装zabbix-server-web前端-agent"></a> 安装Zabbix server, Web前端, agent</h3><p>因为在zabbix服务器也需要监控自己, 所以需要在zabbix服务端安装agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install zabbix-server-mysql zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="安装zabbix前端"><a class="markdownIt-Anchor" href="#安装zabbix前端"></a> 安装Zabbix前端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install centos-release-scl<br></code></pre></td></tr></table></figure><h4 id="启用前端"><a class="markdownIt-Anchor" href="#启用前端"></a> 启用前端</h4><p>编辑配置文件 /etc/yum.repos.d/zabbix.repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[zabbix-frontend]<br>enabled=1<br></code></pre></td></tr></table></figure><h4 id="安装zabbix前端软件包"><a class="markdownIt-Anchor" href="#安装zabbix前端软件包"></a> 安装Zabbix前端软件包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install zabbix-web-mysql-scl zabbix-apache-conf-scl<br></code></pre></td></tr></table></figure><h3 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install mariadb-server mariadb<br>systemctl <span class="hljs-built_in">enable</span> --now mariadb<br></code></pre></td></tr></table></figure><h4 id="创建初始数据库"><a class="markdownIt-Anchor" href="#创建初始数据库"></a> 创建初始数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot<br>mysql&gt; <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&#x27;password&#x27;</span>);<br>mysql&gt; create database zabbix character <span class="hljs-built_in">set</span> utf8 collate utf8_bin;<br>mysql&gt; create user zabbix@localhost identified by <span class="hljs-string">&#x27;password&#x27;</span>;<br>mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;<br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 1;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><h4 id="导入初始架构和数据"><a class="markdownIt-Anchor" href="#导入初始架构和数据"></a> 导入初始架构和数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p<span class="hljs-string">&#x27;password&#x27;</span> zabbix<br></code></pre></td></tr></table></figure><h4 id="关闭binlog"><a class="markdownIt-Anchor" href="#关闭binlog"></a> 关闭binlog</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -p<span class="hljs-string">&#x27;password&#x27;</span><br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 0;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><h3 id="为zabbix-server配置数据库"><a class="markdownIt-Anchor" href="#为zabbix-server配置数据库"></a> 为Zabbix server配置数据库</h3><p>编辑配置文件 /etc/zabbix/zabbix_server.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DBPassword=password<br></code></pre></td></tr></table></figure><h3 id="为zabbix前端配置php"><a class="markdownIt-Anchor" href="#为zabbix前端配置php"></a> 为Zabbix前端配置PHP</h3><p>编辑配置文件 /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php_value[date.timezone] = Asia/Shanghai<br></code></pre></td></tr></table></figure><h3 id="启动zabbix-server和agent进程"><a class="markdownIt-Anchor" href="#启动zabbix-server和agent进程"></a> 启动Zabbix server和agent进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm<br>systemctl <span class="hljs-built_in">enable</span> zabbix-server zabbix-agent httpd rh-php72-php-fpm<br></code></pre></td></tr></table></figure><h3 id="配置zabbix网页端"><a class="markdownIt-Anchor" href="#配置zabbix网页端"></a> 配置zabbix网页端</h3><p>在你的浏览器输入<code>[你的IP]/zabbix</code>访问网页端查看是否配置成功</p><h4 id="zabbix网页端初始化"><a class="markdownIt-Anchor" href="#zabbix网页端初始化"></a> zabbix网页端初始化</h4><p>打开网页后你会看到zabbix的网页端初始化界面</p><h5 id="welcome"><a class="markdownIt-Anchor" href="#welcome"></a> Welcome</h5><p>![[{4C741B01-B40E-4562-B42E-D5D7EADCE8BF}.png]]<br />选择Next step</p><h5 id="check-of-pre-requisites"><a class="markdownIt-Anchor" href="#check-of-pre-requisites"></a> Check of pre-requisites</h5><p>这一选项中一定要保证所有项都是<font color="#9bbb59">OK</font>, 如果你发现了<font color="#c0504d">Fail</font>请尝试修复</p><h5 id="configure-db-connection"><a class="markdownIt-Anchor" href="#configure-db-connection"></a> Configure DB connection</h5><p>配置zabbix所连接的数据库</p><p><strong>Database type:</strong> 选择你刚刚安装的数据库类型(其实目前为止只支持mysql)<br /><strong>Database host:</strong> 填写你的数据库IP<br /><strong>Database port:</strong> 输入数据库端口(0为使用默认端口, 如果是mysql就是3306)<br /><strong>Database name:</strong> 数据库名称(注意是库名, 而不是用户名)<br /><strong>User:</strong> 数据库用户名(默认为zabbix)<br /><strong>Password:</strong> 数据库用户密码</p><h5 id="zabbix-server-details"><a class="markdownIt-Anchor" href="#zabbix-server-details"></a> Zabbix server details</h5><p>一些其他细节配置, 包括主机名或IP地址以及默认监听端口<br />一般不用进行修改, 直接选择下一步</p><h5 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h5><p>初始化并安装<br />在这里可以看到你之前所有的配置, 建议在这个页面仔细检查后在进行安装<br />安装后若出现: <font color="#9bbb59">Congratulations! You have successfully installed Zabbix frontend.</font> 则代表安装成功</p><h4 id="进入zabbix网页端"><a class="markdownIt-Anchor" href="#进入zabbix网页端"></a> 进入Zabbix网页端</h4><p>安装后点击完成, 登陆页面的账号是<code>Admin</code>, 密码是<code>zabbix</code> (密码是上面你所填写的)</p><h5 id="设置中文"><a class="markdownIt-Anchor" href="#设置中文"></a> 设置中文</h5><p>打开zabbix网页端, 选择<strong>Administration</strong> &gt; <strong>Users</strong> &gt; <strong>Admin</strong> &gt; <strong>Language</strong>, 将English(en_GB)修改为chinese(zh_CN)并选择update</p><h3 id="查看zabbix-server日志"><a class="markdownIt-Anchor" href="#查看zabbix-server日志"></a> 查看zabbix-server日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail -f /var/log/zabbix/zabbix_server.log<br></code></pre></td></tr></table></figure><h2 id="zabbix客户端安装snmp"><a class="markdownIt-Anchor" href="#zabbix客户端安装snmp"></a> zabbix客户端安装snmp</h2><h3 id="安装snmp"><a class="markdownIt-Anchor" href="#安装snmp"></a> 安装snmp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install net-snmp net-snmp-utils<br></code></pre></td></tr></table></figure><h3 id="修改snmp配置文件"><a class="markdownIt-Anchor" href="#修改snmp配置文件"></a> 修改snmp配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;^[a-Z]&quot;</span> /etc/snmp/snmpd.conf<br><br><span class="hljs-comment"># 设置团体名，默认为public,可以自定义</span><br>com2sec notConfigUser  default       public<br><span class="hljs-comment"># 设置组，将团体名称中的 notConfigUser 关联至组 notConfigGroup，提供v1,v2c协议</span><br>group   notConfigGroup v1           notConfigUser<br>group   notConfigGroup v2c          notConfigUser<br>view    systemview    included   .1.3.6.1.2.1.1<br>view    systemview    included   .1.3.6.1.2.1.25.1.1<br><span class="hljs-comment"># 参照上面的格式，自定义视图OID权限（能获取网络设备的那些数据）</span><br>view    systemview    included   .1.3.6.1 <br><span class="hljs-comment"># 将组notConfigGroup关联至systemview，定义组的访问权限</span><br>access  notConfigGroup <span class="hljs-string">&quot;&quot;</span>      any       noauth    exact  systemview  none none<br>syslocation Unknown (edit /etc/snmp/snmpd.conf)<br>syscontact Root &lt;root@localhost&gt; (configure /etc/snmp/snmp.local.conf)<br>dontLogTCPWrappersConnects <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h3 id="启动snmp服务"><a class="markdownIt-Anchor" href="#启动snmp服务"></a> 启动snmp服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now snmpd<br></code></pre></td></tr></table></figure><h3 id="检查进程"><a class="markdownIt-Anchor" href="#检查进程"></a> 检查进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@zabbix-snmp ~]<span class="hljs-comment"># ps -ef | grep snmpd</span><br>root       1856      1  0 14:56 ?        00:00:00 /usr/sbin/snmpd -LS0-6d -f<br>root       1890   1714  0 15:04 pts/0    00:00:00 grep --color=auto snmpd<br></code></pre></td></tr></table></figure><h3 id="检查端口"><a class="markdownIt-Anchor" href="#检查端口"></a> 检查端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@zabbix-snmp ~]<span class="hljs-comment"># ss -anltpu | grep snmpd</span><br>udp    UNCONN     0      0         *:161                   *:*                   <span class="hljs-built_in">users</span>:((&quot;snmpd&quot;,pid=<span class="hljs-number">1856</span>,fd=<span class="hljs-number">6</span>))<br>tcp    LISTEN     0      128    127.0.0.1:199              *:*                   <span class="hljs-built_in">users</span>:((&quot;snmpd&quot;,pid=<span class="hljs-number">1856</span>,fd=<span class="hljs-number">7</span>))<br></code></pre></td></tr></table></figure><hr /><h2 id="zabbix服务端安装snmp"><a class="markdownIt-Anchor" href="#zabbix服务端安装snmp"></a> zabbix服务端安装snmp</h2><h3 id="安装snmp-2"><a class="markdownIt-Anchor" href="#安装snmp-2"></a> 安装snmp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install net-snmp-utils<br></code></pre></td></tr></table></figure><h3 id="在服务端采集客户端的数据"><a class="markdownIt-Anchor" href="#在服务端采集客户端的数据"></a> 在服务端采集客户端的数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snmpwalk -v 2c -c public 192.168.100.72  <span class="hljs-keyword">if</span><br></code></pre></td></tr></table></figure><p>能查看则表示部署没问题，可以在web端配置snmp监控了。</p><h3 id="snmp添加"><a class="markdownIt-Anchor" href="#snmp添加"></a> SNMP添加</h3><p>在前面我们主要讲到怎么监控服务器，用的是agent程序。但是如果想监控如打印机、交换机、路由器等设备，前面的方式是不可行的，因为在这些设备上安装完整的操作系统和Zabbix agent是不可能的。<br />所以，这个时候我们需要借助snmp协议来获取网络设备的相关数据。<br />SNMP是英文&quot;Simple Network Management Protocol&quot;的缩写，即“简单网络管理协议&quot;。它属于 TCP/IP 协议中的<strong>应用层协议</strong>，主要用于管理网络设备的协议。</p><ol><li>打开 配置 &gt; 主机 &gt; 创建主机</li><li>填写<ul><li><strong>主机名称:</strong> 必填, 随意填写即可, 但要见名知意, 一般推荐写IP</li><li><strong>可见的名称:</strong> 如果填写则显示该项目, 如果不填写则显示主机名称, 一般推荐写主机名</li><li><strong>群组:</strong> 选择一个你自己创建的群组</li><li><strong>接口:</strong><ul><li><strong>类型:</strong> SNMP</li><li><strong>IP地址:</strong> 这里写的是客户端的IP</li><li><strong>DNS名称:</strong> 一般不用填写</li><li><strong>连接到:</strong> 内网地址够用, 我们选择IP</li><li><strong>端口:</strong> 161, snmp端口默认都是161</li></ul></li></ul></li><li>点击添加, 我们这样就成功添加了一个主机</li></ol><h3 id="添加模板"><a class="markdownIt-Anchor" href="#添加模板"></a> 添加模板</h3><p>Q: 为什么要添加模板?<br />A: 因为不添加模板 <code>可用性</code> 的 <code>ZBX</code> 无法从 <font color="#7f7f7f">灰色</font> 变为 <font color="#9bbb59">绿色</font></p><ol><li>打开 配置 &gt; 主机 &gt; 点击一个主机 &gt; 模板</li><li>点击 选择 , 选中 <strong>Template OS Linux by Zabbix agent</strong> , 点击 更新 后就完成了</li><li>在确认为绿色后就可以删了, 我们后续可以自己去定义模板</li></ol><hr /><h2 id="zabbix-客户端安装"><a class="markdownIt-Anchor" href="#zabbix-客户端安装"></a> zabbix 客户端安装</h2><p>相比于服务端, 客户端的安装非常简单, 通常我们只需要安装zabbix-agent并设置为开机自启动, 然后对配置文件进行一些调整即可实现监控</p><h3 id="安装zabbix库-2"><a class="markdownIt-Anchor" href="#安装zabbix库-2"></a> 安装Zabbix库</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -Uvh https://repo.zabbix.com/zabbix/<span class="hljs-number">5</span>.<span class="hljs-number">0</span>/rhel/<span class="hljs-number">7</span>/x86_64/zabbix-release-<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el7.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-agent"><a class="markdownIt-Anchor" href="#安装zabbix-agent"></a> 安装zabbix agent</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="修改zabbix-agent配置文件"><a class="markdownIt-Anchor" href="#修改zabbix-agent配置文件"></a> 修改zabbix-agent配置文件</h3><p>修改 /etc/zabbix/zabbix_agentd.conf, 并且修改如下四行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Server=Zabbix                                     <span class="hljs-comment"># Server端主机名或IP地址</span><br>ServerActive= Zabbix                              <span class="hljs-comment"># Server端主机名或IP地址</span><br>Hostname=                                         <span class="hljs-comment"># Agent端的主机名</span><br>UnsafeUserParameters=1                            <span class="hljs-comment"># 是否限制用户自定义keys使用特殊字符</span><br></code></pre></td></tr></table></figure><h3 id="设置为开机自启动"><a class="markdownIt-Anchor" href="#设置为开机自启动"></a> 设置为开机自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="查看zabbix-agent日志"><a class="markdownIt-Anchor" href="#查看zabbix-agent日志"></a> 查看zabbix-agent日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail -f /var/log/zabbix/zabbix_agentd.log<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程1 - zabbix简介</title>
      <link href="/posts/26629/"/>
      <url>/posts/26629/</url>
      
        <content type="html"><![CDATA[<h2 id="监控系统简介"><a class="markdownIt-Anchor" href="#监控系统简介"></a> 监控系统简介</h2><h3 id="nagios"><a class="markdownIt-Anchor" href="#nagios"></a> Nagios</h3><p>Nagios 是一款开源的网络监控系统, 它具有强大的功能和灵活的配置选项. Nagios可以监控网络设备、服务器、应用程序和服务的状态, 并提供实时的警报和通知. 它支持自定义插件, 可以根据特定需求进行扩展.</p><h3 id="prometheus"><a class="markdownIt-Anchor" href="#prometheus"></a> Prometheus</h3><p>Prometheus 是一个开源的监控和警报工具, 它专注于以时间序列数据为基础的监控. Prometheus具有灵活的查询语言和强大的数据模型, 可以收集、存储和分析各种指标数据. 它还提供了丰富的可视化选项和警报机制.</p><h3 id="grafana"><a class="markdownIt-Anchor" href="#grafana"></a> Grafana</h3><p>Grafana 是一个开源的数据可视化工具, 它可以与多个监控系统集成, 包括Zabbix、Prometheus等. Grafana提供了仪表盘和图表的创建功能, 可以将监控数据可视化展示, 帮助用户更好地理解和分析数据.</p><h3 id="sensu"><a class="markdownIt-Anchor" href="#sensu"></a> Sensu</h3><p>Sensu 是一个分布式的监控解决方案, 适用于云原生和混合云环境. 它具有灵活的插件系统和可扩展性, 支持多种集成方式和通知渠道. Sensu可以监控基础设施、应用程序和服务, 并提供实时的警报和通知功能.</p><h3 id="icinga"><a class="markdownIt-Anchor" href="#icinga"></a> Icinga</h3><p>Icinga 是一个开源的网络监控系统, 它是 Nagios 的一个分支, 提供了更现代化和用户友好的界面. Icinga具有强大的配置和扩展性, 支持多种监控方式和插件. 它可以监控主机、服务和网络设备, 并提供灵活的报警机制.</p><hr /><h2 id="zabbix介绍"><a class="markdownIt-Anchor" href="#zabbix介绍"></a> zabbix介绍</h2><p>Zabbix 是一款功能强大的开源网络监控系统, 用于监测和追踪 IT 基础设施的状态和性能. 它提供了广泛的监控、报警和可视化功能, 能够监控服务器、网络设备、虚拟机、应用程序等各种资源.</p><p>以下是 Zabbix 的一些主要特点和功能：</p><ol><li>监控功能：Zabbix 可以实时监控各种指标, 包括服务器的 CPU 使用率、内存消耗、网络流量、磁盘空间使用等. 它还支持监控网络设备的连通性、端口状态等信息. Zabbix 可以通过自定义的监控项和模板来监控各种不同类型的资源.</li><li>自动发现和自动注册：Zabbix 可以自动发现网络上的设备和服务, 并将其添加到监控系统中. 它还支持自动注册功能, 允许新的主机自动加入监控系统并开始监控.</li><li>灵活的报警机制：Zabbix 可以根据定义的触发条件发送警报通知, 包括电子邮件、短信、Slack 等多种方式. 它还支持灵活的告警升级和通知的逻辑配置.</li><li>可视化和报表：Zabbix 提供了仪表盘和图表的创建功能, 可以可视化展示监控数据并进行趋势分析. 它还支持创建自定义报表和图表, 以满足用户的特定需求.</li><li>分布式监控：Zabbix 可以通过分布式架构实现高可用性和水平扩展. 它支持多个 Zabbix 服务器之间的数据同步和负载均衡, 以及分布式代理的使用, 使监控系统更加强大和可靠.</li><li>API 和集成：Zabbix 提供了丰富的 API 接口, 可以与其他系统进行集成, 例如自动化工具、配置管理系统等. 它还支持与第三方应用程序和插件的集成, 扩展了其功能和灵活性.</li></ol><p>总体而言, Zabbix 是一款功能丰富、灵活可扩展的监控系统, 适用于各种规模的 IT 环境. 它具有广泛的监控能力、强大的报警机制和可视化功能, 帮助用户实时监控和管理其基础设施, 提高系统的可靠性和性能.</p><hr /><h2 id="zabbix-jmx的特点"><a class="markdownIt-Anchor" href="#zabbix-jmx的特点"></a> zabbix-JMX的特点</h2><h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3><ol><li>针对Java应用程序：JMX专门设计用于监控和管理Java应用程序。它提供了直接访问Java虚拟机（JVM）内部的能力，可以监控JVM的状态、线程、内存使用情况等，并且可以通过MBeans（Managed Beans）暴露自定义的应用程序指标。</li><li>动态配置和管理：JMX提供了动态配置和管理的能力。您可以通过JMX接口动态添加或删除监控项，修改监控参数，以及在运行时对应用程序进行管理和调整。这使得JMX非常适用于需要动态管理和调优的场景。</li><li>强大的生态系统：JMX有一个庞大的生态系统，提供了许多现成的工具和框架来支持JMX的监控和管理。例如，您可以使用JConsole、VisualVM等工具来可视化地监控和管理JMX。</li><li>高度可扩展：JMX支持自定义的MBeans，您可以根据应用程序的需要定义自己的MBeans，并暴露自定义的指标和操作。这使得JMX非常灵活和可扩展。</li></ol><h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3><ol><li>仅限于Java应用程序：JMX主要适用于Java应用程序的监控和管理，对于其他类型的应用程序或设备，可能需要其他监控方案。</li><li>配置复杂性：JMX的配置可能相对复杂，需要在应用程序中正确设置JMX代理和MBeans。此外，需要确保JMX的安全性和访问权限的管理。</li><li>监控粒度限制：JMX主要关注Java应用程序的内部状态和指标，可能无法提供对底层操作系统、网络设备等的直接监控。这可能需要与其他监控方案（如Zabbix代理或SNMP）结合使用。</li></ol><hr /><h2 id="zabbix-snmp的特点"><a class="markdownIt-Anchor" href="#zabbix-snmp的特点"></a> zabbix-snmp的特点</h2><h3 id="优点-2"><a class="markdownIt-Anchor" href="#优点-2"></a> 优点</h3><ol><li>简化的部署：SNMP使用标准协议，通常无需在被监视设备上安装额外的软件，只需启用SNMP服务即可。这使得SNMP的部署相对简单，节省了配置和管理的工作量。</li><li>跨平台支持：SNMP是一种通用的网络管理协议，几乎可以在任何网络设备和操作系统上使用。因此，SNMP能够提供广泛的兼容性和跨平台支持。</li><li>扩展性：SNMP支持各种标准的MIB（Management Information Base），可以监控和管理各种不同类型的网络设备和应用程序。这使得SNMP非常适合大规模和复杂的网络环境。</li><li>资源消耗低：SNMP协议使用UDP传输，相对于Zabbix代理使用的主动TCP连接，它的资源消耗相对较低。这对于资源受限的设备或网络来说是一个优势。</li></ol><h3 id="缺点-2"><a class="markdownIt-Anchor" href="#缺点-2"></a> 缺点</h3><ol><li>有限的监控功能：相对于使用Zabbix代理，使用SNMP的监控功能可能相对有限。SNMP主要用于收集设备的状态信息和性能指标，而Zabbix代理可以提供更丰富的监控功能，如主动监控、自定义参数等。</li><li>安全性问题：由于SNMP使用明文传输，可能存在安全风险。SNMP v3引入了加密和身份验证等安全机制，但在实际部署中，仍需要注意配置和管理SNMP的安全性。</li><li>配置复杂性：SNMP的配置相对于Zabbix代理可能更加复杂，需要正确设置SNMP服务和相关的MIB信息。此外，在大规模网络中管理和配置SNMP可能需要额外的努力和注意事项。</li></ol><p>总结起来，SNMP在部署简单、跨平台支持和扩展性方面具有优势，但在监控功能的丰富性、安全性和配置复杂性方面与Zabbix代理相比存在一些限制。选择使用哪种方式取决于具体的监控需求、设备类型和网络环境等因素。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux速通Wayland - 第一章</title>
      <link href="/posts/4214/"/>
      <url>/posts/4214/</url>
      
        <content type="html"><![CDATA[<p>本教程将用最简单的方式教小白入ArchLinux</p><ul><li>使用Archinstall是速通ArchLinux的最好方法(做软raid别用)</li><li>个人认为wayland是最舒服的桌面, 而且配置简单, 强烈推荐</li></ul><h2 id="事前准备"><a class="markdownIt-Anchor" href="#事前准备"></a> 事前准备</h2><p>选择Arch Linux install medium进入live<br />更新本地库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Sy<br></code></pre></td></tr></table></figure><p>若下载速度变慢可以直接CTRL+C中断然后再次更新, 这时候速度就快了<br />下载archinstall, 下一期出一个不用archinstall的, 不过archinstall更好用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S archinstall<br></code></pre></td></tr></table></figure><h2 id="安装部署"><a class="markdownIt-Anchor" href="#安装部署"></a> 安装部署</h2><p>输入archinstall进入install界面</p><ol><li>Archinstall language默认英文不改, 也可以选择喜欢的语言(无中文)</li><li>Locales 先不用修改, 之后再改也一样</li><li>Mirrors and repositories  镜像存储库<ol><li>Select regions 等待列表出现, 键入/搜索china回车确定选择</li><li>进入Optional repositories 选中multilib并按空格选中, 回车确定</li></ol></li><li>Disk configuration 选择Partitioning<ol><li>若无其他需求选择Use a best-effort default partition layout, 键入空格选择需要的硬盘并回车确定</li><li>按照个人需求选择格式化, 建议选择xfs或者f2fs</li></ol></li><li>Swap不用关, 默认是开的</li><li>Bootloader也是根据个人喜好选择, 个人比较喜欢Limine, 选择grub也可以, 都行</li><li>Hostname, 输入你的主机名</li><li>Authentication<ol><li>Root password Root用户的密码, 建议设置为自己能记住且复杂的, 否则会有好玩的事情发生</li><li>User account 这里我们创建一个用户, 这个用户是常用</li></ol></li><li>Profile 选择type并选择Minimal</li><li>Applications<ol><li>Bluetooth打开</li><li>Audio按照自己喜好选择, 我这里选择了pipewire 因为用起来更舒服</li></ol></li><li>Kernels 请谨慎选择, 建议默认或者zen, 这会对你稍后安装显卡驱动造成影响</li><li>Network configuration选择networkmanager, 其实选哪个都行</li><li>Additional packages, 选择你要加的库</li><li>Timezone键入/搜索shanghai并选定<br />Install<br />安装完成后选择Reboot system重启</li></ol><p>怎么样, archinstall是不是很简单, 连下载到安装用不了几分钟</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> 部署 </tag>
            
            <tag> ArchLinux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈 - 聊聊最近的糟心事</title>
      <link href="/posts/51444/"/>
      <url>/posts/51444/</url>
      
        <content type="html"><![CDATA[<blockquote><p>千万不要用redis的超时来做定时, 我后悔了</p></blockquote><h2 id="服务器问题"><a class="markdownIt-Anchor" href="#服务器问题"></a> 服务器问题</h2><p>不知道从什么时候开始, 家里的服务器全都瘫痪了, 因为家里所有资料存储用的都是mariadb+redis+mongodb<br />所以不知道被什么东西影响了神智的我直接去回溯了数据库, 还有我的文件自动压缩备份也被我清除了, 我下意识觉得那没用, 可我却忘记了哪里存储着几乎从高中到工作的所有灵感与作品.<br />哈哈, 我也不知道为什么我突然这么蠢, 我在恢复之前没有备份, 自动备份脚本每隔30天运行一次, 导致我对当前网站所进行的所有改动全部付之一炬, 从底层开始修改, 细分, 超过140M的代码全都飞灰湮灭了, 哎, 我尝试修复了, 但得到的是一堆乱码, 拿去专门搞数据恢复的店里人家说我私人操作数据恢复导致数据恢复几乎是不可能的事.<br />是的, 其实服务器瘫痪的原因是我的存储服务器(包括了数据库)烂掉了, 我给我3台存储服务器做了raid1, 然后做了MFS, 但是…<br />我现在有些后悔全都做raid1了, 也许当初可以多花些钱多买些盘, 做raid5或者raid10是更好的选择.</p><hr /><h2 id="交换机问题"><a class="markdownIt-Anchor" href="#交换机问题"></a> 交换机问题</h2><p>我买的这台比我年龄都大的Cisco交换机好像有些死了, 丢包实在太严重了, 我怀疑是光口出问题了, 但问题是, 我其实并不想继续用交换机, 我家只有机柜中那十几台服务器, 至于其他的并没有, 但是我又懒得去下架, 这让我很纠结.<br />实际上, 算上现在正在码字吐槽的时间, 距离我发现交换机老化严重的时间差不多过去了9天. 但直到现在我依然懒得去下架交换机, 我意识到这是我懒, 但不知为什么, 每当我进入机房我心底总会出现下回再说.</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SXPSL: 在Centos7上部署秘密实验室教程</title>
      <link href="/posts/24757/"/>
      <url>/posts/24757/</url>
      
        <content type="html"><![CDATA[<p><strong>提示</strong></p><blockquote><p>前言，如果你是用的是Centos9那么就不需要这么麻烦了<br />前言，如果没有特殊需要可以直接使用LGSM，更方便更快捷</p></blockquote><h2 id="更换软件源"><a class="markdownIt-Anchor" href="#更换软件源"></a> 更换软件源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份软件源</span><br>cp -fr /etc/yum.repos.d/ /etc/yum.repos.d.bak<br>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载备用依赖</span><br>yum -y install wget epel-release screen glibc.i686 python3 libselinux libselinux-devel<br>yum -y groupinstall &#x27;Development Tools&#x27;<br></code></pre></td></tr></table></figure><h3 id="添加scl源"><a class="markdownIt-Anchor" href="#添加scl源"></a> 添加scl源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y centos-release-scl centos-release-scl-rh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl.repo</span><br>[centos-sclo-sclo]<br>name=CentOS-7 - SCLo sclo<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/sclo/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo</span><br>[centos-sclo-rh]<br>name=CentOS-7 - SCLo rh<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/rh/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br></code></pre></td></tr></table></figure><h2 id="源码包编译"><a class="markdownIt-Anchor" href="#源码包编译"></a> 源码包编译</h2><h3 id="升级make43"><a class="markdownIt-Anchor" href="#升级make43"></a> 升级make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O - https://ftp.gnu.org/gnu/make/make-4.3.tar.gz | tar -xz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>wget -O - https://mirrors.aliyun.com/gnu/make/make-4.3.tar.gz | tar -xz<br></code></pre></td></tr></table></figure><h3 id="编译安装make43"><a class="markdownIt-Anchor" href="#编译安装make43"></a> 编译安装make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd make-4.3/ &amp;&amp; mkdir build &amp;&amp; cd build<br>../configure &amp;&amp; make -j24 &amp;&amp; make install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">寻找有哪些make</span><br><br>[root@scpsl build]# whereis make<br>make: /usr/bin/make /usr/local/bin/make /usr/share/man/man1/make.1.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换make</span><br>cd /usr/bin/<br>mv make make.bak<br>ln -sv /usr/local/bin/make /usr/bin/make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看make是否为4.3版本</span><br>make -v <br></code></pre></td></tr></table></figure><h2 id="升级gcc11"><a class="markdownIt-Anchor" href="#升级gcc11"></a> 升级gcc11</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有可安装的gcc版本</span><br>yum list devtoolset-*-gcc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装gcc11</span><br>yum -y install devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设定并启动gcc11</span><br>scl enable devtoolset-11 bash &amp;&amp; echo &quot;# gcc11&quot; &gt;&gt; /etc/profile &amp;&amp; echo &quot;source /opt/rh/devtoolset-11/enable&quot; &gt;&gt; /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看gcc是否为11版本</span><br>gcc -v<br></code></pre></td></tr></table></figure><h2 id="升级glibc_333"><a class="markdownIt-Anchor" href="#升级glibc_333"></a> 升级GLIBC_3.33</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载并解压glibc</span><br>wget -O - https://ftp.gnu.org/gnu/libc/glibc-2.33.tar.xz | tar -xJ<br>mkdir glibc-2.33/build &amp;&amp; cd glibc-2.33/build/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空环境变量</span><br>LD_LIBRARY_PATH=&#x27;&#x27;<br>../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --build=x86_64-redhat-linux --enable-kernel=3.10.0 --without-gd --disable-profile --with-selinux<br>make -j # 构建时间较长<br>sed -i &#x27;128i\ &amp;&amp; $name ne &quot;nss_test2&quot;&#x27; ../scripts/test-installation.pl<br>make install<br>make -j28 localedata/install-locales<br>service crond restart<br></code></pre></td></tr></table></figure><h2 id="做好事前准备"><a class="markdownIt-Anchor" href="#做好事前准备"></a> 做好事前准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置主机名</span><br>hostnamectl set-hostname scpsl.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里有好几种方法，鉴于SCPSL更新速度并不快，所以我这里单独对SteamCMD进行安装</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建steamcmd用户设置密码并给予sudo权限</span><br>useradd steamcmd -G wheel &amp;&amp; echo &quot;steamcmd&quot; | sudo passwd --stdin steamcmd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建scpsl用户并设置密码</span><br>useradd scpsl -G wheel &amp;&amp; echo &quot;scpsl&quot; | sudo passwd --stdin scpsl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SteamCMD是用于安装与更新Steam专用服务端的命令行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到SteamCMD用户，下载SteamCMD并解压</span><br>su - steamcmd<br>curl -sqL &quot;https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz&quot; | tar zxf -<br></code></pre></td></tr></table></figure><h2 id="部署scpsl服务器"><a class="markdownIt-Anchor" href="#部署scpsl服务器"></a> 部署SCPSL服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动steamcmd</span><br>./steamcmd.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">匿名登陆</span><br>login anonymous<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装scpsl服务端</span><br>app_update 996560<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将游戏目录复制到scpsl用户目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里建议你自己写一个自动化脚本来实现检测更新</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">正常流程不应该是复制过去，但是我这里为了方便就这么干了，你服不服气吧</span><br>sudo cp -fr ./Steam/steamapps/common/SCP\ Secret\ Laboratory\ Dedicated\ Server/* /home/scpsl/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到scpsl目录</span><br>su - scpsl # 密码是scpsl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以7777端口启动服务器</span><br>./LocalAdmin 7777<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> SCPSL </tag>
            
            <tag> SXPSL </tag>
            
            <tag> 开服 </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 秘密实验室 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM完美配置教程</title>
      <link href="/posts/60432/"/>
      <url>/posts/60432/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文使用的NVM为Windows版本的<strong>nvm-noinstall.zip</strong></p></blockquote><h2 id="下载nvm"><a class="markdownIt-Anchor" href="#下载nvm"></a> 下载NVM</h2><p>去Github或者镜像站查找并下载<a href="https://github.com/coreybutler/nvm-windows/releases">NVM for windows</a></p><h2 id="安装nvm"><a class="markdownIt-Anchor" href="#安装nvm"></a> 安装NVM</h2><p>打开<strong>nvm-noinstall.zip</strong>并解压至自己的目录<br />运行install.cmd(不运行也可以, 我就没有运行, 因为我要自己配置环境变量)</p><h3 id="写配置文件"><a class="markdownIt-Anchor" href="#写配置文件"></a> 写配置文件</h3><p>打开或创建settings.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">root: D:\path\dir\NVM<br>path: D:\path\dir\NVM\NodeJS<br>arch: 64<br>proxy: none<br></code></pre></td></tr></table></figure><p>这里要对对照自己的NVM安装路径进行放置, 并且创建相应的文件</p><h3 id="配环境变量"><a class="markdownIt-Anchor" href="#配环境变量"></a> 配环境变量</h3><p>此电脑 &gt; 属性 &gt; 高级系统设置 &gt; 环境变量<br />在系统变量内部<code>新建</code>两个变量</p><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">变量值</th></tr></thead><tbody><tr><td style="text-align:center">NVM_HOME</td><td style="text-align:center">D:\path\dir\NVM</td></tr><tr><td style="text-align:center">NVM_SYMLINK</td><td style="text-align:center">D:\path\dir\NVM\NodeJS</td></tr></tbody></table><p>然后在 系统变量 内部的 path 添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs npm">D:\path\dir\NVM<br>%NVM_HOME%<br>%NVM_SYMLINK%<br></code></pre></td></tr></table></figure><h3 id="验证安装是否成功"><a class="markdownIt-Anchor" href="#验证安装是否成功"></a> 验证安装是否成功</h3><p>打开cmd或者powershell</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nvm -v<br><span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><hr /><h2 id="配置nodejs"><a class="markdownIt-Anchor" href="#配置nodejs"></a> 配置Nodejs</h2><p>在你的<code>C:\Users\username</code>下创建一个.npmrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs npm">prefix=D:\path\dir\NVM\node_global<br>cache=D:\path\dir\NVM\node_cache<br></code></pre></td></tr></table></figure><p>跟上面一样, 这里也要创建文件, 确保配置文件内的路径与你的目录是一致的</p><h3 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h3><p>在系统变量内部<code>新建</code>两个变量</p><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">变量值</th></tr></thead><tbody><tr><td style="text-align:center">NODE_PATH</td><td style="text-align:center">D:\path\dir\NVM\node_global\node_modules</td></tr></tbody></table><p>然后在 系统变量 内部的 path 添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs npm">%NODE_PATH%<br>D:\path\dir\NVM\node_global<br></code></pre></td></tr></table></figure><hr /><h2 id="安装node"><a class="markdownIt-Anchor" href="#安装node"></a> 安装Node</h2><p>打开CMD或者Powershell</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 列出所有的可下载版本<br>nvm list available<br><br># 使用NVM下载安装<span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span>版本<br>nvm install <span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span><br><br># 使用<span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span>版本<br>use <span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="配置全局与缓存"><a class="markdownIt-Anchor" href="#配置全局与缓存"></a> 配置全局与缓存</h3><p>其实这一步就是上面的.npmrc, 这里为了避免万一就重复一次, 只是方式不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs npm">npm config set prefix &quot;D:\path\dir\NVM\node_global&quot;<br>npm config set cache &quot;D:\path\dir\NVM\node_cache&quot;<br></code></pre></td></tr></table></figure><h3 id="检查node是否安装成功"><a class="markdownIt-Anchor" href="#检查node是否安装成功"></a> 检查Node是否安装成功</h3><p>打开cmd或者powershell</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br>npm -v<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> NVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> NodeJS </tag>
            
            <tag> Node </tag>
            
            <tag> nvm </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Centos的GLIB2升级到GLIB3</title>
      <link href="/posts/53385/"/>
      <url>/posts/53385/</url>
      
        <content type="html"><![CDATA[<h2 id="更换软件源"><a class="markdownIt-Anchor" href="#更换软件源"></a> 更换软件源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份软件源</span><br>cp -fr /etc/yum.repos.d/ /etc/yum.repos.d.bak<br>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载备用依赖</span><br>yum -y install wget epel-release screen glibc.i686 python3 libselinux libselinux-devel<br>yum -y groupinstall &#x27;Development Tools&#x27;<br></code></pre></td></tr></table></figure><h3 id="添加scl源"><a class="markdownIt-Anchor" href="#添加scl源"></a> 添加scl源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y centos-release-scl centos-release-scl-rh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl.repo</span><br>[centos-sclo-sclo]<br>name=CentOS-7 - SCLo sclo<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/sclo/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo</span><br>[centos-sclo-rh]<br>name=CentOS-7 - SCLo rh<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/rh/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br></code></pre></td></tr></table></figure><h2 id="源码包编译"><a class="markdownIt-Anchor" href="#源码包编译"></a> 源码包编译</h2><h3 id="升级make43"><a class="markdownIt-Anchor" href="#升级make43"></a> 升级make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O - https://ftp.gnu.org/gnu/make/make-4.3.tar.gz | tar -xz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>wget -O - https://mirrors.aliyun.com/gnu/make/make-4.3.tar.gz | tar -xz<br></code></pre></td></tr></table></figure><h3 id="编译安装make43"><a class="markdownIt-Anchor" href="#编译安装make43"></a> 编译安装make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd make-4.3/ &amp;&amp; mkdir build &amp;&amp; cd build<br>../configure &amp;&amp; make -j24 &amp;&amp; make install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">寻找有哪些make</span><br><br>[root@scpsl build]# whereis make<br>make: /usr/bin/make /usr/local/bin/make /usr/share/man/man1/make.1.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换make</span><br>cd /usr/bin/<br>mv make make.bak<br>ln -sv /usr/local/bin/make /usr/bin/make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看make是否为4.3版本</span><br>make -v <br></code></pre></td></tr></table></figure><h2 id="升级gcc11"><a class="markdownIt-Anchor" href="#升级gcc11"></a> 升级gcc11</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有可安装的gcc版本</span><br>yum list devtoolset-*-gcc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装gcc11</span><br>yum -y install devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设定并启动gcc11</span><br>scl enable devtoolset-11 bash &amp;&amp; echo &quot;# gcc11&quot; &gt;&gt; /etc/profile &amp;&amp; echo &quot;source /opt/rh/devtoolset-11/enable&quot; &gt;&gt; /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看gcc是否为11版本</span><br>gcc -v<br></code></pre></td></tr></table></figure><h2 id="升级glibc_333"><a class="markdownIt-Anchor" href="#升级glibc_333"></a> 升级GLIBC_3.33</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载并解压glibc</span><br>wget -O - https://ftp.gnu.org/gnu/libc/glibc-2.33.tar.xz | tar -xJ<br>mkdir glibc-2.33/build &amp;&amp; cd glibc-2.33/build/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空环境变量</span><br>LD_LIBRARY_PATH=&#x27;&#x27;<br>../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --build=x86_64-redhat-linux --enable-kernel=3.10.0 --without-gd --disable-profile --with-selinux<br>make -j # 构建时间较长<br>sed -i &#x27;128i\ &amp;&amp; $name ne &quot;nss_test2&quot;&#x27; ../scripts/test-installation.pl<br>make install<br>make -j28 localedata/install-locales<br>service crond restart<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
          <category> GLIB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> 教程 </tag>
            
            <tag> 升级 </tag>
            
            <tag> GLIB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
