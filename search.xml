<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux网络管理 - ip</title>
      <link href="/posts/79bde3d2/"/>
      <url>/posts/79bde3d2/</url>
      
        <content type="html"><![CDATA[<h2 id="ip地址的组成"><a class="markdownIt-Anchor" href="#ip地址的组成"></a> IP地址的组成</h2><p>IP地址由4部分数字组成，每部分数字对应于8位二进制数字，各部分之间用小数点分开 这是点分2进制 .每如果换算为10进制我们称为点分10进制个ip地址由两部分组成网络地址(NetID)和主机地址(HostID).网络地址表示其属于互联网中的哪一个网络，而主机地址则表示其属于该网络中的哪一台主机.</p><h3 id="a类地址"><a class="markdownIt-Anchor" href="#a类地址"></a> A类地址</h3><p>A类地址的范围其实是从1-126之间。<br />如：10.0.0.1, 第一段号码为网络号码, 剩下的三段号码为本地计算机的号码. 转换为2进制来说, 一个A类IP地址由<strong>1字节的网络地址</strong>和<strong>3字节主机地址</strong>组成，网络地址的最高位必须是“0”, 地址范围从0.0.0.1 到126.0.0.0。可用的A类网络有126个，每个网络能容纳1亿多个主机（2的24次方的-2主机数目）。<br />以子网掩码来进行区别：：255.0.0.0<br /><code>127.0.0.0 到 127.255.255.255</code>是保留地址，用做循环测试用的</p><h3 id="b类地址"><a class="markdownIt-Anchor" href="#b类地址"></a> B类地址</h3><p>B类地址：范围从128-191，如172.168.1.1，第一和第二段号码为网络号码，剩下的2段号码为本地计算机的号码。转换为2进制来说，一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，网络地址的最高位必须是“10”，地址范围从128.0.0.0到191.255.255.255。可用的B类网络有16384个，每个网络能容纳6万多个主机 。(2的16次方-2)<br />以子网掩码来进行区别：255.255.0.0<br /><code>169.254.0.0 到 169.254.255.255</code>是保留地址。如果你的IP地址是自动获取IP地址，而你在网络上又没有找到可用的DHCP服务器，这时你将会从169.254.0.0到169.254.255.255中临时获得一个IP地址。</p><h3 id="c类地址"><a class="markdownIt-Anchor" href="#c类地址"></a> C类地址</h3><p>C类地址：范围从192-223，如192.168.1.1，第一，第二，第三段号码为网络号码，剩下的最后一段号码为本地计算机的号码。转换为2进制来说，一个C类IP地址由3字节的网络地址和1字节的主机地址组成，网络地址的最高位必须是“110”。范围从192.0.0.0到223.255.255.255。C类网络可达209万余个，每个网络能容纳254个主机。(2的8次方-2)<br />以子网掩码来进行区别： 255.255.255.0</p><h3 id="d类地址"><a class="markdownIt-Anchor" href="#d类地址"></a> D类地址</h3><p>D类地址：范围从224-239，D类IP地址第一个字节以“1110”开始，它是一个专门保留的地址。它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中。多点广播地址用来一次寻址一组计算机，它标识共享同一协议的一组计算机。<br />224.0.0.0-239.255.255.255 组播地址</p><h3 id="e类地址"><a class="markdownIt-Anchor" href="#e类地址"></a> E类地址</h3><p>E类地址：范围从240-254，以“11110”开始，为将来使用保留。 全零（“0．0．0．0”）地址对应于当前主机。全“1”的IP地址（“255．255．255．255”）是当前子网的广播地址。<br />240.0.0.0-255.255.255.254 保留地址</p><h2 id="ip地址转换"><a class="markdownIt-Anchor" href="#ip地址转换"></a> IP地址转换</h2><p>ip地址: 202.197.119.110<br />若掩码为:255.255.255.0 求网络号和主机号<br />ip转换为2进制 1100 1010. 1100 0101. 0111 0111. 0110 1110<br />子网掩码2进制 1111 1111. 1111 1111. 1111 1111. 0000 0000<br />相与运算 1100 1010. 1100 0101. 0111 0111. 0000 0000 网络号<br />ip转换为2进制 1100 1010. 1100 0101. 0111 0111. 0110 1110<br />子网掩码取反 0000 0000. 0000 0000. 0000 0000. 1111 1111<br />相与运算 0000 0000. 0000 0000. 0000 0000. 0110 1110 主机号<br />ip 202.197.118.110/24 是否与上一个ip再统一网段? 求网络号 相同则同一网段<br />ip转换为2进制 1100 101. 1100 0101. 0111 0110. 0110 1110<br />求得网络号 1100 1010.1100 0101.0111 0110. 0000 0000<br />求得结果 网络号不同 所以不再同一网络中</p><h2 id="子网掩码"><a class="markdownIt-Anchor" href="#子网掩码"></a> 子网掩码</h2><h3 id="私有地址"><a class="markdownIt-Anchor" href="#私有地址"></a> 私有地址</h3><p>所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址<br />在A类地址中，10.0.0.0到10.255.255.255是私有地址/8<br />在B类地址中，172.16.0.0到172.31.255.255是私有地址。/16<br />在C类地址中，192.168.0.0到192.168.255.255是私有地址。/24</p><h2 id="不同网段通信"><a class="markdownIt-Anchor" href="#不同网段通信"></a> 不同网段通信</h2><h3 id="网关服务器"><a class="markdownIt-Anchor" href="#网关服务器"></a> 网关服务器</h3><p>通过路由(网关)通信<br />准备3台虚拟机 作路由的虚拟机2块网卡 其他的单网卡<br />设置ip地址<br /><strong>虚拟机1:</strong> 192.168.100.201/24 网关指向 192.168.100.254<br /><strong>路由:</strong></p><ul><li><strong>ens33:</strong> 192.168.100.254/24</li><li><strong>ens37:</strong> 10.10.10.254/24<br /><strong>虚拟机2:</strong> 10.10.10.100/24 网关指向 10.10.10.254<br /><strong>路由:</strong> 开启转发功能<br />临时:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 0 为关闭转发功能</span><br><span class="hljs-comment"># 1 为开启转发功能</span><br><span class="hljs-comment"># 该文件为内核参数， 只能用echo 1 &gt; 覆盖</span><br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>永久：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /usr/lib/sysctl.d/00-system.conf <br>net.ipv4.ip_forward = 1<br></code></pre></td></tr></table></figure><h3 id="互设静态路由"><a class="markdownIt-Anchor" href="#互设静态路由"></a> 互设静态路由</h3><h3 id="一半网关一半路由"><a class="markdownIt-Anchor" href="#一半网关一半路由"></a> 一半网关一半路由</h3><p>网关得打开路由转发功能</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络管理 - tcpip</title>
      <link href="/posts/dbd835eb/"/>
      <url>/posts/dbd835eb/</url>
      
        <content type="html"><![CDATA[<h2 id="tcpip包"><a class="markdownIt-Anchor" href="#tcpip包"></a> TCP/IP包</h2><h3 id="什么是osi参考模型"><a class="markdownIt-Anchor" href="#什么是osi参考模型"></a> 什么是OSI参考模型</h3><ol><li>物理层（Physical Layer）：物理层定义了传输介质和设备之间的物理连接方式，包括电压、电缆规范、传输速率等。它处理比特流的传输。</li><li>数据链路层（Data Link Layer）：数据链路层负责在相邻节点之间可靠传输数据帧，通过物理地址（MAC地址）识别设备。它提供了一种错误检测和纠正的机制。</li><li>网络层（Network Layer）：网络层负责在网络中选择最佳路径并进行分组转发。它使用逻辑地址（IP地址）来标识设备和网络。</li><li>传输层（Transport Layer）：传输层提供端到端的可靠数据传输，确保数据的完整性、有序性和可靠性。它使用端口号来标识应用程序之间的通信。</li><li>会话层（Session Layer）：会话层建立、管理和终止应用程序之间的会话连接。它提供了数据交换的控制和同步机制。</li><li>表示层（Presentation Layer）：表示层负责数据的格式转换、加密和压缩，以确保不同系统之间的数据能够正确解释和显示。</li><li>应用层（Application Layer）：应用层是最高层，它提供了用户和应用程序之间的接口，包括文件传输、电子邮件、远程登录等。</li></ol><h3 id="七层osi参考模型的特性"><a class="markdownIt-Anchor" href="#七层osi参考模型的特性"></a> 七层OSI参考模型的特性</h3><p>每个层次都有特定的功能和协议，数据在从一个层次传递到另一个层次时会经过相应的封装和解封装过程。OSI参考模型的设计使得不同厂商的设备和软件能够互操作，从而实现跨平台和跨网络的通信。</p><h3 id="七层osi参考模型的总结-tcp-ip"><a class="markdownIt-Anchor" href="#七层osi参考模型的总结-tcp-ip"></a> 七层OSI参考模型的总结 (TCP / IP)</h3><p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />TCP / IP<br />应用层： 它只负责产生相应格式的数据 ssh ftp nfs cifs dns http smtp pop3<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />传输层： 定义数据传输的两种模式：<br />TCP（传输控制协议：面向连接，可靠的，效率相对不高）<br />UDP（用户数据报协议：非面向连接，不可靠的，但效率高）<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />网络层： 连接不同的网络如以太网、令牌环网<br />IP （路由，分片） 、ICMP、 IGMP<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />数据链路层：以太网传输<br />ARP ( 地址解析协议，作用是将IP解析成MAC )<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br />物理层： 主要任务是规定各种传输介质和接口与传输信号相关的一些特性<br />－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p><h2 id="tcpdump"><a class="markdownIt-Anchor" href="#tcpdump"></a> tcpdump</h2><p>tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息</p><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th><th></th></tr></thead><tbody><tr><td>tcpdump</td><td>-i &lt;interface&gt;</td><td>指定网络接口</td><td>通过指定网络接口来捕获网络数据包</td><td></td></tr><tr><td>tcpdump</td><td>-n</td><td>禁用主机名解析</td><td>显示IP地址而不是主机名</td><td></td></tr><tr><td>tcpdump</td><td>-c &lt;count&gt;</td><td>捕获指定数量的数据包后停止</td><td>指定捕获的数据包数量</td><td></td></tr><tr><td>tcpdump</td><td>-s &lt;snaplen&gt;</td><td>指定数据包的最大捕获长度</td><td>设置数据包的最大捕获长度，以字节为单位</td><td></td></tr><tr><td>tcpdump</td><td>-w &lt;file&gt;</td><td>将捕获的数据包写入文件</td><td>将捕获的数据包保存到指定的文件中</td><td></td></tr><tr><td>tcpdump</td><td>-r &lt;file&gt;</td><td>从文件中读取数据包</td><td>从指定的文件中读取数据包进行分析</td><td></td></tr><tr><td>tcpdump</td><td>-A</td><td>以ASCII格式显示数据包内容</td><td>以ASCII格式显示数据包的内容</td><td></td></tr><tr><td>tcpdump</td><td>-X</td><td>以十六进制和ASCII格式显示数据包内容</td><td>以十六进制和ASCII格式显示数据包的内容</td><td></td></tr><tr><td>tcpdump</td><td>-vvv</td><td>显示详细的调试信息</td><td>显示更详细的调试信息，包括更多的协议细节</td><td></td></tr><tr><td>tcpdump</td><td>-e</td><td>显示以太网头部信息</td><td>显示以太网帧的头部信息</td><td></td></tr><tr><td>tcpdump</td><td>-q</td><td>简化输出</td><td>以简化的格式输出结果</td><td></td></tr><tr><td>tcpdump</td><td>-S</td><td>以绝对序号显示数据包</td><td>以绝对序号显示数据包的序号</td><td></td></tr><tr><td>tcpdump</td><td>-t</td><td>不显示时间戳</td><td>不显示数据包的时间戳</td><td></td></tr><tr><td>tcpdump</td><td>-l</td><td>行缓冲输出</td><td>使用行缓冲输出模式</td><td></td></tr><tr><td>tcpdump</td><td>-B &lt;buffer_size&gt;</td><td>设置捕获缓冲区大小</td><td>设置捕获数据包的缓冲区大小，以字节为单位</td><td></td></tr><tr><td>tcpdump</td><td>-F &lt;file&gt;</td><td>从文件中读取过滤条件</td><td>从指定的文件中读取过滤条件</td><td></td></tr><tr><td>tcpdump</td><td>-G &lt;rotate_seconds&gt;</td><td>自动循环文件</td><td>捕获数据包到一个文件一段时间后，自动切换到新文件</td><td></td></tr><tr><td>tcpdump</td><td>-W &lt;file_count&gt;</td><td>设置循环文件的数量</td><td>设置循环文件的数量，循环文件的命名格式为&lt;file&gt;.&lt;number&gt;</td><td></td></tr><tr><td>tcpdump</td><td>-L</td><td>列出可用的网络接口</td><td>列出系统上可用的网络接口</td><td></td></tr><tr><td>tcpdump</td><td>-E &lt;file&gt;</td><td>从文件中读取扩展信息</td><td>从指定的文件中读取扩展信息</td><td></td></tr><tr><td>tcpdump</td><td>-v</td><td>显示详细信息</td><td>显示更详细的信息，包括更多的协议细节</td><td></td></tr><tr><td>tcpdump</td><td>-V</td><td>显示版本信息</td><td>显示tcpdump的版本信息</td><td></td></tr><tr><td>tcpdump</td><td>-h</td><td>显示帮助信息</td><td>显示tcpdump的帮助信息</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><hr /><h2 id="数据链路层"><a class="markdownIt-Anchor" href="#数据链路层"></a> 数据链路层</h2><h3 id="arp协议"><a class="markdownIt-Anchor" href="#arp协议"></a> ARP协议</h3><p>ARP协议是“Address Resolution Protocol”（地址解析协议）的缩写。<br />ARP地址解析协议用于将计算机的网络地址（IP地址32位）转化为物理地址（MAC地址48位）[RFC826]。ARP协议是属于数据链路层的协议，在以太网中的数据帧从一个主机到达网内的另一台主机是根据48位的以太网地址（硬件地址）来确定接口的，而不是根据32位的IP地址。内核（如驱动）必须知道目的端的硬件地址才能发送数据</p><ol><li>应用程序构造数据包，该示例是产生ICMP包，被提交给内核（网络驱动程序）；</li><li>内核检查是否能够转化该IP地址为MAC地址，也就是在本地的ARP缓存中查看IP-MAC对应表[1]；</li><li>如果存在该IP-MAC对应关系，那么跳到步骤7；如果不存在该IP-MAC对应关系，那么接续下面的步骤；</li><li>内核进行ARP广播，目的地的MAC地址是FF-FF-FF-FF-FF-FF，ARP命令类型为REQUEST（1），其中包含有自己的MAC地址；</li><li>当192.168.1.2主机接收到该ARP请求后，将源主机的IP地址及MAC更新至自己的arp缓冲中，然后发送一个ARP的REPLY（2）命令，其中包含自己的MAC地址；</li><li>本地获得192.168.1.2主机的IP-MAC地址对应关系，并保存到ARP缓存中；</li><li>内核将把IP转化为MAC地址，然后封装在以太网头结构中，再把数据发送出去；</li></ol><p>使用arp-a命令就可以查看本地的ARP缓存内容，所以，执行一个本地的PING命令后，ARP缓存就会存在一个目的IP的记录了。当然，如果你的数据包是发送到不同网段的目的地，那么就一定存在一条网关的IP-MAC地址对应的记录</p><h3 id="以太网报头"><a class="markdownIt-Anchor" href="#以太网报头"></a> 以太网报头</h3><p>以太网报头中的前两个字段是以太网的源地址和目的地址。目的地址为全F的特殊地址是广播地址。电缆上的所有以太网接口都要接收广播的数据帧<br />两个字节长的以太网帧类型表示后面数据的类型。对于ARP请求或应答来说，该字段的值为0x0806<br />hardware (硬件)和protocol (协议)用来描述ARP分组中的各个字段。例如，一个ARP请求分组询问协议地址（这里是IP地址）对应的硬件地址（这里是以太网地址）</p><ul><li>硬件类型字段表示硬件地址的类型。它的值为1即表示以太网地址。</li><li>协议类型字段表示要映射的协议地址类型。它的值为0x0800即表示IP地址</li><li>硬件地址长度和协议地址长度分别指出硬件地址和协议地址的长度，以字节为单位。对于以太网上IP地址的ARP请求或应答来说，它们的值分别为6和4。 各占用1字节</li><li>op操作字段指出四种操作类型，它们是ARP请求（值为1）、ARP应答（值为2）、RARP请求（值为3）和R ARP应答（值为4）。</li><li>接下来的四个字段是发送端的硬件地址（在本例中是以太网地址）、发送端的协议地址（IP地址）、</li><li>目的端的硬件地址和目的端的协议地址。注意，这里有一些重复信息：在以太网的数据帧报头中和ARP请求数据帧中都有发送端的硬件地址。<br />对于一个ARP请求来说，除目的端硬件地址外的所有其他的字段都有填充值。当系统收到一份目的端为本机的ARP请求报文后，它就把硬件地址填进去，然后用两个目的端地址分别替换两个发送端地址，并把操作字段置为2，最后把它发送回去。</li></ul><h4 id="rarp"><a class="markdownIt-Anchor" href="#rarp"></a> RARP</h4><p>RARP即反向地址转换协议。<br />反向地址转换协议（RARP：Reverse Address Resolution Protocol） 反向地址转换协议（RARP）允许局域网的物理机器从网关服务器的 ARP 表或者缓存上请求其 IP 地址。网络管理员在局域网网关路由器里创建一个表以映射物理地址（MAC）和与其对应的 IP 地址。当设置一台新的机器时，其 RARP 客户机程序需要向路由器上的 RARP 服务器请求相应的 IP 地址。假设在路由表中已经设置了一个记录，RARP 服务器将会返回 IP 地址给机器，此机器就会存储起来以便日后使用</p><h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3><ol><li>IP冲突的本质是什么？<br />我们知道，如果网络中存在相同IP地址的主机的时候，就会报告出IP地址冲突的警告。这是怎么产生的呢？<br />比如某主机B规定IP地址为192.168.0.1，如果它处于开机状态，那么其他机器A更<br />改IP地址为192.168.0.1就会造成IP地址冲突。其原理就是：主机A在连接网络（或更改IP地址）的时候就会向网络发送ARP包广播自己的IP地址，也就是freearp。如果网络中存在相同IP地址的主机B，那么B就会通过ARP来reply该地址，当A接收到这个reply后，A就会跳出IP地址冲突的警告，当然B也会有警告</li><li>arp欺骗<br />ARP协议并不只在发送了ARP请求才接收ARP应答。当计算机接收到ARP应答数据包的时候，就会对本地的ARP缓存进行更新，将应答中的IP和MAC地址存储在ARP缓存中。因此，在上面的假设网络中，B向A发送一个自己伪造的ARP应答，而这个应答中的数据为发送方IP地址是192.168.10.3（C的IP地址），MAC地址是DD-DD-DD-DD-DD-DD（C的MAC地址本来应该是CC-CC-CC-CC-CC-CC，这里被伪造了）。当A接收到B伪造的ARP应答，就会更新本地的ARP缓存，将本地的IP-MAC对应表更换为接收到的数据格式，由于这一切都是A的系统内核自动完成的，A可不知道被伪造了。</li></ol><hr /><h2 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h2><h3 id="ip协议"><a class="markdownIt-Anchor" href="#ip协议"></a> ip协议</h3><p>IP是英文Internet Protocol（网络之间互连的协议）的缩写，中文简称为“网协”，也就是为计算机网络相互连接进行通信而设计的协议。</p><h4 id="ip协议简介"><a class="markdownIt-Anchor" href="#ip协议简介"></a> IP协议简介:</h4><p>IP协议是TCP/IP协议族中最为核心的协议。所有TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输。</p><h4 id="ip协议特点"><a class="markdownIt-Anchor" href="#ip协议特点"></a> IP协议特点</h4><ul><li>不可靠（unreliable）: 它不能保证IP数据报能成功地到达目的地。IP仅提供尽力而为的传输服务。如果发生某种错误时，如某个路由器暂时用完了缓冲区， IP有一个简单的错误处理算法：丢弃该数据报，然后发送ICMP消息报给信源端。任何要求的可靠性必须由上层来提供（如TCP）。</li><li>无连接（connectionless）： 这个术语的意思是IP并不维护任何关于后续数据报的状态信息。每个数据报的处理是相互独立的。这也说明， IP数据报可以不按发送顺序接收。如果一信源向相同的信宿发送两个连续的数据报（先是A，然后是B），每个数据报都是独立地进行路由选择，可能选择不同的路线，因此B可能在A到达之前先到达。</li></ul><h4 id="ip协议首部-20字节"><a class="markdownIt-Anchor" href="#ip协议首部-20字节"></a> IP协议首部 20字节</h4><p>IP数据报首部的固定部分中的各字段:</p><ol><li>版本　占4位，指IP协议的版本。通信双方使用的IP协议版本必须一致。目前广泛使用的IP协议版本号为4（即IPv4）。关于IPv6</li><li>首部长度　占4位，可表示的最大十进制数值是15(1111)则表示60字节头长度.最常用的首部长度就是20字节（即首部长度为0101）</li><li>服务类型 占8位，区分服务 用来获得更好的服务. 高层协议通过服务类型字段告诉ip处理设备,应该如何处理这个数据包,该字段占一个字节长(包括3bit优先级[0~7最高] 第4bit延迟 吞吐量标志第5bit 可靠性标志第6个bit 第7bit最小开销标志)</li><li>总长度　总长度指首部和数据之和的长度，单位为字节。总长度字段为16位，因此数据报的最大长度为2^16-1=65535字节, 在IP层下面的每一种数据链路层都有自己的帧格式，其中包括帧格式中的数据字段的最大长度，这称为最大传送单元MTU(Maximum Transfer Unit)。当一个数据报封装成链路层的帧时，此数据报的总长度（即首部加上数据部分）一定不能超过下面的数据链路层的MTU值。</li><li>标识(identification)　占16位。IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将此值赋给标识字段。但这个“标识”并不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的MTU而必须分片时，这个标识字段的值就被复制到所有的数据报的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。</li><li>标志(flag)　包分片标识 占3位，但目前只有2位有意义。第一位保留<ul><li>标志字段中的最低位记为MF(More Fragment)。MF=1即表示后面“还有分片”的数据报。MF=0表示这已是若干数据报片中的最后一个。</li><li>标志字段中间的一位记为DF(Don’t Fragment)，意思是“不能分片”。只有当DF=0时才允许分片。</li></ul></li><li>片偏移　占13位 表示当前的这个数据分片在原有数据包中所处的位置,有了这个字段就便于目标主机一片一片的重组数据包</li><li>生存时间　占8位，生存时间字段常用的的英文缩写是TTL(Time To Live),每记过一个路由器 该值就减1,当TTL值为0时,路由器就会丢弃该数据,并且向发包主机返回一个报警信息.后来把TTL字段的功能改为“跳数限制&quot;.TTL的意义是指明数据报在网络中至多可经过多少个路由器。显然，数据报在网络上经过的路由器的最大数值是255.若把TTL的初始值设为1，就表示这个数据报只能在本局域网中传送.这种机制避免了数据包在网络中无线的循环</li><li>协议　占8位，协议字段指出此数据报携带上层的数据是使用何种协议.比如 tcp 该值为6 udp该值17 1表示为ICMP协议， 2表示为IGMP协议</li><li>首部检验和　占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和（一些字段，如生存时间、标志、片偏移等都可能发生变化）。</li><li>源地址　占32位。</li><li>目的地址　占32位</li></ol><h4 id="ip分片"><a class="markdownIt-Anchor" href="#ip分片"></a> IP分片</h4><p>超过1500 byte，发送端分片，接收端重组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看eth0网卡</span><br>[root@server2 ~]<span class="hljs-comment"># ip link show eth0</span><br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000<br><span class="hljs-built_in">link</span>/ether 00:0c:29:21:4d:a6 brd ff:ff:ff:ff:ff:ff<br><br><span class="hljs-comment"># 使用tcpdump 对 eth0 网卡进行抓包 并写入 fragment.txt 文件</span><br>[root@server ~]<span class="hljs-comment"># tcpdump -i eth0 -nn -s 1500 icmp and host 192.168.116.100 -w fragment.txt</span><br><span class="hljs-comment"># 发送 一次 4000 大小的数据包到 192.168.0.100  </span><br>[root@server ~]<span class="hljs-comment"># ping -c 1 -s 4000 192.168.0.100</span><br>PING 192.168.0.100 (192.168.0.100) 4000(4028) bytes of data.<br>4008 bytes from 192.168.0.100: icmp_seq=1 ttl=128 time=0.463 ms<br></code></pre></td></tr></table></figure><p>因为 mtu 超过了1500 所以会进行分片</p><h4 id="利用ip碎片攻击"><a class="markdownIt-Anchor" href="#利用ip碎片攻击"></a> 利用ip碎片攻击</h4><p>IP首部有两个字节表示整个IP数据包的长度，所以IP数据包最长只能为0xFFFF，就是65535字节。如果有意发送总长度超过65535的IP碎片，一些老的系统内核在处理的时候就会出现问题，导致崩溃或者拒绝服务。另外，如果分片之间偏移量经过精心构造，一些系统就无法处理，导致死机。所以说，漏洞的起因是出在重组算法上。下面我们逐个分析一些著名的碎片攻击程序，来了解如何人为制造IP碎片来攻击系统</p><blockquote><p>ping of death是利用ICMP协议的一种碎片攻击。攻击者发送一个长度超过65535的Echo Request数据包，目标主机在重组分片的时候会造成事先分配的65535字节缓冲区溢出，系统通常会崩溃或挂起。ping不就是发送ICMP Echo Request数据包的吗？让我们尝试攻击一下吧！不管IP和ICMP首部长度了，数据长度反正是多多益善，就65535吧，发送一个包：<br />ping -c 1 -s 65535 192.168.0.1<br />Error: packet size 65535 is too large. Maximum is 65507<br />不走运，看来Linux自带的ping不允许我们做坏事。<br />65507是它计算好的：65535-20-8=65507。Win2K下的ping更抠门，数据只允许65500大小。所以你必须找另外的程序来发包，但是目前新版本的操作系统已经搞定这个缺陷了,还有jolt2 和 teardrop</p></blockquote><h4 id="如何阻止ip碎片攻击"><a class="markdownIt-Anchor" href="#如何阻止ip碎片攻击"></a> 如何阻止IP碎片攻击</h4><ul><li>Windows系统请打上最新的Service Pack，目前的Linux内核已经不受影响。</li><li>如果可能，在网络边界上禁止碎片包通过，或者用iptables限制每秒通过碎片包的数目。</li><li>如果防火墙有重组碎片的功能，请确保自身的算法没有问题，否则被DoS就会影响整个网络。</li><li>Win2K系统中，自定义IP安全策略，设置 “碎片检查”</li></ul><h3 id="icmp协议"><a class="markdownIt-Anchor" href="#icmp协议"></a> icmp协议</h3><h4 id="icmp协议简介"><a class="markdownIt-Anchor" href="#icmp协议简介"></a> ICMP协议简介</h4><p>ICMP是（Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。<br />ICMP经常被认为是IP层的一个组成部分。它传递差错报文以及其他需要注意的信息。ICMP报文通常被IP层或更高层协议（TCP或UDP）使用。一些ICMP报文把差错报文返回给用户进程<br />其功能主要有：</p><ul><li>侦测远端主机是否存在。</li><li>建立及维护路由资料。</li><li>重导资料传送路径。</li></ul><h4 id="icmp首部-8字节"><a class="markdownIt-Anchor" href="#icmp首部-8字节"></a> ICMP首部 8字节</h4><h4 id="icmp响应类型"><a class="markdownIt-Anchor" href="#icmp响应类型"></a> ICMP响应类型</h4><ol><li>Echo Reply（回显应答）：用于响应Echo Request消息，通常用于网络连通性测试（例如ping命令）。</li><li>Destination Unreachable（目标不可达）：用于指示数据包无法到达目标地址。常见的原因包括目标主机不可达、网络不可达、端口不可达等。</li><li>Source Quench（源点压制）：用于指示源主机发送速度过快，要求其减缓发送速度以避免网络拥塞。</li><li>Redirect（重定向）：用于指示路由器告知主机发送数据包的最佳路径，并提供一个更佳的下一跳路由器地址。</li><li>Time Exceeded（超时）：用于指示某个数据包在传输过程中发生了超时。常见的原因包括数据包在路由器上被丢弃或者数据包在网络中循环转发。</li><li>Parameter Problem（参数问题）：用于指示某个数据包的头部包含错误或者不完整的参数。</li><li>Timestamp Reply（时间戳应答）：用于响应Timestamp Request消息，提供时间信息。</li></ol><p>8 响应请求（ECHO-REQUEST）<br />0 响应应答（ECHO-REPLY）<br />3 不可到达</p><h5 id="type3-code8"><a class="markdownIt-Anchor" href="#type3-code8"></a> type=3 code=8</h5><p>网络不可到达</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 模拟 type=3 code=8 问题</span><br><span class="hljs-comment"># 有网关 ping不存在的网段主机 网关开转发并且没有该网段路由(网关没有设置自己网关)</span><br>tcpdump -nn -i ens33 icmp -w /tmp/icmp-3.txt<br></code></pre></td></tr></table></figure><blockquote><p>意思是在一个网关主机上ping另一个网关的主机, 并且网关服务器必须开启转发但不能有被ping主机的网段<br />如:<br />服务器A: 网络(192.168.10.100) 网关(192.168.10.0)<br />网关服务器: 开启转发 网络1(192.168.10.1) 网络2(100.100.100.0)<br />服务器B: 网络(99.99.99.99)</p></blockquote><h5 id="type3-code1"><a class="markdownIt-Anchor" href="#type3-code1"></a> type=3 code=1</h5><p>主机不可到达</p><ol><li>ping本网段的一台主机,主机不存在(lo响应自己)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -nn -i lo icmp -w /tmp/icmp-1.txt<br></code></pre></td></tr></table></figure><blockquote><p>意思是ping一个本网段并不存在的主机, 需要与本机同一网段, 但不能是真是存在的</p></blockquote><ol start="2"><li>ping不在本网段的主机 有网关 网关开转发并且有该网段路由 对应主机不存在</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -nn -i ens33 icmp -w /tmp/icmp-2.txt<br></code></pre></td></tr></table></figure><blockquote><p>意思是在一个网关主机上ping另一个网关的主机, 并且网关服务器必须开启转发并填入双方主机网关, 但不能有被ping主机的IP<br />如:<br />服务器A: 网络(192.168.10.100) 网关(192.168.10.0)<br />网关服务器: 开启转发 网络1(192.168.10.1) 网络2(100.100.100.0)<br />服务器B: 网络(100.100.100.100) <strong>注意:</strong> 不能真的有100.100这个IP的存在</p></blockquote><h5 id="type3-code2"><a class="markdownIt-Anchor" href="#type3-code2"></a> type=3 code=2</h5><p>协议不可到达</p><h5 id="type3-code3"><a class="markdownIt-Anchor" href="#type3-code3"></a> type=3 code=3</h5><ol><li>ping存在主机 对应主机有防火墙 REJECT</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -p icmp -j REJECT <span class="hljs-comment"># 创建规则</span><br>iptables -t filter -D INPUT -p icmp -j REJECT <span class="hljs-comment"># 删除规则</span><br><br><span class="hljs-comment"># ping已经管控了icmp的主机</span><br>tcpdump -nn -i ens33 icmp -w /tmp/icmp-2.txt<br></code></pre></td></tr></table></figure><ol start="2"><li>指定一个主机 不打开的dns服务, 解析域名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -nn -i ens33 icmp -w /tmp/icmp-4.txt<br></code></pre></td></tr></table></figure><h3 id="checksum校验和字段-16位"><a class="markdownIt-Anchor" href="#checksum校验和字段-16位"></a> checksum校验和字段 16位</h3><p>wireshark考虑到window系统与Linux系统发出的ping报文（主要指ping应用字段而非包含IP头的ping包）的字节顺序不一样（windows为LE：little-endian byte order，Linux为BE：big-endian），为了体现wireshark的易用性，开发者将其分别显示出来。</p><hr /><h2 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h2><h3 id="udp协议"><a class="markdownIt-Anchor" href="#udp协议"></a> udp协议</h3><p>不用先与对方建立连接（非面向连接）</p><h4 id="udp协议的简介"><a class="markdownIt-Anchor" href="#udp协议的简介"></a> UDP协议的简介</h4><p>UDP 是User Datagram Protocol的简称， 中文名是用户数据包协议.是OSI参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。在网络中它与TCP协议一样用于处理 UDP数据包。在OSI模型中，在第四层传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说当报文发送之后，是无法得知其是否安全完整到达的。</p><h4 id="udp协议的特点"><a class="markdownIt-Anchor" href="#udp协议的特点"></a> UDP协议的特点</h4><p>它不属于连接型协议，因而具有资源消耗小，处理速度快的优点，所以通常音频、视频和普通数据在传送时使用UDP较多，因为它们即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。比如我们聊天用的QQ 视频会议软件就是使用的UDP协议。<br />非面向连接：不用先与对方建立连接，不握手<br />不可靠的：没有确认机制</p><ol><li>无连接性：UDP是一种无连接的协议，发送方在发送数据之前不需要与接收方建立连接。每个UDP数据包都是独立的，不依赖于之前或之后的数据包。</li><li>非可靠性：相对于TCP的可靠性，UDP不提供数据包的可靠性保证。它没有确认机制，也不会进行重传操作。一旦数据包被发送出去，UDP就不再关心其是否到达目标主机。</li><li>高效性：由于UDP不需要维护连接状态和执行复杂的传输控制机制，它的开销相对较小，传输效率较高。这使得UDP在实时应用程序中非常有用，如音频和视频流媒体。</li><li>面向数据报：UDP将数据划分为数据报（Datagram），每个数据报都有自己的完整标识。这意味着应用程序可以控制数据的边界，确保接收方按照正确的顺序接收和处理数据。</li><li>支持多播和广播：UDP可以轻松地支持多播和广播传输。多播传输允许将数据发送到一个组中的多个接收方，而广播传输则将数据发送到网络中的所有设备。</li><li>低延迟：由于UDP的简单性和无连接性，它对延迟非常敏感。这使得UDP适用于需要快速传输的应用程序，如实时游戏和视频会议。</li></ol><h4 id="udp协议首部-8字节"><a class="markdownIt-Anchor" href="#udp协议首部-8字节"></a> UDP协议首部 8字节</h4><p>数据报文的长度＝DATA长度 ＋ 8字节UDP首部的长度 ＋ 20字节IP首部的长度</p><p><strong>source port:</strong> 主动访问端的源端口总是大于1024的随机端口<br /><strong>destination port:</strong> 目的端口<br /><strong>length:</strong> 指的是当前UDP的数据段的长度（DATA长度＋UDP首部的长度）</p><h4 id="udp抓包实验"><a class="markdownIt-Anchor" href="#udp抓包实验"></a> UDP抓包实验</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 tcpdump 对 192.168.0.101 进行udp协议抓包</span><br>[root@server2 ~]<span class="hljs-comment"># tcpdump -i eth0 -nn udp and host 192.168.0.101</span><br><br><span class="hljs-comment"># 打开本地udp端口5555</span><br>[root@server2 ~]<span class="hljs-comment"># nc -l 192.168.0.101 -u 5555</span><br><br><span class="hljs-comment"># 连接到192.168.0.101的udp 5555端口</span><br>[root@server2 ~]<span class="hljs-comment"># nc 192.168.0.101 -u 5555</span><br><br></code></pre></td></tr></table></figure><h4 id="udp-flood攻击"><a class="markdownIt-Anchor" href="#udp-flood攻击"></a> UDP Flood攻击</h4><p>UDP Flood是日渐猖厥的流量型DoS攻击，原理也很简单。常见的情况是利用大量UDP小包冲击DNS服务器或Radius认证服务器、流媒体视频服务器。 100k pps的UDP Flood经常将线路上的骨干设备例如防火墙打瘫，造成整个网段的瘫痪。由于UDP协议是一种无连接的服务，在UDP FLOOD攻击中，攻击者可发送大量伪造源IP地址的小UDP包。但是，由于UDP协议是无连接性的，所以只要开了一个UDP的端口提供相关服务的话，那么就可针对相关的服务进行攻击。</p><h3 id="tcp协议"><a class="markdownIt-Anchor" href="#tcp协议"></a> tcp协议</h3><h4 id="tcp协议的简介"><a class="markdownIt-Anchor" href="#tcp协议的简介"></a> TCP协议的简介</h4><p>Transmission Control Protocol 传输控制协议,TCP是一种面向连接（连接导向）的、可靠的、基于字节流的传输层（Transport layer）通信协议，由IETF的RFC 793说明（specified）。TCP在IP报文的协议号是6。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，UDP是同一层内另一个重要的传输协议。</p><h4 id="tcp协议的特点"><a class="markdownIt-Anchor" href="#tcp协议的特点"></a> TCP协议的特点</h4><ol><li><p>可靠性：TCP提供可靠的数据传输机制。它使用确认机制和超时重传来确保数据的完整性和准确性。当接收方收到数据时，它会发送确认消息给发送方，如果发送方在一定时间内没有收到确认消息，它会重新发送数据。</p></li><li><p>面向连接：在使用TCP之前，发送方和接收方需要建立一个连接。这个连接是双向的，可以在两个方向上进行数据传输。连接的建立过程包括三次握手，即发送方发送连接请求，接收方回复确认，最后发送方再次回复确认。</p></li><li><p>流量控制：TCP使用流量控制机制来确保发送方不会以超过接收方处理能力的速度发送数据。接收方可以通过窗口大小告知发送方可以接收的数据量。</p></li><li><p>拥塞控制：TCP使用拥塞控制机制来避免网络拥塞。当网络出现拥塞时，TCP会降低发送速率，并且定期增加发送速率，以便逐步恢复。</p></li><li><p>面向字节流：TCP将数据视为一串无结构的字节流，而不是独立的消息。它会将数据分割成适当的大小，并在接收端重新组装。</p></li><li><p>可扩展性：TCP是一种通用协议，可以在不同类型的网络中使用，例如局域网（LAN）和广域网（WAN）。它可以适应不同的网络环境和各种应用需求。</p></li><li><p>面向连接： 三次握手和四次挥手</p><ul><li>SYN 同步标记</li><li>FIN 结束标记</li></ul></li><li><p>可靠的： 确认和重传机制</p><ul><li>确认机制： ACK 确认标记</li><li>重传机制： 在RTT（数据段往返时间），没有收到ACK，则认为需要重传整个数据段</li></ul></li><li><p>TCP的状态</p></li><li><p>TCP的标记</p><ul><li>SYN： 同步标记位</li><li>ACK： 确认标记位（包括三次握手中的确认及之后数据传输时的确认）</li><li>RST： 重置标记位（访问一个未打开的TCP端口时，服务器返回一个带RST标记位的响应）</li><li>PSH： 推标记位 （延时性比较高的时候都会加上PSH,比较快的发送出去,不往缓存中放，ssh，telnet，ftp-command）</li><li>URG： 紧急标志位（通信的时候网络故障问题引起的数据没传完，会发送一个URG标记位）</li><li>FIN： 结束标记位 ( 发送端完成发送任务，双方都需要确认没有数据再发给对方 )</li></ul></li></ol><h4 id="tcp协议首部-4字节"><a class="markdownIt-Anchor" href="#tcp协议首部-4字节"></a> TCP协议首部 4字节</h4><p><strong>Source Port / Destination Port:</strong> 来源端口/目的端口。其中包含来源端口/目的端口的端口号。<br /><strong>Sequence Number:</strong> 封包序号。当数据要从一台主机传送去另一台主机的时候，发送端会为封包建立起一个起始序号，然后按照所传送的数据长度(字节数值)，依次递增上去。使用递增之后的值来作为下一个封包的序号。这样接收端就可以根据序号来检测资料是否接收完整了。<br /><strong>Acknowledge Number:</strong> 回应序号。当接收端接收到 TCP 封包并通过检验确认之后，会依照发送序号、再加上数据长度产生一个响应序号，附在下一个响应封包送回给对方(无需额外的送出专门的确认封包)，这样接收端就知道刚才的封包已经被成功接收到了。假如基于网络状况或其它原因，当封包的定时器达到期限时，接收端还没接收到回应序号，就会认为该封包丢失了并加以重送。如果刚好重发封包之后才接收到响应，接收端就会根据序号来判断该封包是否被重复发送，如果是的话，将之丢弃不做任何处理</p><h5 id="contral-flag"><a class="markdownIt-Anchor" href="#contral-flag"></a> Contral Flag</h5><p>控制标记。一共有六个它们分别是：</p><h5 id="urgent-data"><a class="markdownIt-Anchor" href="#urgent-data"></a> Urgent data</h5><p>如果URG为1，表示这是一个携有紧急资料的封包。 TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。紧急指针指向包内数据段的某个字节不进入接收缓冲就直接交给上层进程,余下的数据要进入接收缓冲。通信的时候网络故障问题引起的数据没传完，会发送一个URG标记位</p><h5 id="acknowledgment-field-significant"><a class="markdownIt-Anchor" href="#acknowledgment-field-significant"></a> Acknowledgment field significant</h5><p>如果ACK为1，表示此封包属于一个要回应的封包。一般都会为1。</p><h5 id="push-function"><a class="markdownIt-Anchor" href="#push-function"></a> Push function</h5><p>如果PSH为1，此封包所携带的数据会直接上传给上层应用程序而无需经过TCP处理。</p><h5 id="reset"><a class="markdownIt-Anchor" href="#reset"></a> Reset</h5><p>如果RST为1，要求重传。表示要求重新设定封包再重新传递。</p><h5 id="synchronize-sequence-number"><a class="markdownIt-Anchor" href="#synchronize-sequence-number"></a> Synchronize sequence number</h5><p>如果SYN为1，表示要求双方进行同步沟通。</p><h5 id="no-more-data-for-sender-finish"><a class="markdownIt-Anchor" href="#no-more-data-for-sender-finish"></a> No more data for sender (Finish)</h5><p>如果FIN为1，表示传送结束，然後双方发出结束回应进而正式终止一个TCP传送过程</p><h5 id="window滑动窗口"><a class="markdownIt-Anchor" href="#window滑动窗口"></a> window滑动窗口</h5><p>TCP使用一种窗口（window）机制来控制数据流。当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的尺寸发送给另一端。当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区尺寸。剩余的缓冲区空间的大小被称为窗口（window） ，指出窗口大小的通知称为窗口通告（window advertisement） 。接收方在发送的每一确认中都含有一个窗口通告。<br />如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。然而，如果发送方操作的速度快于接收方（由于C P U更快） ，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口（ zero window） 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</p><blockquote><p>比如两台主机A向B主机发包,如果B主机的缓冲区缓冲的数据大小,超出部分就会被B机丢弃,也叫缓冲区溢出,那么这种情况如何解决?这就用到了滑动窗口机制,如果A主机并不确定B主机缓冲区大小,那么先发3个数据包给B主机,B主机缓冲区只有2,那么B主机就会应答给A主机数据包 补发数据3并且告诉A主机win_size2.A主机接收到后可能还会发3,4,5这3个数据给主机B,主机B再次应答补发数据包5并且告诉A主机win_size2,这时候A主机知道了B主机只能接受2个数据包.</p></blockquote><h5 id="chechsum"><a class="markdownIt-Anchor" href="#chechsum"></a> Chechsum</h5><p>当资料要传送出去的时候发送端会计算好封包资料大小然後得出这个检验值封包一起发送当接收端收到封包之後会再对资料大小进行计算看看是否和检验值一致如果结果不相称则被视为残缺封包会要求对方重发该个封包。</p><h5 id="16位紧急指针"><a class="markdownIt-Anchor" href="#16位紧急指针"></a> 16位紧急指针</h5><p>只有当URG标志置1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。TCP的紧急方式是发送端向另一端发送紧急数据的一种方式。</p><h4 id="tcp协议的3次握手"><a class="markdownIt-Anchor" href="#tcp协议的3次握手"></a> tcp协议的3次握手</h4><ol><li>第一次握手：客户端发送一个特殊的消息（称为SYN）给服务器端。这个消息包含了一些连接建立的参数，比如初始序列号。客户端希望与服务器建立连接。</li><li>第二次握手：服务器接收到客户端的SYN消息后，会发送一个确认消息（称为ACK）给客户端。同时，服务器也会发送自己的SYN消息给客户端。这个SYN消息通常被称为SYN/ACK消息。服务器确认了客户端的请求，并告诉客户端它也希望建立连接。</li><li>第三次握手：客户端接收到服务器端的SYN/ACK消息后，会发送一个确认消息（ACK）给服务器端。客户端确认了服务器的请求，并告诉服务器连接已经建立。</li></ol><h4 id="tcp协议的4次挥手"><a class="markdownIt-Anchor" href="#tcp协议的4次挥手"></a> tcp协议的4次挥手</h4><ol><li>第一次挥手：客户端发送一个关闭连接的请求给服务器端。这个消息称为FIN（Finish）消息。客户端表示它不再发送数据给服务器端了，但仍然可以接收服务器端发送的数据。</li><li>第二次挥手：服务器接收到客户端的关闭请求后，会发送一个确认消息给客户端。这个消息称为ACK（Acknowledgement）消息。服务器告诉客户端它已经收到了关闭请求。</li><li>第三次挥手：服务器发送一个关闭连接的请求给客户端。这个消息也是一个FIN消息。服务器表示它不再发送数据给客户端，并且也不再接收客户端发送的数据。</li><li>第四次挥手：客户端接收到服务器端的关闭请求后，会发送一个确认消息给服务器端。这也是一个ACK消息。客户端确认了服务器的关闭请求，并告诉服务器它已经准备好关闭连接。</li></ol><h4 id="序列号-确认号"><a class="markdownIt-Anchor" href="#序列号-确认号"></a> 序列号、确认号</h4><p>通信的双方各自维护着一套 seq 序列号，并对对方发送的数据包进行 ACK 确认。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@server2 ~]<span class="hljs-comment"># tcpdump -i eth0 -nn -S -r tcp.tcpdump //-S详细的方式，适合看序列号</span><br>[root@server2 ~]<span class="hljs-comment"># tcpdump -i eth0 -nn -S -r tcp.tcpdump &gt; tcp.file</span><br></code></pre></td></tr></table></figure><h4 id="重传机制rtt"><a class="markdownIt-Anchor" href="#重传机制rtt"></a> 重传机制(RTT)</h4><p>每个数据段都有一个重传时间 这个时间是根据网络情况算出来.如果在该时间范围内没有ack 那就要重传数据段注意不是数据包.(数据段可能是N个数据包) 网络层不是管重传的只能在传输层完成</p><h4 id="mss最大报文段长度"><a class="markdownIt-Anchor" href="#mss最大报文段长度"></a> MSS最大报文段长度</h4><p>MSS表示TCP传往另一端最大块数据的长度。当一个连接建立时，连接的双方都要通知各自的MSS。一般来说，报文段越大，允许<br />每个报文段传输的数据就越多，相对于IP和TCP首部有更高的网络利用率。<br />以太网MSS： MTU（1500） - 40（TCP首部） - 20（IP首部） = 1440</p><h4 id="syn-flood"><a class="markdownIt-Anchor" href="#syn-flood"></a> syn flood</h4><p>攻击原理：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DDoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，常用假冒的IP或IP号段发来海量的请求连接的第一个握手包（SYN包），被攻击服务器回应第二个握手包（SYN+ACK包），因为对方是假冒IP，对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN_RECV状态的半连接，并且会重试默认5次回应第二个握手包，塞满TCP等待连接队列，资源耗尽（CPU满负荷或内存不足），让正常的业务请求连接不进来</p><hr /><h2 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h2><h3 id="ftp协议"><a class="markdownIt-Anchor" href="#ftp协议"></a> ftp协议</h3><h4 id="ftp协议简介"><a class="markdownIt-Anchor" href="#ftp协议简介"></a> FTP协议简介</h4><p>FTP 是 TCP/IP 协议组中的协议之一，是英文File Transfer Protocol的缩写。该协议是Internet文件传送的基础，它由一系列规格说明文档组成，目标是提高文件的共享性，提供非直接使用远程计算机，使存储介质对用户透明和可靠高效地传送数据。简单的说，FTP就是完成两台计算机之间的拷贝，从远程计算机拷贝文件至自己的计算机上，称之为“下载（download）”文件。若将文件从自己计算机中拷贝至远程计算机上，则称之为“上载（upload）”文件。在TCP/IP协议中，FTP标准TCP端口号为21，Port方式数据端口为20。</p><h4 id="ftp两种模式"><a class="markdownIt-Anchor" href="#ftp两种模式"></a> FTP两种模式</h4><p>两种数据传输模式：主动模式，被动模式</p><p><strong>被动模式:</strong> 服务器端只开21和大于1024随机端口<br />服务器和客户端会协商好一个端口，然后客户端从这个端口读数据</p><p><strong>主动模式:</strong> 服务器端打开21和20端口<br />客户端和服务端通过20号端口传输数据</p><h5 id="被动模式测试"><a class="markdownIt-Anchor" href="#被动模式测试"></a> 被动模式测试</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># vsftpd服务器 (关闭selinux, firewalld)</span><br>systemctl restart vsftpd<br><br><span class="hljs-comment"># 客户端服务器 (登陆) 进入ftp服务器IP</span><br>nc &#123;ftp_server_ip&#125; 21<br>220 (vsFTPd 2.0.5)                               <span class="hljs-comment"># ftp服务版本</span><br>USER ftp<br>331 Please specify the password.<br>PASS<br>230 Login successful.<br>PASV<br>227 Entering Passive Mode (192,168,0,99,247,209) <span class="hljs-comment"># 服务器在该端口上等着客户端</span><br><br><span class="hljs-comment"># 客户端服务器 (监测) 监控本机IP</span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">256</span>*<span class="hljs-number">247</span>+<span class="hljs-number">109</span>))<br>63341<br>nc &#123;client_server_ip&#125; 63441<br><br><span class="hljs-comment"># 客户端服务器 (登陆) </span><br>list<br>150 Here comes the directory listing.<br>226 Directory send OK.<br><br><span class="hljs-comment"># 客户端服务器 (监测)</span><br>drwxr-xr-x 3 0 0 4096 Oct 23 05:53 mysql<br>drwxr-xr-x 2 0 0 4096 Oct 17 12:02 pub<br>-rwxr-xr-x 1 0 0 25088 Sep 28 12:15 实验.doc<br></code></pre></td></tr></table></figure><h5 id="主动模式测试"><a class="markdownIt-Anchor" href="#主动模式测试"></a> 主动模式测试</h5><p>服务器端只开21和20端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># vsftpd服务器 (关闭selinux, firewalld)</span><br>systemctl restart vsftpd<br><br><span class="hljs-comment"># 客户端服务器 (登陆) 进入ftp服务器IP</span><br>nc &#123;ftp_server_ip&#125; 21<br>220 (vsFTPd 2.0.5)                               <span class="hljs-comment"># ftp服务版本</span><br>USER ftp<br>331 Please specify the password.<br>PASS<br>230 Login successful.<br><br><span class="hljs-comment"># 客户端服务器 (监测) 监控本机IP</span><br><span class="hljs-comment"># 这里以10086端口为例子</span><br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">10086</span>/<span class="hljs-number">256</span>))<br>39<br><span class="hljs-built_in">echo</span> $((<span class="hljs-number">10086</span>%<span class="hljs-number">256</span>))<br>102<br><br><span class="hljs-comment"># 客户端服务器 (登陆)</span><br>PORT 192,168,10,100,39,102                          <span class="hljs-comment"># 10086/256，商39，余102 客户端在该端口上等着服务器</span><br>200 PORT <span class="hljs-built_in">command</span> successful. Consider using PASV.<br>list<br>150 Here comes the directory listing.<br>226 Directory send OK.<br><br><span class="hljs-comment"># 客户端服务器 (监测)</span><br>drwxr-xr-x 3 0 0 4096 Oct 23 05:53 mysql<br>drwxr-xr-x 2 0 0 4096 Oct 17 12:02 pub<br>-rwxr-xr-x 1 0 0 25088 Sep 28 12:15 实验.doc<br></code></pre></td></tr></table></figure><h4 id="ftp的命令"><a class="markdownIt-Anchor" href="#ftp的命令"></a> FTP的命令</h4><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>tcpdump</td><td>-i &lt;interface&gt;</td><td>指定网络接口</td><td>通过指定网络接口来捕获网络数据包</td></tr><tr><td>tcpdump</td><td>-n</td><td>禁用主机名解析</td><td>显示IP地址而不是主机名</td></tr><tr><td>tcpdump</td><td>-c &lt;count&gt;</td><td>捕获指定数量的数据包后停止</td><td>指定捕获的数据包数量</td></tr><tr><td>tcpdump</td><td>-s &lt;snaplen&gt;</td><td>指定数据包的最大捕获长度</td><td>设置数据包的最大捕获长度，以字节为单位</td></tr><tr><td>tcpdump</td><td>-w &lt;file&gt;</td><td>将捕获的数据包写入文件</td><td>将捕获的数据包保存到指定的文件中</td></tr><tr><td>tcpdump</td><td>-r &lt;file&gt;</td><td>从文件中读取数据包</td><td>从指定的文件中读取数据包进行分析</td></tr><tr><td>tcpdump</td><td>-A</td><td>以ASCII格式显示数据包内容</td><td>以ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-X</td><td>以十六进制和ASCII格式显示数据包内容</td><td>以十六进制和ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-vvv</td><td>显示详细的调试信息</td><td>显示更详细的调试信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-e</td><td>显示以太网头部信息</td><td>显示以太网帧的头部信息</td></tr><tr><td>tcpdump</td><td>-q</td><td>简化输出</td><td>以简化的格式输出结果</td></tr><tr><td>tcpdump</td><td>-S</td><td>以绝对序号显示数据包</td><td>以绝对序号显示数据包的序号</td></tr><tr><td>tcpdump</td><td>-t</td><td>不显示时间戳</td><td>不显示数据包的时间戳</td></tr><tr><td>tcpdump</td><td>-l</td><td>行缓冲输出</td><td>使用行缓冲输出模式</td></tr><tr><td>tcpdump</td><td>-B &lt;buffer_size&gt;</td><td>设置捕获缓冲区大小</td><td>设置捕获数据包的缓冲区大小，以字节为单位</td></tr><tr><td>tcpdump</td><td>-F &lt;file&gt;</td><td>从文件中读取过滤条件</td><td>从指定的文件中读取过滤条件</td></tr><tr><td>tcpdump</td><td>-G &lt;rotate_seconds&gt;</td><td>自动循环文件</td><td>捕获数据包到一个文件一段时间后，自动切换到新文件</td></tr><tr><td>tcpdump</td><td>-W &lt;file_count&gt;</td><td>设置循环文件的数量</td><td>设置循环文件的数量，循环文件的命名格式为&lt;file&gt;.&lt;number&gt;</td></tr><tr><td>tcpdump</td><td>-L</td><td>列出可用的网络接口</td><td>列出系统上可用的网络接口</td></tr><tr><td>tcpdump</td><td>-E &lt;file&gt;</td><td>从文件中读取扩展信息</td><td>从指定的文件中读取扩展信息</td></tr><tr><td>tcpdump</td><td>-v</td><td>显示详细信息</td><td>显示更详细的信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-V</td><td>显示版本信息</td><td>显示tcpdump的版本信息</td></tr><tr><td>tcpdump</td><td>-h</td><td>显示帮助信息</td><td>显示tcpdump的帮助信息</td></tr></tbody></table><h3 id="http协议"><a class="markdownIt-Anchor" href="#http协议"></a> http协议</h3><h4 id="http协议简介"><a class="markdownIt-Anchor" href="#http协议简介"></a> HTTP协议简介</h4><p>超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。</p><h4 id="使用浏览器访问web服务器"><a class="markdownIt-Anchor" href="#使用浏览器访问web服务器"></a> 使用浏览器访问web服务器</h4><p>红色部分： 客户端发给服务器<br />蓝色部分： 服务器回给客户端</p><h4 id="使用协议命令访问web服务器"><a class="markdownIt-Anchor" href="#使用协议命令访问web服务器"></a> 使用协议命令访问web服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@station99 ~]<span class="hljs-comment"># nc 192.168.0.51 80</span><br>GET / HTTP/1.1                                       <span class="hljs-comment"># 请求站点根目录 【HTTP协议名称及版本可选】</span><br>HOST: 192.168.0.99                                   <span class="hljs-comment"># 发起请求的服务端主机 【可选】</span><br>User-Agent: elinks-1.1                               <span class="hljs-comment"># 发起请求的客户端代理程序 【可选】</span><br>可以忽略其它协商<br>回车<br>回车<br></code></pre></td></tr></table></figure><h4 id="http的持久性连接"><a class="markdownIt-Anchor" href="#http的持久性连接"></a> HTTP的持久性连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打开/etc/http/conf/httpd.conf并添加</span><br>KeepAlive on                <span class="hljs-comment"># 保持连接开启 </span><br>KeepAliveTimeout 15         <span class="hljs-comment"># 保持通话时间 </span><br>MaxKeepAliveRequests 100    <span class="hljs-comment"># 最大维持交易请求</span><br></code></pre></td></tr></table></figure><h4 id="http头部解释扩展"><a class="markdownIt-Anchor" href="#http头部解释扩展"></a> HTTP头部解释（扩展）</h4><ol><li>Accept： 告诉WEB服务器自己接受什么介质类型，<em>/</em> 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。</li><li>Accept-Charset： 浏览器申明自己接收的字符集<ul><li>Accept-Encoding： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）</li><li>Accept-Language：浏览器申明自己接收的语言，语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等。</li></ul></li><li>Accept-Ranges： WEB服务器表明自己是否接受获取其某个实体的一部分（比如文件的一部分）的请求。bytes：表示接受，none：表示不接受。</li><li>Age： 当代理服务器用自己缓存的实体去响应请求时，用该头部表明该实体从产生到现在经过多长时间了。</li><li>Authorization： 当客户端接收到来自WEB服务器的 WWW-Authenticate 响应时，用该头部来回应自己的身份验证信息给WEB服务器。</li><li>Cache-Control： 请求：no-cache（不要缓存的实体，要求现在从WEB服务器去取）<ul><li>max-age：（只接受 Age 值小于 max-age 值，并且没有过期的对象）</li><li>max-stale：（可以接受过去的对象，但是过期时间必须小于max-stale 值）</li><li>min-fresh：（接受其新鲜生命期大于其当前 Age 跟 min-fresh 值之和的缓存对象）</li><li>响应：public(可以用 Cached 内容回应任何用户)</li><li>private（只能用缓存内容回应先前请求该内容的那个用户）</li><li>no-cache（可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端）</li><li>max-age：（本响应包含的对象的过期时间）</li><li>ALL: no-store（不允许缓存）</li></ul></li><li>Connection： 请求：close（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了）。<br />keepalive（告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求）。<br />响应：close（连接已经关闭）。<br />keepalive（连接保持着，在等待本次连接的后续请求）。<br />Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒）。<br />例如：Keep-Alive：300</li><li>Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip<ul><li>Content-Language：WEB 服务器告诉浏览器自己响应的对象的语言。</li><li>Content-Length： WEB 服务器告诉浏览器自己响应的对象的长度。例如：Content-Length: 26012</li><li>Content-Range： WEB 服务器表明该响应包含的部分对象为整个对象的哪个部分。例如：Content-Range: bytes 21010-47021/47022</li><li>Content-Type： WEB 服务器告诉浏览器自己响应的对象的类型。例如：Content-Type：application/xml</li></ul></li><li>ETag： 就是一个对象（比如URL）的标志值，就一个对象而言，比如一个 html 文件，如果被修改了，其 Etag 也会被修改， 所以，ETag 的作用跟 Last-Modified 的作用差不多，主要供 WEB 服务器 判断一个对象是否改变了。比如前一次请求某个 html 文件时，获得了其 ETag，当这次又请求这个文件时，浏览器就会把先前获得的 ETag 值发送给 WEB 服务器，然后 WEB 服务器会把这个 ETag 跟该文件的当前ETag 进行对比，然后就知道这个文件有没有改变了。</li><li>Expired： WEB服务器表明该实体将在什么时候过期，对于过期了的对象，只有在跟WEB服务器验证了其有效性后，才能用来响应客户请求。<ul><li>是 HTTP/1.0 的头部。例如：Expires：Sat, 23 May 2009 10:02:12 GMT</li></ul></li><li>Host： 客户端指定自己想访问的WEB服务器的域名/IP 地址和端口号。例如：Host：<a href="http://rss.sina.com.cn">rss.sina.com.cn</a></li><li>If-Match： 如果对象的 ETag 没有改变，其实也就意味著对象没有改变，才执行请求的动作。<ul><li>If-None-Match： 如果对象的 ETag 改变了，其实也就意味著对象也改变了，才执行请求的动作。</li></ul></li><li>If-Modified-Since：如果请求的对象在该头部指定的时间之后修改了，才执行请求的动作（比如返回对象），否则返回代码304，告诉浏览器该对象没有修改。</li><li>If-Range： 浏览器告诉 WEB 服务器，如果我请求的对象没有改变，就把我缺少的部分给我，如果对象改变了，就把整个对象给我。 浏览器通过发送请求对象的ETag 或者 自己所知道的最后修改时间给 WEB 服务器，让其判断对象是否改变了。总是跟 Range 头部一起使用。</li><li>Last-Modified： WEB 服务器认为对象的最后修改时间，比如文件的最后修改时间，动态页面的最后产生时间等等。</li><li>Location： WEB 服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。</li><li>Pramga： 主要使用 Pramga: no-cache，相当于 Cache-Control： no-cache。</li><li>Proxy-Authenticate： 代理服务器响应浏览器，要求其提供代理身份验证信息。Proxy-Authorization： 浏览器响应代理服务器的身份验证请求，提供自己的身份信息。</li><li>Range： 浏览器（比如 Flashget 多线程下载时）告诉 WEB 服务器自己想取对象的哪部分。</li><li>Referer： 浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。</li><li>Server: WEB 服务器表明自己是什么软件及版本等信息。例如：Server：Apache/2.0.61 (Unix)</li><li>User-Agent: 浏览器表明自己的身份（是哪种浏览器）。</li><li>Transfer-Encoding: WEB 服务器表明自己对本响应消息体（不是消息体里面的对象） 作了怎样的编码，比如是否分块（chunked）。</li><li>Vary: WEB服务器用该头部的内容告诉 Cache 服务器，在什么条件下才能用本响应所返回的对象响应后续的请求。假如源WEB服务器在接到第一个请求消息时，其响应消息的头部为： Content-Encoding: gzip; Vary: Content-Encoding， 那么 Cache 服务器会分析后续请求消息的头部，检查其 Accept-Encoding，是否跟先前响应的 Vary 头部值一致，即是否使用相同的内容编码方法，这样就可以防止 Cache 服务器用自己Cache 里面压缩后的实体响应给不具备解压能力的浏览器。</li><li>Via： 列出从客户端到 OCS 或者相反方向的响应经过了哪些代理服务器，他们用什么协议（和版本）发送的请求。当客户端请求到达第一个代理服务器时，该服务器会在自己发出的请求里面添加 Via 头部，并填上自己的相关信息，当下一个代理服务器 收到第一个代理服务器的请求时，会在自己发出的请求里面复制前一个代理服务器的请求的Via头部，并把自己的相关信息加到后面， 以此类推，当 OCS 收到最后一个代理服务器的请求时，检查 Via 头部，就知道该请求所经过的路由。</li></ol><h3 id="nc命令补充"><a class="markdownIt-Anchor" href="#nc命令补充"></a> nc命令补充</h3><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>tcpdump</td><td>-i &lt;interface&gt;</td><td>指定网络接口</td><td>通过指定网络接口来捕获网络数据包</td></tr><tr><td>tcpdump</td><td>-n</td><td>禁用主机名解析</td><td>显示IP地址而不是主机名</td></tr><tr><td>tcpdump</td><td>-c &lt;count&gt;</td><td>捕获指定数量的数据包后停止</td><td>指定捕获的数据包数量</td></tr><tr><td>tcpdump</td><td>-s &lt;snaplen&gt;</td><td>指定数据包的最大捕获长度</td><td>设置数据包的最大捕获长度，以字节为单位</td></tr><tr><td>tcpdump</td><td>-w &lt;file&gt;</td><td>将捕获的数据包写入文件</td><td>将捕获的数据包保存到指定的文件中</td></tr><tr><td>tcpdump</td><td>-r &lt;file&gt;</td><td>从文件中读取数据包</td><td>从指定的文件中读取数据包进行分析</td></tr><tr><td>tcpdump</td><td>-A</td><td>以ASCII格式显示数据包内容</td><td>以ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-X</td><td>以十六进制和ASCII格式显示数据包内容</td><td>以十六进制和ASCII格式显示数据包的内容</td></tr><tr><td>tcpdump</td><td>-vvv</td><td>显示详细的调试信息</td><td>显示更详细的调试信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-e</td><td>显示以太网头部信息</td><td>显示以太网帧的头部信息</td></tr><tr><td>tcpdump</td><td>-q</td><td>简化输出</td><td>以简化的格式输出结果</td></tr><tr><td>tcpdump</td><td>-S</td><td>以绝对序号显示数据包</td><td>以绝对序号显示数据包的序号</td></tr><tr><td>tcpdump</td><td>-t</td><td>不显示时间戳</td><td>不显示数据包的时间戳</td></tr><tr><td>tcpdump</td><td>-l</td><td>行缓冲输出</td><td>使用行缓冲输出模式</td></tr><tr><td>tcpdump</td><td>-B &lt;buffer_size&gt;</td><td>设置捕获缓冲区大小</td><td>设置捕获数据包的缓冲区大小，以字节为单位</td></tr><tr><td>tcpdump</td><td>-F &lt;file&gt;</td><td>从文件中读取过滤条件</td><td>从指定的文件中读取过滤条件</td></tr><tr><td>tcpdump</td><td>-G &lt;rotate_seconds&gt;</td><td>自动循环文件</td><td>捕获数据包到一个文件一段时间后，自动切换到新文件</td></tr><tr><td>tcpdump</td><td>-W &lt;file_count&gt;</td><td>设置循环文件的数量</td><td>设置循环文件的数量，循环文件的命名格式为&lt;file&gt;.&lt;number&gt;</td></tr><tr><td>tcpdump</td><td>-L</td><td>列出可用的网络接口</td><td>列出系统上可用的网络接口</td></tr><tr><td>tcpdump</td><td>-E &lt;file&gt;</td><td>从文件中读取扩展信息</td><td>从指定的文件中读取扩展信息</td></tr><tr><td>tcpdump</td><td>-v</td><td>显示详细信息</td><td>显示更详细的信息，包括更多的协议细节</td></tr><tr><td>tcpdump</td><td>-V</td><td>显示版本信息</td><td>显示tcpdump的版本信息</td></tr><tr><td>tcpdump</td><td>-h</td><td>显示帮助信息</td><td>显示tcpdump的帮助信息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
            <tag> tcpip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络管理 - iptables</title>
      <link href="/posts/fdc792/"/>
      <url>/posts/fdc792/</url>
      
        <content type="html"><![CDATA[<h2 id="iptables"><a class="markdownIt-Anchor" href="#iptables"></a> iptables</h2><h3 id="iptables的简介"><a class="markdownIt-Anchor" href="#iptables的简介"></a> iptables的简介</h3><p>netfilter/iptables IP 信息包过滤系统是一种功能强大的工具，可用于添加、编辑和除去规则，这些规则是在做信息包过滤决定时，防火墙所遵循和组成的规则。这些规则存储在专用的信息包过滤表中，而这些表集成在 Linux 内核中。在信息包过滤表中，规则被分组放在我们所谓的链（chain）中。<br />虽然 netfilter/iptables IP 信息包过滤系统被称为单个实体，但它实际上由两个组件netfilter 和 iptables 组成。<br />netfilter 组件也称为内核空间（kernelspace），是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集。<br />iptables 组件是一种工具，也称为用户空间（userspace），它使插入、修改和除去信息包过滤表中的规则变得容易。<br />netfilter/iptables 的最大优点是它可以配置有状态的防火墙。有状态的防火墙能够指定并记住为发送或接收信息包所建立的连接的状态。防火墙可以从信息包的连接跟踪状态获得该信息。在决定新的信息包过滤时，防火墙所使用的这些状态信息可以增加其效率和速度。<br />netfilter/iptables 的另一个重要优点是，它使用户可以完全控制防火墙配置和信息包过滤。您可以定制自己的规则来满足您的特定需求，从而只允许您想要的网络流量进入系统。</p><h3 id="iptables的命令"><a class="markdownIt-Anchor" href="#iptables的命令"></a> iptables的命令</h3><table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>iptables</td><td>-A &lt;chain&gt;</td><td>向指定链添加规则</td><td>在指定的链末尾添加一条规则</td></tr><tr><td>iptables</td><td>-D &lt;chain&gt;</td><td>从指定链删除规则</td><td>从指定的链中删除一条规则</td></tr><tr><td>iptables</td><td>-I &lt;chain&gt;</td><td>在指定链的开头插入规则</td><td>在指定链的开头插入一条规则</td></tr><tr><td>iptables</td><td>-R &lt;chain&gt;</td><td>替换指定链的规则</td><td>替换指定链中的一条规则</td></tr><tr><td>iptables</td><td>-L</td><td>列出防火墙规则</td><td>列出当前防火墙中的所有规则</td></tr><tr><td>iptables</td><td>-F</td><td>清空防火墙规则</td><td>清除防火墙中的所有规则</td></tr><tr><td>iptables</td><td>-P &lt;chain&gt;</td><td>设置指定链的默认策略</td><td>设置指定链的默认策略，可选值为 ACCEPT、DROP、REJECT</td></tr><tr><td>iptables</td><td>-N &lt;chain&gt;</td><td>创建一个新的用户自定义链</td><td>创建一个新的用户自定义链</td></tr><tr><td>iptables</td><td>-X &lt;chain&gt;</td><td>删除一个用户自定义链</td><td>删除一个用户自定义链</td></tr><tr><td>iptables</td><td>-E &lt;chain&gt;</td><td>重命名一个用户自定义链</td><td>重命名一个用户自定义链</td></tr><tr><td>iptables</td><td>-Z</td><td>清空防火墙计数器</td><td>清除防火墙中的所有计数器</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j &lt;target&gt;</td><td>添加端口转发规则</td><td>将指定协议和端口的数据包转发到目标</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -s &lt;source&gt; -j &lt;target&gt;</td><td>添加源IP地址匹配规则</td><td>匹配指定源IP地址的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -d &lt;destination&gt; -j &lt;target&gt;</td><td>添加目标IP地址匹配规则</td><td>匹配指定目标IP地址的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -i &lt;interface&gt; -j &lt;target&gt;</td><td>添加输入接口匹配规则</td><td>匹配指定输入接口的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -o &lt;interface&gt; -j &lt;target&gt;</td><td>添加输出接口匹配规则</td><td>匹配指定输出接口的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -m &lt;module&gt; -j &lt;target&gt;</td><td>添加使用指定模块的规则</td><td>使用指定的模块匹配数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -p &lt;protocol&gt; -s &lt;source&gt; --dport &lt;port&gt; -j &lt;target&gt;</td><td>添加复合条件的规则</td><td>匹配指定协议、源IP地址和目标端口的数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-A &lt;chain&gt; -p &lt;protocol&gt; -m &lt;module&gt; –<option> -j &lt;target&gt;</td><td>添加使用模块的复合条件规则</td><td>使用指定的模块和选项匹配数据包，并执行目标操作</td></tr><tr><td>iptables</td><td>-m &lt;module&gt; --help</td><td>显示指定模块的帮助信息</td><td>显示指定模块的帮助信息</td></tr><tr><td>iptables</td><td>-h</td><td>显示帮助信息</td><td>显示iptables的帮助信息</td></tr></tbody></table><h3 id="iptables基础命令"><a class="markdownIt-Anchor" href="#iptables基础命令"></a> iptables基础命令</h3><h4 id="新增一条规则-追加"><a class="markdownIt-Anchor" href="#新增一条规则-追加"></a> 新增一条规则 (追加)</h4><p>追加在最下方</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 放开所有入站</span><br>iptables -t filter -A INPUT -j ACCEPT<br><span class="hljs-comment"># 放开所有出站</span><br>iptables -t filter -A OUTPUT -j ACCEPT<br><span class="hljs-comment"># 禁止所有入站</span><br>iptables -t filter -A INPUT -j DROP<br><span class="hljs-comment"># 禁止所有出站</span><br>iptables -t filter -A OUTPUT -j DROP<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -A &#123;table&#125; -j &#123;动作&#125;<br><span class="hljs-comment"># 示例</span><br>iptables -A INPUT -s 192.168.10.10 -p icmp -j DROP<br>iptables -A INPUT -s 192.168.10.10 -p tcp --dport 80 -j DROP<br>iptables -A INPUT -s 192.168.10.10 -i eth0 -p tcp --dport 80 -j DROP<br></code></pre></td></tr></table></figure><h4 id="新增一条规则-插入"><a class="markdownIt-Anchor" href="#新增一条规则-插入"></a> 新增一条规则 (插入)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 插入到第一条之前</span><br>iptables -t filter -I 1 INPUT -j ACCEPT<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -I &#123;table&#125; -j &#123;动作&#125;<br></code></pre></td></tr></table></figure><h4 id="删除一条规则"><a class="markdownIt-Anchor" href="#删除一条规则"></a> 删除一条规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除一条入站规则</span><br>iptables -t filter -D INPUT &#123;number&#125;<br><span class="hljs-comment"># 删除一条出站规则</span><br>iptables -t filter -D OUTPUT &#123;number&#125;<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -D &#123;table&#125; &#123;number&#125;<br></code></pre></td></tr></table></figure><h4 id="修改一条规则"><a class="markdownIt-Anchor" href="#修改一条规则"></a> 修改一条规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改一条规则</span><br>iptables -t filter -R INPUT 1 -s 192.168.10.10 -p tcp --dport 80 -j ACCEPT<br><br><span class="hljs-comment"># 格式</span><br>iptables -t filter -R &#123;table&#125; &#123;参数&#125; -j &#123;动作&#125;<br></code></pre></td></tr></table></figure><h4 id="查看所有规则"><a class="markdownIt-Anchor" href="#查看所有规则"></a> 查看所有规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 以英文形式显示表</span><br>iptables -L<br><span class="hljs-comment"># 以数字形式显示表</span><br>iptables -L -n<br><span class="hljs-comment"># 以序号形式显示表 (表内顺序越高有限度越高)</span><br>iptables -L -n --line-numbers<br></code></pre></td></tr></table></figure><h4 id="添加自定义链"><a class="markdownIt-Anchor" href="#添加自定义链"></a> 添加自定义链</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加一条自定义链</span><br>ptables -t filter -N woxtbl<br><span class="hljs-comment"># 添加一条链接</span><br>iptables -t filter -A INPUT -j woxtbl<br></code></pre></td></tr></table></figure><h4 id="删除空的自定义链"><a class="markdownIt-Anchor" href="#删除空的自定义链"></a> 删除空的自定义链</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除自定义链 (必须处于无链接状态并且自定义链中不能有规则)</span><br>iptables -t filter -X woxtbl<br></code></pre></td></tr></table></figure><h4 id="清除所有表内规则"><a class="markdownIt-Anchor" href="#清除所有表内规则"></a> 清除所有表内规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -F<br>iptables -F &#123;table&#125;<br></code></pre></td></tr></table></figure><h4 id="设置默认策略"><a class="markdownIt-Anchor" href="#设置默认策略"></a> 设置默认策略</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置默认丢弃</span><br>iptables -t filter -P INPUT DROP<br><span class="hljs-comment"># 设置默认放行</span><br>iptables -t filter -P INPUT ACCEPT<br></code></pre></td></tr></table></figure><hr /><h3 id="iptables的解释"><a class="markdownIt-Anchor" href="#iptables的解释"></a> iptables的解释</h3><p>从INPUT链进来的包包括<br />其它主机访问本机的数据包<br />本机访问其它主机时，其它主机给本机回的数据包</p><p>从OUTPUT链出去的包包括<br />本机访问访其它主机的数据包<br />其它主机访问本机时，本机给其它主机回的数据包</p><hr /><h3 id="iptables扩展命令"><a class="markdownIt-Anchor" href="#iptables扩展命令"></a> iptables扩展命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看扩展命令icmp的用法</span><br>iptables -m icmp -h<br><br><span class="hljs-comment"># 扩展命令icmp的用法</span><br>iptables -t filter -A INPUT -p icmp -m icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><hr /><h2 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h2><h5 id="拒接80端口访问"><a class="markdownIt-Anchor" href="#拒接80端口访问"></a> 拒接80端口访问</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -I INPUT -s 192.168.10.124 -p tcp --dport 80 -j DROP<br>iptables -t filter -I INPUT -d 192.168.10.62 -p tcp --dport 80 -j DROP<br>iptables -t filter -I OUTPUT -d 192.168.10.124 -p tcp --sport 80 -j DROP<br>iptables -t filter -I OUTPUT -s 192.168.10.62 -p tcp --sport 80 -j DROP<br></code></pre></td></tr></table></figure><h5 id="只允许http-ftp-sshd"><a class="markdownIt-Anchor" href="#只允许http-ftp-sshd"></a> 只允许http, ftp, sshd</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-function"><span class="hljs-title">iptbl</span></span>()&#123;<br>        iptables -F<br>        iptables -t filter -P INPUT DROP<br>        iptables -t filter -P OUTPUT DROP<br><br>        iptables -t filter -I INPUT -p tcp --dport 80 -j ACCEPT<br>        iptables -t filter -I OUTPUT -j ACCEPT<br><br>        iptables -t filter -I INPUT -p tcp --dport 22 -j ACCEPT<br><br>        iptables -t filter -I INPUT -p tcp --dport 25565 -j ACCEPT<br><br>        iptables -t filter -I INPUT -p tcp --dport 20 -j ACCEPT<br>        iptables -t filter -I INPUT -p tcp --dport 21 -j ACCEPT<br><br>        iptables -t filter -I INPUT -i lo -j ACCEPT<br>        iptables -t filter -I OUTPUT -o lo -j ACCEPT<br>&#125;<br>iptbl<br></code></pre></td></tr></table></figure><h5 id="别人ping不通我-我可以ping别人"><a class="markdownIt-Anchor" href="#别人ping不通我-我可以ping别人"></a> 别人ping不通我, 我可以ping别人</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -p icmp -m icmp --icmp-type echo-reply -j ACCEPT<br></code></pre></td></tr></table></figure><h5 id="禁止1921681010到19216810100的人访问我的http服务"><a class="markdownIt-Anchor" href="#禁止1921681010到19216810100的人访问我的http服务"></a> 禁止192.168.10.10到192.168.10.100的人访问我的http服务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -p tcp --dport 80 -m iprange --src-range 192.168.10.10-192.168.10.100 -j DROP<br></code></pre></td></tr></table></figure><h5 id="禁止某个mac地址访问"><a class="markdownIt-Anchor" href="#禁止某个mac地址访问"></a> 禁止某个MAC地址访问</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -m mac --mac-source 52:54:00:20:77:86 -j DROP<br></code></pre></td></tr></table></figure><h5 id="禁止19216810124访问我的212280端口"><a class="markdownIt-Anchor" href="#禁止19216810124访问我的212280端口"></a> 禁止192.168.10.124访问我的21,22,80端口</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t filter -A INPUT -s 192.168.10.124 -p tcp -m multiport --destination-ports 21,22,80 -j DROP<br></code></pre></td></tr></table></figure><h5 id=""><a class="markdownIt-Anchor" href="#"></a> </h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>iptables -F<br><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_NEW&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_ES&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_RE&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;IN_21_IN&quot;</span><br><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_NEW&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_ES&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_RE&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;OUT_21_IN&quot;</span><br><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_NEW&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_ES&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_RE&quot;</span><br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;OUT_20_IN&quot;</span><br><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state NEW -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_NEW&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state ES -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_ES&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state RE -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_RE&quot;</span><br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state IN -j LOG --log-prefix <span class="hljs-string">&quot;IN_20_IN&quot;</span><br></code></pre></td></tr></table></figure><h5 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> </h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>iptables -F<br>iptables -t filter -P INPUT DROP<br>iptables -t filter -P OUTPUT DROP<br><br>iptables -t filter -I INPUT -i lo -j ACCEPT<br>iptables -t filter -I OUTPUT -o lo -j ACCEPT<br><br>modprobe nf_conntrack_ftp<br><br>iptables -t filter -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 80 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 80 -m state --state ES -j ACCEPT<br><br><span class="hljs-comment"># port</span><br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state NEW -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 21 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 21 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state RE -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 20 -m state --state ES -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 20 -m state --state ES -j ACCEPT<br><span class="hljs-comment"># pasv</span><br>iptables -t filter -A INPUT -p tcp -m state --state RE -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp -m state --state ES -j ACCEPT<br>iptables -t filter -A INPUT -p tcp -m state --state ES -j ACCEPT<br><br>iptables -t filter -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT<br>iptables -t filter -A INPUT -p tcp --dport 22 -m state --state ES -j ACCEPT<br>iptables -t filter -A OUTPUT -p tcp --sport 22 -m state --state ES -j ACCEPT<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件包管理 - yum-config-manager</title>
      <link href="/posts/5ea60cee/"/>
      <url>/posts/5ea60cee/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>yum-config-manager</td><td>–add-repo=URL</td><td>添加软件源</td><td>添加指定 URL 的软件源到系统中</td></tr><tr><td>yum-config-manager</td><td>–enable repository</td><td>启用软件源</td><td>启用指定的软件源</td></tr><tr><td>yum-config-manager</td><td>–disable repository</td><td>禁用软件源</td><td>禁用指定的软件源</td></tr><tr><td>yum-config-manager</td><td>–enableplugin plugin_name</td><td>启用插件</td><td>启用指定的插件</td></tr><tr><td>yum-config-manager</td><td>–disableplugin plugin_name</td><td>禁用插件</td><td>禁用指定的插件</td></tr><tr><td>yum-config-manager</td><td>–add-repo=FILE</td><td>添加软件源配置文件</td><td>添加指定文件中定义的软件源到系统中</td></tr><tr><td>yum-config-manager</td><td>–enable-repo=repository</td><td>启用指定名称的软件源</td><td>启用指定名称的软件源</td></tr><tr><td>yum-config-manager</td><td>–disable-repo=repository</td><td>禁用指定名称的软件源</td><td>禁用指定名称的软件源</td></tr><tr><td>yum-config-manager</td><td>–setopt=repository.option=value</td><td>设置软件源选项值</td><td>设置指定软件源的选项值</td></tr><tr><td>yum-config-manager</td><td>–save --setopt=repository.option=value</td><td>保存并设置软件源选项值</td><td>保存并设置指定软件源的选项值</td></tr><tr><td>yum-config-manager</td><td>–add-repo=URL --save</td><td>添加软件源并保存</td><td>添加指定 URL 的软件源并保存到系统中</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件包管理 - yum</title>
      <link href="/posts/423eb939/"/>
      <url>/posts/423eb939/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>yum</td><td>install package_name</td><td>安装软件包</td><td>安装指定的软件包及其依赖项</td></tr><tr><td>yum</td><td>update</td><td>更新所有已安装的软件包</td><td>更新系统中所有已安装的软件包到最新版本</td></tr><tr><td>yum</td><td>upgrade package_name</td><td>升级软件包</td><td>如果软件包已安装，将其升级到最新版本</td></tr><tr><td>yum</td><td>remove package_name</td><td>卸载软件包</td><td>从系统中卸载指定的软件包</td></tr><tr><td>yum</td><td>search keyword</td><td>搜索软件包</td><td>根据关键字搜索可用的软件包</td></tr><tr><td>yum</td><td>info package_name</td><td>查看软件包信息</td><td>显示指定软件包的详细信息</td></tr><tr><td>yum</td><td>list installed</td><td>列出已安装的软件包</td><td>显示系统中所有已安装的软件包信息</td></tr><tr><td>yum</td><td>list available</td><td>列出可用的软件包</td><td>显示可用的软件包信息</td></tr><tr><td>yum</td><td>provides file_path</td><td>查询文件所属的软件包</td><td>显示指定文件所属的软件包信息</td></tr><tr><td>yum</td><td>clean all</td><td>清理缓存和临时文件</td><td>清理 YUM 的缓存和临时文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件包管理 - rpm</title>
      <link href="/posts/331ca29d/"/>
      <url>/posts/331ca29d/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>rpm</td><td>-i package.rpm</td><td>安装软件包</td><td>安装指定的 RPM 软件包</td></tr><tr><td>rpm</td><td>-U package.rpm</td><td>升级软件包</td><td>如果软件包已经安装，将其升级到指定版本</td></tr><tr><td>rpm</td><td>-e package_name</td><td>卸载软件包</td><td>从系统中卸载指定的软件包</td></tr><tr><td>rpm</td><td>-q package_name</td><td>查询软件包</td><td>显示指定软件包的详细信息</td></tr><tr><td>rpm</td><td>-qa</td><td>查询所有已安装的软件包</td><td>显示系统中所有已安装的软件包信息</td></tr><tr><td>rpm</td><td>-ql package_name</td><td>列出软件包文件</td><td>显示软件包中包含的文件列表</td></tr><tr><td>rpm</td><td>-Uvh package.rpm</td><td>安装或升级软件包并显示过程</td><td>显示安装或升级软件包的详细过程</td></tr><tr><td>rpm</td><td>-ivh package.rpm</td><td>安装软件包并显示过程</td><td>显示安装软件包的详细过程</td></tr><tr><td>rpm</td><td>-evh package_name</td><td>卸载软件包并显示过程</td><td>显示卸载软件包的详细过程</td></tr><tr><td>rpm</td><td>-qf file_path</td><td>查询文件所属的软件包</td><td>显示指定文件属于哪个软件包</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux软件包管理 - 源码包</title>
      <link href="/posts/2293a009/"/>
      <url>/posts/2293a009/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>参数</th><th>作用</th><th>注释</th></tr></thead><tbody><tr><td>./configure</td><td>-prefix=&lt;install_path&gt;</td><td>配置源码包</td><td>设置安装路径</td></tr><tr><td>make</td><td></td><td>编译源码包</td><td>根据配置进行源码编译</td></tr><tr><td>make install</td><td></td><td>安装源码包</td><td>将编译后的程序和文件安装到指定路径</td></tr><tr><td>make clean</td><td></td><td>清理编译产生的文件</td><td>删除编译生成的临时文件</td></tr><tr><td>make uninstall</td><td></td><td>卸载已安装的源码包</td><td>从系统中移除已安装的源码包</td></tr><tr><td>make distclean</td><td></td><td>清理源码包及配置文件</td><td>删除编译生成的文件和配置信息</td></tr><tr><td>./autogen.sh</td><td></td><td>自动生成配置脚本</td><td>在源码包中运行自动生成配置脚本</td></tr><tr><td>./configure</td><td>–enable-feature</td><td>启用指定功能</td><td>在配置过程中启用指定的功能</td></tr><tr><td>make -jN</td><td></td><td>并行编译</td><td>使用 N 个线程并行编译加快编译速度</td></tr><tr><td>make test</td><td></td><td>运行测试</td><td>运行源码包中的测试用例</td></tr><tr><td>make dist</td><td></td><td>创建源码包的发布版本</td><td>创建用于发布的源码包版本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>右键菜单的简单实现方式</title>
      <link href="/posts/d5d18b1/"/>
      <url>/posts/d5d18b1/</url>
      
        <content type="html"><![CDATA[<h2 id="pug部分"><a class="markdownIt-Anchor" href="#pug部分"></a> pug部分</h2><p>忘记从哪儿看到的了, 一个现在已经不运营的博客<br />分别在需要的地方引用:</p><ol><li><code>javascript:initWordCountOnly()</code></li><li><code>javascript:initReadingTimeOnly()</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pug">#right-menu<br>.right-menu-list<br>a.right-menu-item(href=&quot;javascript:window.history.back();&quot;)<br>i.bi.bi-arrow-left-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.location.reload();&quot;)<br>i.bi.bi-arrow-down-right-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.history.forward();&quot;)<br>i.bi.bi-arrow-right-circle-fill<br>a.right-menu-item(href=&quot;javascript:window.location.href = window.location.origin;&quot;)<br>i.bi.bi-house-fill<br>.right-menu-list<br>a.right-menu-item.row.m-0.p-0(href=&quot;javascript:randomPage();&quot;)<br>.col-3.m-0.p-0<br>i.bi.bi-shuffle<br>.col.m-0.p-0<br>span=&#x27;随机访问&#x27;<br>.right-menu-list.hide#menu-text<br>a.right-menu-item(href=&quot;javascript:rmf.copySelect();&quot;)<br>i.bi.bi-clipboard-fill<br>span=&#x27;复制内容&#x27;<br></code></pre></td></tr></table></figure><hr /><h2 id="js部分"><a class="markdownIt-Anchor" href="#js部分"></a> js部分</h2><p>随便写一个js代码即可, 我用最简单的方式来办</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> rmf = &#123;&#125;;<br><br>rmf.<span class="hljs-property">showRightMenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">isTrue, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> $rightMenu = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (isTrue) &#123;<br>        $rightMenu<br>            .<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;top&#x27;</span>, x + <span class="hljs-string">&#x27;px&#x27;</span>)<br>            .<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;left&#x27;</span>, y + <span class="hljs-string">&#x27;px&#x27;</span>)<br>            .<span class="hljs-title function_">stop</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>)<br>            .<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">80</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        $rightMenu.<span class="hljs-title function_">stop</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">80</span>);<br>    &#125;<br>&#125;<br><br>rmf.<span class="hljs-property">copySelect</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;Copy&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>&#125;<br><br>rmf.<span class="hljs-property">scrollToTop</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    btf.<span class="hljs-title function_">scrollToDest</span>(<span class="hljs-number">0</span>, <span class="hljs-number">500</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-keyword">if</span> (event.<span class="hljs-property">ctrlKey</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        $(<span class="hljs-string">&#x27;.right-menu-group.hide&#x27;</span>).<span class="hljs-title function_">hide</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getSelection</span>().<span class="hljs-title function_">toString</span>()) &#123;<br>            $(<span class="hljs-string">&#x27;#menu-text&#x27;</span>).<span class="hljs-title function_">show</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> pageX = event.<span class="hljs-property">clientX</span> + <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">let</span> pageY = event.<span class="hljs-property">clientY</span>;<br>        <span class="hljs-keyword">let</span> rmWidth = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>).<span class="hljs-title function_">width</span>();<br>        <span class="hljs-keyword">let</span> rmHeight = $(<span class="hljs-string">&#x27;#right-menu&#x27;</span>).<span class="hljs-title function_">height</span>();<br>        <span class="hljs-keyword">if</span> (pageX + rmWidth &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>) &#123;<br>            pageX -= rmWidth + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (pageY + rmHeight &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>) &#123;<br>            pageY -= pageY + rmHeight - <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>        &#125;<br><br>        rmf.<span class="hljs-title function_">showRightMenu</span>(<span class="hljs-literal">true</span>, pageY, pageX);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;;<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        rmf.<span class="hljs-title function_">showRightMenu</span>(<span class="hljs-literal">false</span>);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomPage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> posts = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;a[href*=&quot;/post/&quot;], a.recent-post-item, a.textTags-posts-item&#x27;</span>));<br><br>    <span class="hljs-keyword">if</span> (posts.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">const</span> randomPost = posts[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * posts.<span class="hljs-property">length</span>)];<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = randomPost.<span class="hljs-property">href</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> randomPage = pages[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * pages.<span class="hljs-property">length</span>)];<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = randomPage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="stylus"><a class="markdownIt-Anchor" href="#stylus"></a> stylus</h2><p>简单的做一个样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#right-menu</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">none</span><br><span class="hljs-attribute">position</span> fixed<br><span class="hljs-attribute">width</span> <span class="hljs-number">160px</span><br><span class="hljs-attribute">height</span> fit-<span class="hljs-attribute">content</span><br><span class="hljs-attribute">top</span> <span class="hljs-number">10%</span><br><span class="hljs-attribute">left</span> <span class="hljs-number">10%</span><br><span class="hljs-attribute">background-color</span> $<span class="hljs-attribute">background-color</span>-<span class="hljs-attribute">right</span>-<span class="hljs-selector-tag">menu</span><br><span class="hljs-attribute">border</span> <span class="hljs-number">1px</span> solid $<span class="hljs-attribute">background-color</span>-<span class="hljs-selector-tag">main</span>-black<br><span class="hljs-attribute">border-radius</span> <span class="hljs-number">8px</span><br><span class="hljs-attribute">z-index</span> <span class="hljs-number">10000</span><br><span class="hljs-attribute">transition</span> <span class="hljs-number">0.3s</span><br><span class="hljs-selector-class">.right-menu-list</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">7px</span> <span class="hljs-number">6px</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">flex</span><br><span class="hljs-attribute">justify-content</span> space-between<br><span class="hljs-selector-class">.right-menu-list</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:nth-last-child</span>(<span class="hljs-number">1</span>))<br><span class="hljs-attribute">border-bottom</span> <span class="hljs-number">1px</span> dashed <span class="hljs-selector-id">#4259ef23</span><br><span class="hljs-selector-class">.right-menu-item</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">160px</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">border-radius</span> <span class="hljs-number">8px</span><br><span class="hljs-attribute">transition</span> <span class="hljs-number">0.3s</span><br><span class="hljs-attribute">color</span> $<span class="hljs-attribute">font</span>-home-black<br><span class="hljs-attribute">text-decoration</span> <span class="hljs-attribute">none</span><br>&amp;<span class="hljs-selector-pseudo">:hover</span><br><span class="hljs-attribute">background-color</span> $<span class="hljs-attribute">font</span>-home-<span class="hljs-selector-tag">main</span><br><span class="hljs-attribute">color</span> $<span class="hljs-attribute">font</span>-data-<span class="hljs-selector-tag">main</span><br><span class="hljs-selector-tag">i</span><br><span class="hljs-attribute">display</span> inline-block<br><span class="hljs-attribute">text-align</span> center<br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">width</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">30px</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span><br><span class="hljs-selector-tag">span</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">30px</span><br><span class="hljs-selector-class">.right-menu-line</span><br><span class="hljs-selector-class">.right-menu-item</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">flex</span><br><span class="hljs-attribute">height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">padding</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span><br>*<br><span class="hljs-attribute">height</span> <span class="hljs-number">40px</span><br><span class="hljs-attribute">line-height</span> <span class="hljs-number">40px</span><br><span class="hljs-selector-class">.hide</span><br><span class="hljs-attribute">display</span> <span class="hljs-attribute">none</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何统计字数与计算阅读时间</title>
      <link href="/posts/dc41cc6a/"/>
      <url>/posts/dc41cc6a/</url>
      
        <content type="html"><![CDATA[<h2 id="js部分"><a class="markdownIt-Anchor" href="#js部分"></a> JS部分</h2><p>这个代码是之前的, 我用的是ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">WordCountUtils</span> = &#123;<br>    <span class="hljs-attr">countWords</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 你文章所在的ID或者类</span><br>        <span class="hljs-keyword">const</span> articleContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-content&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (!articleContent) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">const</span> clone = articleContent.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 这部分是不需要统计的, 尤其是code代码块, 俩面东西过多, 如果不排除的话字数非常夸张</span><br>        <span class="hljs-keyword">const</span> excludeSelectors = [<span class="hljs-string">&#x27;pre&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;script&#x27;</span>, <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;.highlight&#x27;</span>, <span class="hljs-string">&#x27;.giscus-frame&#x27;</span>];<br>        excludeSelectors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">selector</span> =&gt;</span> &#123;<br>            clone.<span class="hljs-title function_">querySelectorAll</span>(selector).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">remove</span>());<br>        &#125;);<br><br>        <span class="hljs-keyword">const</span> text = clone.<span class="hljs-property">textContent</span> || clone.<span class="hljs-property">innerText</span>;<br>        <span class="hljs-keyword">const</span> chineseChars = (text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[\u4e00-\u9fa5]/g</span>) || []).<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">const</span> englishWords = (text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\b[a-zA-Z]+\b/g</span>) || []).<span class="hljs-property">length</span>;<br><br>        <span class="hljs-keyword">return</span> chineseChars + englishWords;<br>    &#125;,<br><br>    <span class="hljs-attr">calculateReadingTime</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> words = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">countWords</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(words / <span class="hljs-number">300</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">initWordCountOnly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> words = <span class="hljs-title class_">WordCountUtils</span>.<span class="hljs-title function_">countWords</span>();<br>    <span class="hljs-keyword">const</span> countBody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-count-body&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (countBody) &#123;<br>        countBody.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-property">textContent</span> = words;<br>    &#125;<br>    <span class="hljs-keyword">return</span> words;<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">initReadingTimeOnly</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> readingTime = <span class="hljs-title class_">WordCountUtils</span>.<span class="hljs-title function_">calculateReadingTime</span>();<br>    <span class="hljs-keyword">const</span> timeBody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;post-time-body&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (timeBody) &#123;<br>        timeBody.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-property">textContent</span> = readingTime;<br>    &#125;<br>    <span class="hljs-keyword">return</span> readingTime;<br>&#125;;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">initWordCountOnly</span>();<br>        <span class="hljs-title function_">initReadingTimeOnly</span>();<br>    &#125;, <span class="hljs-number">100</span>);<br>&#125;);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Pjax</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:success&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">initWordCountOnly</span>();<br>            <span class="hljs-title function_">initReadingTimeOnly</span>();<br>        &#125;, <span class="hljs-number">300</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="pug部分"><a class="markdownIt-Anchor" href="#pug部分"></a> Pug部分</h2><p>分别在需要的地方引用:</p><ol><li>javascript:initWordCountOnly()</li><li>javascript:initReadingTimeOnly()</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pug">#post-count-body.p-2 <br>    a(href=&quot;javascript:initWordCountOnly()&quot;) 0 <br>    span 字<br>span#post-time-head.p-2 耗时:<br>#post-time-body.p-2 <br>    a(href=&quot;javascript:initReadingTimeOnly()&quot;) 0 <br>    span 分钟<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章阅读进度百分比的实现</title>
      <link href="/posts/28109/"/>
      <url>/posts/28109/</url>
      
        <content type="html"><![CDATA[<h2 id="pug相关"><a class="markdownIt-Anchor" href="#pug相关"></a> pug相关</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pug">//- 选择一个你需要的ID或者类<br>.reading-progress 0%<br></code></pre></td></tr></table></figure><h2 id="js相关"><a class="markdownIt-Anchor" href="#js相关"></a> js相关</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ReadingProgress</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> scrollContainer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> progressText = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateReadingProgress</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> scrollTop = scrollContainer.<span class="hljs-property">scrollTop</span>;<br>        <span class="hljs-keyword">const</span> scrollHeight = scrollContainer.<span class="hljs-property">scrollHeight</span>;<br>        <span class="hljs-keyword">const</span> clientHeight = scrollContainer.<span class="hljs-property">clientHeight</span>;<br>        <span class="hljs-keyword">const</span> maxScrollTop = scrollHeight - clientHeight;<br>        <br>        <span class="hljs-keyword">const</span> progress = maxScrollTop &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>((scrollTop / maxScrollTop) * <span class="hljs-number">100</span>, <span class="hljs-number">100</span>) : <span class="hljs-number">0</span>;<br><br>        progressText.<span class="hljs-property">textContent</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(progress) + <span class="hljs-string">&#x27;%&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// init</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 你的文章所在的ID或者类</span><br>        scrollContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#post-content&#x27;</span>);<br>        <span class="hljs-comment">// 你的0%所在的类或者ID</span><br>        progressText = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.reading-progress&#x27;</span>);<br><br>        <span class="hljs-keyword">if</span> (!scrollContainer || !progressText) <span class="hljs-keyword">return</span>;<br><br>        scrollContainer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, updateReadingProgress);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, updateReadingProgress);<br><br>        <span class="hljs-title function_">updateReadingProgress</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        init<br>    &#125;;<br>&#125;)();<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-title class_">ReadingProgress</span>.<span class="hljs-property">init</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, <span class="hljs-title class_">ReadingProgress</span>.<span class="hljs-property">init</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章阅读进度条的实现</title>
      <link href="/posts/22939/"/>
      <url>/posts/22939/</url>
      
        <content type="html"><![CDATA[<h2 id="pug相关"><a class="markdownIt-Anchor" href="#pug相关"></a> pug相关</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pug">//- 找到一个你想用的id或者类<br>#layout-top<br></code></pre></td></tr></table></figure><h2 id="js相关"><a class="markdownIt-Anchor" href="#js相关"></a> js相关</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">initLayoutTopSync</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> lt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#layout-top&#x27;</span>),<br>        pt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.reading-progress-text&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!lt || !pt) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">const</span> fill = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// 这里是定义颜色样式什么的</span><br>    fill.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">&#x27;position:absolute;top:0;left:0;height:5px;background:rgba(59,124,255,0.4);width:0%;&#x27;</span>;<br>    lt.<span class="hljs-title function_">appendChild</span>(fill);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">() =&gt;</span> fill.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = (<span class="hljs-built_in">parseFloat</span>(pt.<span class="hljs-property">textContent</span>) || <span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;%&#x27;</span>)<br>        .<span class="hljs-title function_">observe</span>(pt, &#123;<br>            <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span><br>        &#125;);<br><br>    fill.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = (<span class="hljs-built_in">parseFloat</span>(pt.<span class="hljs-property">textContent</span>) || <span class="hljs-number">0</span>) + <span class="hljs-string">&#x27;%&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, initLayoutTopSync);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pjax:complete&#x27;</span>, initLayoutTopSync);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在electron中使用pug和stylus</title>
      <link href="/posts/54125/"/>
      <url>/posts/54125/</url>
      
        <content type="html"><![CDATA[<h2 id="在electron中使用pug"><a class="markdownIt-Anchor" href="#在electron中使用pug"></a> 在electron中使用pug</h2><p>下载<a href="https://www.npmjs.com/package/electron-pug">electron-pug</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install electron-pug<br></code></pre></td></tr></table></figure><p>在你的main.js中引用electron-pug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> setupPug = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron-pug&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在createWindow的BrowserWindow之前添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> pug;<br><span class="hljs-keyword">try</span> &#123;<br>    pug = <span class="hljs-keyword">await</span> <span class="hljs-title function_">setupPug</span>(&#123;<br>        <span class="hljs-attr">pretty</span>: <span class="hljs-literal">true</span><br>    &#125;);<br>    pug.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;electron-pug 错误&#x27;</span>, err));<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;无法启动 &#x27;electron-pug&#x27;&quot;</span>, err);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h2 id="在electron中使用stylus"><a class="markdownIt-Anchor" href="#在electron中使用stylus"></a> 在electron中使用stylus</h2><p>下载stylus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install stylus stylus-loader<br></code></pre></td></tr></table></figure><p>然后直接用就可以了, stylus会在运行时自动编译为css</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> pug </tag>
            
            <tag> stylus </tag>
            
            <tag> 预编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>telegram出现SMS Fee解决方法</title>
      <link href="/posts/42785/"/>
      <url>/posts/42785/</url>
      
        <content type="html"><![CDATA[<blockquote><p>警惕广告诈骗, 市面上的解决方法大多是骗人的</p></blockquote><h2 id="sim卡"><a class="markdownIt-Anchor" href="#sim卡"></a> SIM卡</h2><p>经过我的测试:</p><table><thead><tr><th style="text-align:center">国家</th><th style="text-align:center">测试</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">英国</td><td style="text-align:center">实体卡(giffgaff)</td><td style="text-align:center">SMS Fee</td></tr><tr><td style="text-align:center">美国</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">SMS Fee</td></tr><tr><td style="text-align:center">中国</td><td style="text-align:center">实体卡, 虚拟卡/实体卡(1069)</td><td style="text-align:center">OK</td></tr><tr><td style="text-align:center">阿曼</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">OK</td></tr><tr><td style="text-align:center">埃及</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">SMS Fee</td></tr><tr><td style="text-align:center">巴基斯坦</td><td style="text-align:center">虚拟卡</td><td style="text-align:center">SMS Fee</td></tr></tbody></table><h2 id="vpn"><a class="markdownIt-Anchor" href="#vpn"></a> VPN</h2><p>我主要有三个机场, 其中一个是长期稳定的双线新加坡, 其他两个是市面上普通的机场, 但是三家在英国实体卡的基础上都无法注册, 故而得出结论<br /><code>25.09.15开始: VPN已经无法决定是否能成功绕过SMS Fee, 建议使用中国(+86)开头的SIM卡进行注册</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 通讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> telegram </tag>
            
            <tag> 通讯 </tag>
            
            <tag> 社交 </tag>
            
            <tag> 飞机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程5 - zabbix自定义</title>
      <link href="/posts/51207/"/>
      <url>/posts/51207/</url>
      
        <content type="html"><![CDATA[<h2 id="定义一个应用集"><a class="markdownIt-Anchor" href="#定义一个应用集"></a> 定义一个应用集</h2><ol><li>点击 配置 &gt; 主机 &gt; 应用集</li><li>点击右上角的 <strong>创建应用集</strong><ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li></ul></li></ol><hr /><h2 id="定义一个监控项"><a class="markdownIt-Anchor" href="#定义一个监控项"></a> 定义一个监控项</h2><ol><li>点击 配置 &gt; 主机 &gt; 监控项</li><li>点击右上角的 <strong>创建监控项</strong> (带<code>*</code>的为必填)<ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li><li><strong>类型:</strong> 按需选择, 默认为 zabbix客户端</li><li><strong>键值:</strong> <code>net.if.in[ens33,bytes]</code> 这里填写一张要监控流量的网卡名, in是入, out是出, total是总量</li><li><strong>信息类型:</strong> 数字, 因为网络没有负数, 而我们也不需要看小数点后的信息</li><li><strong>单位:</strong> 这里默认为byte, 所以这里写bps, 也可以不写</li><li><strong>更新间隔:</strong> 10s, 即每十秒刷新一次, 1m就是一分钟刷新一次</li><li><strong>自定义时间间隔:</strong> 无特殊需求无需调整</li><li><strong>历史数据保留期:</strong> 按需选择</li><li><strong>趋势存储时间:</strong> 按需选择</li><li><strong>查看值:</strong> 不变</li><li><strong>新的应用集:</strong> 不选择</li><li><strong>应用集:</strong> 选择我们刚刚创建的应用集</li><li><strong>填入主机资产字段:</strong></li><li><strong>描述:</strong> 按需填写</li><li><strong>已启用:</strong> 启用</li></ul></li><li>点击 预处理 &gt; 预定步骤 &gt; 添加<ul><li><strong>名称:</strong> 每秒更改</li><li><strong>名称:</strong> 自定义倍数, 8</li></ul></li></ol><hr /><h2 id="为什么要自定义监控项"><a class="markdownIt-Anchor" href="#为什么要自定义监控项"></a> 为什么要自定义监控项</h2><p>Q:  为什么要自定义监控项?<br />A:  因为我们对不同的服务器环境有不同的需求<br />Q:  自定义监控项有什么作用?<br />A:  比如说我们可以对某个服务进行监控, 如果发现该服务没有正常运, 我们还可以用动作来修复</p><h2 id="创建监控项"><a class="markdownIt-Anchor" href="#创建监控项"></a> 创建监控项</h2><p>比如这里我们要对 dhcpd 服务进行监控<br />有两个方法, 一个是使用脚本来获取dhcpd服务的运行状态, 一个是直接使用zabbix比较方便的proc监控项</p><h3 id="proc方法"><a class="markdownIt-Anchor" href="#proc方法"></a> Proc方法</h3><h4 id="proc-监控项"><a class="markdownIt-Anchor" href="#proc-监控项"></a> proc 监控项</h4><ol><li>转到 <strong>配置</strong> &gt; <strong>主机</strong>, 选择要监控的主机</li><li>点击 <strong>创建监控项</strong> 填写以下信息:<ul><li><strong>名称</strong>: 名称随便, 但尽量要见名知意</li><li><strong>类型</strong>: 选择 Zabbix agent</li><li><strong>键</strong>: 使用 <mark>proc.num[dhcpd]</mark></li><li><strong>类型</strong>: 选择 数字</li><li><strong>更新间隔</strong>: 设置为 30s</li></ul></li></ol><p>图形按照自己需求是否创建, 毕竟只有 true(1) 和 false(0)</p><h4 id="proc触发器"><a class="markdownIt-Anchor" href="#proc触发器"></a> proc触发器</h4><ol><li>在主机的 <strong>触发器</strong> 标签下，点击 <strong>创建触发器</strong>。</li><li>填写以下信息:<ul><li><strong>名称</strong>: 名称随便, 但尽量要见名知意</li><li><strong>表达式</strong>:<ul><li>点击 添加 , 然后选择你的监控项, 结果 = 0</li><li>或者自己填 <mark>{host: proc.num[dhcpd].last()}=0</mark> 将 <code>host</code> 替换为你的主机名</li></ul></li><li><strong>严重性</strong>: 选择合适的严重性等级</li><li><strong>事件成功迭代:</strong><ul><li><strong>恢复表达式:</strong> <mark>{<a href="http://zabbix-server.com">zabbix-server.com</a>: proc.num[dhcpd].last()}=1</mark></li></ul></li></ul></li></ol><h4 id="配置动作"><a class="markdownIt-Anchor" href="#配置动作"></a> 配置动作</h4><ol><li>转到 <strong>配置</strong> &gt; <strong>动作</strong></li><li>点击 <strong>创建动作</strong></li><li>设置条件, 例如:<ul><li><strong>触发器</strong> 状态为 PROBLEM</li></ul></li><li>在操作中进行编辑<ul><li><strong>默认操作步骤持续时间:</strong> 60s</li><li><strong>操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>步骤:</strong> 1-1</li><li><strong>步骤持续时间:</strong> 0</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li><li><strong>条件:</strong></li></ul></li><li><strong>恢复操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li></ul></li></ul></li></ol><h3 id="脚本方法"><a class="markdownIt-Anchor" href="#脚本方法"></a> 脚本方法</h3><h4 id="编写监控脚本"><a class="markdownIt-Anchor" href="#编写监控脚本"></a> 编写监控脚本</h4><p>在你所想要对dhcp服务进行监控的服务器上编写一个脚本, 并且设置为可执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> systemctl is-active --quiet dhcpd; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> 1<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> 0<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>为了方便所以还是输出1和0, 不使用汉字 是 否 , 是为了降低故障率</p><blockquote><p>注意: 由于zabbix是用zabbix用户执行的,所以要把脚本放在一个所有用户都能访问的目录</p></blockquote><h4 id="脚本监控项"><a class="markdownIt-Anchor" href="#脚本监控项"></a> 脚本监控项</h4><ol><li>点击 配置 &gt; 主机 &gt; 监控项</li><li>点击右上角的 <strong>创建监控项</strong> (带<code>*</code>的为必填)<ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li><li><strong>类型:</strong> 按需选择, 默认为 zabbix客户端</li><li><strong>键值:</strong> 使用 <mark>system.run[/path/to/check_dhcpd.sh]</mark></li><li><strong>类型</strong>: 选择 数字</li><li><strong>更新间隔</strong>: 设置为 30s</li></ul></li></ol><h4 id="脚本触发器"><a class="markdownIt-Anchor" href="#脚本触发器"></a> 脚本触发器</h4><ol><li>在主机的 <strong>触发器</strong> 标签下，点击 <strong>创建触发器</strong>。</li><li>填写以下信息:<ul><li><strong>名称</strong>: 名称随便, 但尽量要见名知意</li><li><strong>表达式</strong>:<ul><li>点击 添加 , 然后选择你的监控项, 结果 = 0</li><li>或者自己填 <mark>{host:system.run[/path/to/check_dhcpd.sh].last()}=0</mark> 将 <code>host</code> 替换为你的主机名</li></ul></li><li><strong>严重性</strong>: 选择合适的严重性等级</li><li><strong>事件成功迭代:</strong><ul><li><strong>恢复表达式:</strong> <mark>{host:system.run[/path/to/check_dhcpd.sh].last()}=1</mark></li></ul></li></ul></li></ol><h4 id="配置动作-2"><a class="markdownIt-Anchor" href="#配置动作-2"></a> 配置动作</h4><ol><li>转到 <strong>配置</strong> &gt; <strong>动作</strong></li><li>点击 <strong>创建动作</strong></li><li>设置条件, 例如:<ul><li><strong>触发器</strong> 状态为 PROBLEM</li></ul></li><li>在操作中进行编辑<ul><li><strong>默认操作步骤持续时间:</strong> 60s</li><li><strong>操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>步骤:</strong> 1-1</li><li><strong>步骤持续时间:</strong> 0</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li><li><strong>条件:</strong></li></ul></li><li><strong>恢复操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li></ul></li></ul></li></ol><hr /><h2 id="定义一个聚合图形"><a class="markdownIt-Anchor" href="#定义一个聚合图形"></a> 定义一个聚合图形</h2><ol><li>点击 检测 &gt; 聚合图形 &gt; 编辑聚合图形</li><li>在其中选择即可实现聚合图形的效果</li></ol><hr /><h2 id="定义一个图形"><a class="markdownIt-Anchor" href="#定义一个图形"></a> 定义一个图形</h2><ol><li>点击 配置 &gt; 主机 &gt; 图形</li><li>点击右上角的 <strong>创建图表</strong> (带<code>*</code>的为必填)<ul><li><strong>名称:</strong> 名称随便, 但尽量要见名知意</li><li><strong>宽(px):</strong> 自定义</li><li><strong>高度(px):</strong> 自定义</li><li><strong>图形类别:</strong> 选择一个自己喜欢的</li><li><strong>显示图例:</strong></li><li><strong>查看工作时间:</strong></li><li><strong>查看触发器:</strong></li><li><strong>百分比线(左):</strong></li><li><strong>百分比线(右):</strong></li><li><strong>纵轴Y最小值MIN:</strong></li><li><strong>纵轴最大值:</strong></li><li><strong>监控项:</strong> 选中想要只作为图标的监控项</li></ul></li><li>点击预览即可进行查看</li></ol><hr /><h2 id="触发器是什么"><a class="markdownIt-Anchor" href="#触发器是什么"></a> 触发器是什么?</h2><p>监控项仅负责收集数据,  而通常收集数据的目的还包括在某指标对应的数据超出合理范围时给相关人员发送告警信息,  &quot;触发器&quot;正是用于为监控项所收集的数据定义的阈值</p><p>每一个触发器仅能关联至一个监控项,  但可以为一个监控项同时使用多个触发器. 事实上,  为一个监控项定义多个具有不同阈值的触发器,  可以实现不同级别的报警功能</p><p>一个触发器由一个表达式构成,  它定义了监控项所采取的数据的一个阈值</p><p>一但某次采集的数据超出了此触发器定义的阈值,  触发器状态将会装换为&quot;problem&quot;; 而当采取的数据再次回归至合理范围内时,  其状态将重新返回&quot;ok&quot;</p><h2 id="触发器表达式"><a class="markdownIt-Anchor" href="#触发器表达式"></a> 触发器表达式</h2><p>触发器表达式高度灵活,  可以创建出非常复杂的测试条件<br />基本的触发器表达式如下所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;&lt;server&gt;:&lt;key&gt;&lt;<span class="hljs-keyword">function</span>&gt;&#123;&lt;parameter&gt;&#125;&#125;&lt;operator&gt;&lt;constant&gt;<br></code></pre></td></tr></table></figure><ul><li><strong>server:</strong> 主机名</li><li><strong>key:</strong> 主机上关系的相应监控项的key</li><li><strong>function:</strong> 评估采集到的数据是否在合理范围内时所使用的函数,  其评估过程可以根据采集的数据, 当前时间及其他因素进行<ul><li>目前触发器所支持的函数有: avg count change date dayofweek delta diff iregexp last max min nodata now sum 等</li></ul></li><li><strong>parameter:</strong> 函数参数 大多数数值函数可以接受秒数为其参数,  而如果在数值参数之前使用&quot;#&quot;作为前缀,  则表示为最近几次的取值,  如sum(300)表示300秒内所有的取值之和,  而sum(#10)则表示最近10次取值之和<ul><li>此外avg count last min max还支持使用第二个参数用于完成时间限定: 例如 max(1h, 7d)将返回一周之前1小时内的最大值</li></ul></li></ul><h3 id="操作符"><a class="markdownIt-Anchor" href="#操作符"></a> 操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">/<br>*<br>-<br>+<br>&lt;<br>&gt;<br># 不等于<br>=<br>&amp; 逻辑与<br>| 逻辑或<br></code></pre></td></tr></table></figure><h4 id="例如"><a class="markdownIt-Anchor" href="#例如"></a> 例如:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;server.<span class="hljs-property">agent</span>.<span class="hljs-property">com</span>:system.<span class="hljs-property">cpu</span>.<span class="hljs-property">load</span>[all, avg1].<span class="hljs-title function_">last</span>(<span class="hljs-number">0</span>)&#125;&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><blockquote><p>表示主机server.agent.com上所有cpu的过去一分钟内的平均负载的最后一次取值大于3时将触发状态转换<br />对last函数来说, last(0)相当于last(#1)</p></blockquote><h2 id="创建触发器"><a class="markdownIt-Anchor" href="#创建触发器"></a> 创建触发器</h2><ol><li>点击 配置 &gt; 主机 &gt; 触发器</li><li>点击 <strong>创建触发器</strong> (带<code>*</code>的为必填)<ul><li>名称: 名称随便,  但尽量要见名知意</li><li>运营数据:</li><li>严重性: 根据自己需求来选择</li><li>表达式: 根据自己需求来填写</li><li>事件成功迭代:</li><li>问题事件生成模式:</li><li>事件成功关闭:</li><li>允许手动关闭:</li><li>URL:</li><li>描述:</li></ul></li></ol><h2 id="触发器触发执行动作"><a class="markdownIt-Anchor" href="#触发器触发执行动作"></a> 触发器触发执行动作</h2><p>在配置好的监控和触发器之后,  一旦正常工作中的某触发器状态发生改变,  一般意味着有异常情况发生,  此时通常需要采取一定的动作(action),  如告警或者执行远程命令等.</p><p>并非所有的触发器状态发生改变的场景都需要对其进行干预,  如装变为ok状态时,  相应的,  如果触发器的状态装变为problem,  就需要告知所有关心其相关监控指标的人员了.</p><p>通知(notifcation)是zabbix中最常用的动作之一.</p><h3 id="zabbix通知"><a class="markdownIt-Anchor" href="#zabbix通知"></a> zabbix通知</h3><p>一般需要两个步骤:</p><ul><li>定义所需的&quot;媒介&quot;: 通常指发送信息的途径,  如邮件,  Jabber和SMS等;</li><li>配置一个&quot;动作&quot;: 发送信息至某&quot;媒介&quot;;</li><li>动作由&quot;条件&quot;和&quot;操作&quot;组成,  他的逻辑为当&quot;条件&quot;满足时,  就执行响应的&quot;操作&quot;;</li><li>发送通知和执行远程命令是两个最基本的动作</li></ul><h3 id="zabbix事件"><a class="markdownIt-Anchor" href="#zabbix事件"></a> zabbix事件</h3><p>zabbix的事件是基于时间戳进行标记的, 它们是采取动作如发送邮件通知的基础, 其主要有三种途径:</p><ul><li>触发器事件:触发器状态每次发生改变, 都会生成相应事件, 且通常包含详细信息, 如发生的时间及新的状态等;</li><li>发现(discovery)事件:zabbix会周期性的扫描&quot;网络发现规则&quot;中指定的IP范围, 一旦发现主机或服务, 就会生成一个或几个发现事件;</li><li>发现事件有8类:service up ,  service down ,  host up,  host down,  service discovered ,  service lost, host discovered和host lost;</li><li>主动agent自动发现事件(也称作&quot;自动注册事件&quot;):当一个此前状态未知的主机agent发起检测请求时会生成此类事件.</li><li>因此, zabbix的通知机制也称作基于事件的通知机制, 也只有理解了事件本身, 才能定制出符合需求的通知系统</li></ul><h3 id="zabbix媒介"><a class="markdownIt-Anchor" href="#zabbix媒介"></a> zabbix媒介</h3><p>在zabbix中, 媒介指发送通知消息的通道, 其通常有以下几种类型:</p><ul><li>E-mail: 电子邮件,即通知邮件的方式发送通知信息</li><li>SMS: 手机短信,即通过连接至zabbix服务的GSM Modem发送通知</li><li>Jabber: Jabber消息:Jabber是一个开放的,基于XML的协议,能够实现基于Internet或LAN的即时通讯服务</li><li>自定义的通知脚本: 以上方式不能满足需求时:zabbix可以调用位于其配置文件&quot;AlterScriptsPath&quot;变量所定义脚本查找目录中的脚本来完成通知功能</li></ul><h2 id="定义报警媒介"><a class="markdownIt-Anchor" href="#定义报警媒介"></a> 定义报警媒介</h2><ol><li>依次点击 管理 &gt; 媒介 &gt; 创建媒介类型</li><li>报警媒介类型:<ul><li><strong>名称:</strong> 名称随便,  但尽量要见名知意</li><li><strong>类型:</strong> 电子邮件</li><li><strong>SMTP服务器:</strong> localhost</li><li><strong>SMTP服务器端口:</strong> 25</li><li><strong>SMTP HELO:</strong> localhost</li><li><strong>SMTP电邮:</strong> zabbix-server@localhost</li><li><strong>安全连接:</strong> 无</li><li><strong>认证:</strong> 无</li><li><strong>消息格式:</strong> HTML</li><li><strong>描述:</strong></li></ul></li></ol><h2 id="用户接受报警媒介"><a class="markdownIt-Anchor" href="#用户接受报警媒介"></a> 用户接受报警媒介</h2><ol><li>依次点击 管理 &gt; 用户 &gt; admin &gt; 报警媒介</li><li>点击报警媒介的添加来添加一个新的类型<ul><li><strong>类型:</strong> 选择刚刚创建的媒介</li><li><strong>收件人:</strong> <a href="mailto:root@localhost.com">root@localhost.com</a></li><li><strong>当启用时:</strong> 7x24</li><li><strong>如果存在严重性则使用:</strong> 全选</li><li>点击更新即可</li></ul></li></ol><h2 id="定义动作"><a class="markdownIt-Anchor" href="#定义动作"></a> 定义动作</h2><ol><li>依次点击 配置 &gt; 动作 &gt; 创建动作</li><li>在动作中进行编辑<ul><li><strong>名称:</strong> 名称随便,  但尽量要见名知意</li><li><strong>条件:</strong><ul><li><strong>类型:</strong> 触发器</li><li><strong>操作者:</strong> 等于</li><li><strong>触发器:</strong> 选择你创建的触发器</li></ul></li></ul></li><li>在操作中进行编辑<ul><li><strong>默认操作步骤持续时间:</strong> 60s</li><li><strong>操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>步骤:</strong> 1-1</li><li><strong>步骤持续时间:</strong> 0</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li><li><strong>条件:</strong></li></ul></li><li><strong>恢复操作:</strong><ul><li><strong>操作类型:</strong> 发送消息</li><li><strong>发送给用户组:</strong> 按需选择</li><li><strong>发送给用户:</strong> 按需选择, 我这里选择admin</li><li><strong>仅送到:</strong> 填写我们刚刚创建的触发器</li><li><strong>自定义消息内容:</strong> 按需填写, 可以使用官网的变量(占位符)</li></ul></li></ul></li></ol><hr />]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Linux </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程4 - zabbix agent</title>
      <link href="/posts/3206/"/>
      <url>/posts/3206/</url>
      
        <content type="html"><![CDATA[<h2 id="添加主机"><a class="markdownIt-Anchor" href="#添加主机"></a> 添加主机</h2><p>添加一个已经配置好的客户端</p><h3 id="zbx添加"><a class="markdownIt-Anchor" href="#zbx添加"></a> ZBX添加</h3><p>ZBX协议添加, 也是我们最常用的一个协议, 一般我们在客户端上安装了zabbix-agent并配置完成后即可进行连接</p><ol><li>打开 配置 &gt; 主机 &gt; 创建主机</li><li>填写<ul><li><strong>主机名称:</strong> 必填, 随意填写即可, 但要见名知意, 一般推荐写IP</li><li><strong>可见的名称:</strong> 如果填写则显示该项目, 如果不填写则显示主机名称, 一般推荐写主机名</li><li><strong>群组:</strong> 选择一个你自己创建的群组</li><li><strong>接口:</strong><ul><li><strong>类型:</strong> 客户端</li><li><strong>IP地址:</strong> 这里写的是客户端的IP</li><li><strong>DNS名称:</strong> 一般不用填写</li><li><strong>连接到:</strong> 内网地址够用, 我们选择IP</li><li><strong>端口:</strong> 10050, zabbix-agent客户端端口默认都是10050, 服务端是10051</li></ul></li></ul></li><li>点击添加, 我们这样就成功添加了一个主机</li></ol><h3 id="添加模板"><a class="markdownIt-Anchor" href="#添加模板"></a> 添加模板</h3><p>Q: 为什么要添加模板?<br />A: 因为不添加模板 <code>可用性</code> 的 <code>ZBX</code> 无法从 <font color="#7f7f7f">灰色</font> 变为 <font color="#9bbb59">绿色</font></p><ol><li>打开 配置 &gt; 主机 &gt; 点击一个主机 &gt; 模板</li><li>点击 选择 , 选中 <strong>Template OS Linux by Zabbix agent</strong> , 点击 更新 后就完成了</li><li>在确认为绿色后就可以删了, 我们后续可以自己去定义模板</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Linux </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程3 - zabbix proxy</title>
      <link href="/posts/52295/"/>
      <url>/posts/52295/</url>
      
        <content type="html"><![CDATA[<h2 id="zabbix-代理端安装"><a class="markdownIt-Anchor" href="#zabbix-代理端安装"></a> zabbix 代理端安装</h2><p>如果我们服务器数量太过庞大, 由众多客户端发送大量零散的小数据包可能会导致服务端崩溃, 这时候就需要使用代理端进行统一数据包并一起发送给服务端</p><h3 id="安装zabbix库"><a class="markdownIt-Anchor" href="#安装zabbix库"></a> 安装Zabbix库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-proxy"><a class="markdownIt-Anchor" href="#安装zabbix-proxy"></a> 安装zabbix-proxy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install OpenIPMI unixODBC<br>yum install fping<br>yum install zabbix-proxy-mysql<br></code></pre></td></tr></table></figure><h3 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install mariadb-server mariadb<br>systemctl <span class="hljs-built_in">enable</span> --now mariadb<br></code></pre></td></tr></table></figure><h3 id="创建数据库并授权"><a class="markdownIt-Anchor" href="#创建数据库并授权"></a> 创建数据库并授权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot<br>mysql&gt; <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&#x27;password&#x27;</span>);<br>mysql&gt; create database zabbix_proxy character <span class="hljs-built_in">set</span> <span class="hljs-string">&#x27;utf8&#x27;</span>;<br>mysql&gt; grant all on zabbix_proxy.* to zbxproxy@localhost identified by <span class="hljs-string">&#x27;zbxproxy&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="导入数据"><a class="markdownIt-Anchor" href="#导入数据"></a> 导入数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zcat /usr/share/doc/zabbix-proxy-mysql-5.0.45/schema.sql.gz | mysql -u zbxproxy -pzbxproxy zabbix_proxy<br></code></pre></td></tr></table></figure><h3 id="修改zabbix-proxy配置文件"><a class="markdownIt-Anchor" href="#修改zabbix-proxy配置文件"></a> 修改zabbix-proxy配置文件</h3><p>修改 /etc/zabbix/zabbix_proxy.conf , 修改下列项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Server=192.168.10.200                            <span class="hljs-comment"># 这里填写的是 zabbix-server 的IP</span><br>Hostname=proxy.zabbix.com                        <span class="hljs-comment"># 必须主机名 (proxy的主机名 必须解析)</span><br>DBHost=localhost<br>DBName=zabbix_proxy<br>DBUser=zbxproxy<br>DBPassword=zbxproxy<br>DBSocket=/var/lib/mysql/mysql.sock<br></code></pre></td></tr></table></figure><h3 id="设置为开机自启动"><a class="markdownIt-Anchor" href="#设置为开机自启动"></a> 设置为开机自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now zabbix-proxy<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-agent"><a class="markdownIt-Anchor" href="#安装zabbix-agent"></a> 安装zabbix-agent</h3><p>因为我们也需要监控proxy端, 以免proxy端错误我们却不知道, 故安装一个agent端用于代理端被监控</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="修改zabbix-agent配置文件"><a class="markdownIt-Anchor" href="#修改zabbix-agent配置文件"></a> 修改zabbix-agent配置文件</h3><p>修改 /etc/zabbix/zabbix_agentd.conf, 并且修改如下四行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Server=Zabbix                                     <span class="hljs-comment"># Server端主机名或IP地址</span><br>ServerActive= Zabbix                              <span class="hljs-comment"># Server端主机名或IP地址</span><br>Hostname=                                         <span class="hljs-comment"># Agent端的主机名</span><br>UnsafeUserParameters=1                            <span class="hljs-comment"># 是否限制用户自定义keys使用特殊字符</span><br></code></pre></td></tr></table></figure><h3 id="设置为开机自启动-2"><a class="markdownIt-Anchor" href="#设置为开机自启动-2"></a> 设置为开机自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now zabbix-agent<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Linux </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程2 - zabbix安装</title>
      <link href="/posts/3526/"/>
      <url>/posts/3526/</url>
      
        <content type="html"><![CDATA[<h2 id="zabbix-服务端安装"><a class="markdownIt-Anchor" href="#zabbix-服务端安装"></a> zabbix 服务端安装</h2><p>在<a href="https://www.zabbix.com/cn/download">zabbix.com</a> (zabbix官网)可以按需下载</p><h3 id="安装zabbix库"><a class="markdownIt-Anchor" href="#安装zabbix库"></a> 安装Zabbix库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-server-web前端-agent"><a class="markdownIt-Anchor" href="#安装zabbix-server-web前端-agent"></a> 安装Zabbix server, Web前端, agent</h3><p>因为在zabbix服务器也需要监控自己, 所以需要在zabbix服务端安装agent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install zabbix-server-mysql zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="安装zabbix前端"><a class="markdownIt-Anchor" href="#安装zabbix前端"></a> 安装Zabbix前端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install centos-release-scl<br></code></pre></td></tr></table></figure><h4 id="启用前端"><a class="markdownIt-Anchor" href="#启用前端"></a> 启用前端</h4><p>编辑配置文件 /etc/yum.repos.d/zabbix.repo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[zabbix-frontend]<br>enabled=1<br></code></pre></td></tr></table></figure><h4 id="安装zabbix前端软件包"><a class="markdownIt-Anchor" href="#安装zabbix前端软件包"></a> 安装Zabbix前端软件包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install zabbix-web-mysql-scl zabbix-apache-conf-scl<br></code></pre></td></tr></table></figure><h3 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install mariadb-server mariadb<br>systemctl <span class="hljs-built_in">enable</span> --now mariadb<br></code></pre></td></tr></table></figure><h4 id="创建初始数据库"><a class="markdownIt-Anchor" href="#创建初始数据库"></a> 创建初始数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot<br>mysql&gt; <span class="hljs-built_in">set</span> password=password(<span class="hljs-string">&#x27;password&#x27;</span>);<br>mysql&gt; create database zabbix character <span class="hljs-built_in">set</span> utf8 collate utf8_bin;<br>mysql&gt; create user zabbix@localhost identified by <span class="hljs-string">&#x27;password&#x27;</span>;<br>mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;<br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 1;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><h4 id="导入初始架构和数据"><a class="markdownIt-Anchor" href="#导入初始架构和数据"></a> 导入初始架构和数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p<span class="hljs-string">&#x27;password&#x27;</span> zabbix<br></code></pre></td></tr></table></figure><h4 id="关闭binlog"><a class="markdownIt-Anchor" href="#关闭binlog"></a> 关闭binlog</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -uroot -p<span class="hljs-string">&#x27;password&#x27;</span><br>mysql&gt; <span class="hljs-built_in">set</span> global log_bin_trust_function_creators = 0;<br>mysql&gt; quit;<br></code></pre></td></tr></table></figure><h3 id="为zabbix-server配置数据库"><a class="markdownIt-Anchor" href="#为zabbix-server配置数据库"></a> 为Zabbix server配置数据库</h3><p>编辑配置文件 /etc/zabbix/zabbix_server.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DBPassword=password<br></code></pre></td></tr></table></figure><h3 id="为zabbix前端配置php"><a class="markdownIt-Anchor" href="#为zabbix前端配置php"></a> 为Zabbix前端配置PHP</h3><p>编辑配置文件 /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php_value[date.timezone] = Asia/Shanghai<br></code></pre></td></tr></table></figure><h3 id="启动zabbix-server和agent进程"><a class="markdownIt-Anchor" href="#启动zabbix-server和agent进程"></a> 启动Zabbix server和agent进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart zabbix-server zabbix-agent httpd rh-php72-php-fpm<br>systemctl <span class="hljs-built_in">enable</span> zabbix-server zabbix-agent httpd rh-php72-php-fpm<br></code></pre></td></tr></table></figure><h3 id="配置zabbix网页端"><a class="markdownIt-Anchor" href="#配置zabbix网页端"></a> 配置zabbix网页端</h3><p>在你的浏览器输入<code>[你的IP]/zabbix</code>访问网页端查看是否配置成功</p><h4 id="zabbix网页端初始化"><a class="markdownIt-Anchor" href="#zabbix网页端初始化"></a> zabbix网页端初始化</h4><p>打开网页后你会看到zabbix的网页端初始化界面</p><h5 id="welcome"><a class="markdownIt-Anchor" href="#welcome"></a> Welcome</h5><p>![[{4C741B01-B40E-4562-B42E-D5D7EADCE8BF}.png]]<br />选择Next step</p><h5 id="check-of-pre-requisites"><a class="markdownIt-Anchor" href="#check-of-pre-requisites"></a> Check of pre-requisites</h5><p>这一选项中一定要保证所有项都是<font color="#9bbb59">OK</font>, 如果你发现了<font color="#c0504d">Fail</font>请尝试修复</p><h5 id="configure-db-connection"><a class="markdownIt-Anchor" href="#configure-db-connection"></a> Configure DB connection</h5><p>配置zabbix所连接的数据库</p><p><strong>Database type:</strong> 选择你刚刚安装的数据库类型(其实目前为止只支持mysql)<br /><strong>Database host:</strong> 填写你的数据库IP<br /><strong>Database port:</strong> 输入数据库端口(0为使用默认端口, 如果是mysql就是3306)<br /><strong>Database name:</strong> 数据库名称(注意是库名, 而不是用户名)<br /><strong>User:</strong> 数据库用户名(默认为zabbix)<br /><strong>Password:</strong> 数据库用户密码</p><h5 id="zabbix-server-details"><a class="markdownIt-Anchor" href="#zabbix-server-details"></a> Zabbix server details</h5><p>一些其他细节配置, 包括主机名或IP地址以及默认监听端口<br />一般不用进行修改, 直接选择下一步</p><h5 id="install"><a class="markdownIt-Anchor" href="#install"></a> Install</h5><p>初始化并安装<br />在这里可以看到你之前所有的配置, 建议在这个页面仔细检查后在进行安装<br />安装后若出现: <font color="#9bbb59">Congratulations! You have successfully installed Zabbix frontend.</font> 则代表安装成功</p><h4 id="进入zabbix网页端"><a class="markdownIt-Anchor" href="#进入zabbix网页端"></a> 进入Zabbix网页端</h4><p>安装后点击完成, 登陆页面的账号是<code>Admin</code>, 密码是<code>zabbix</code> (密码是上面你所填写的)</p><h5 id="设置中文"><a class="markdownIt-Anchor" href="#设置中文"></a> 设置中文</h5><p>打开zabbix网页端, 选择<strong>Administration</strong> &gt; <strong>Users</strong> &gt; <strong>Admin</strong> &gt; <strong>Language</strong>, 将English(en_GB)修改为chinese(zh_CN)并选择update</p><h3 id="查看zabbix-server日志"><a class="markdownIt-Anchor" href="#查看zabbix-server日志"></a> 查看zabbix-server日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail -f /var/log/zabbix/zabbix_server.log<br></code></pre></td></tr></table></figure><h2 id="zabbix客户端安装snmp"><a class="markdownIt-Anchor" href="#zabbix客户端安装snmp"></a> zabbix客户端安装snmp</h2><h3 id="安装snmp"><a class="markdownIt-Anchor" href="#安装snmp"></a> 安装snmp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install net-snmp net-snmp-utils<br></code></pre></td></tr></table></figure><h3 id="修改snmp配置文件"><a class="markdownIt-Anchor" href="#修改snmp配置文件"></a> 修改snmp配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;^[a-Z]&quot;</span> /etc/snmp/snmpd.conf<br><br><span class="hljs-comment"># 设置团体名，默认为public,可以自定义</span><br>com2sec notConfigUser  default       public<br><span class="hljs-comment"># 设置组，将团体名称中的 notConfigUser 关联至组 notConfigGroup，提供v1,v2c协议</span><br>group   notConfigGroup v1           notConfigUser<br>group   notConfigGroup v2c          notConfigUser<br>view    systemview    included   .1.3.6.1.2.1.1<br>view    systemview    included   .1.3.6.1.2.1.25.1.1<br><span class="hljs-comment"># 参照上面的格式，自定义视图OID权限（能获取网络设备的那些数据）</span><br>view    systemview    included   .1.3.6.1 <br><span class="hljs-comment"># 将组notConfigGroup关联至systemview，定义组的访问权限</span><br>access  notConfigGroup <span class="hljs-string">&quot;&quot;</span>      any       noauth    exact  systemview  none none<br>syslocation Unknown (edit /etc/snmp/snmpd.conf)<br>syscontact Root &lt;root@localhost&gt; (configure /etc/snmp/snmp.local.conf)<br>dontLogTCPWrappersConnects <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h3 id="启动snmp服务"><a class="markdownIt-Anchor" href="#启动snmp服务"></a> 启动snmp服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now snmpd<br></code></pre></td></tr></table></figure><h3 id="检查进程"><a class="markdownIt-Anchor" href="#检查进程"></a> 检查进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@zabbix-snmp ~]<span class="hljs-comment"># ps -ef | grep snmpd</span><br>root       1856      1  0 14:56 ?        00:00:00 /usr/sbin/snmpd -LS0-6d -f<br>root       1890   1714  0 15:04 pts/0    00:00:00 grep --color=auto snmpd<br></code></pre></td></tr></table></figure><h3 id="检查端口"><a class="markdownIt-Anchor" href="#检查端口"></a> 检查端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@zabbix-snmp ~]<span class="hljs-comment"># ss -anltpu | grep snmpd</span><br>udp    UNCONN     0      0         *:161                   *:*                   <span class="hljs-built_in">users</span>:((&quot;snmpd&quot;,pid=<span class="hljs-number">1856</span>,fd=<span class="hljs-number">6</span>))<br>tcp    LISTEN     0      128    127.0.0.1:199              *:*                   <span class="hljs-built_in">users</span>:((&quot;snmpd&quot;,pid=<span class="hljs-number">1856</span>,fd=<span class="hljs-number">7</span>))<br></code></pre></td></tr></table></figure><hr /><h2 id="zabbix服务端安装snmp"><a class="markdownIt-Anchor" href="#zabbix服务端安装snmp"></a> zabbix服务端安装snmp</h2><h3 id="安装snmp-2"><a class="markdownIt-Anchor" href="#安装snmp-2"></a> 安装snmp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install net-snmp-utils<br></code></pre></td></tr></table></figure><h3 id="在服务端采集客户端的数据"><a class="markdownIt-Anchor" href="#在服务端采集客户端的数据"></a> 在服务端采集客户端的数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snmpwalk -v 2c -c public 192.168.100.72  <span class="hljs-keyword">if</span><br></code></pre></td></tr></table></figure><p>能查看则表示部署没问题，可以在web端配置snmp监控了。</p><h3 id="snmp添加"><a class="markdownIt-Anchor" href="#snmp添加"></a> SNMP添加</h3><p>在前面我们主要讲到怎么监控服务器，用的是agent程序。但是如果想监控如打印机、交换机、路由器等设备，前面的方式是不可行的，因为在这些设备上安装完整的操作系统和Zabbix agent是不可能的。<br />所以，这个时候我们需要借助snmp协议来获取网络设备的相关数据。<br />SNMP是英文&quot;Simple Network Management Protocol&quot;的缩写，即“简单网络管理协议&quot;。它属于 TCP/IP 协议中的<strong>应用层协议</strong>，主要用于管理网络设备的协议。</p><ol><li>打开 配置 &gt; 主机 &gt; 创建主机</li><li>填写<ul><li><strong>主机名称:</strong> 必填, 随意填写即可, 但要见名知意, 一般推荐写IP</li><li><strong>可见的名称:</strong> 如果填写则显示该项目, 如果不填写则显示主机名称, 一般推荐写主机名</li><li><strong>群组:</strong> 选择一个你自己创建的群组</li><li><strong>接口:</strong><ul><li><strong>类型:</strong> SNMP</li><li><strong>IP地址:</strong> 这里写的是客户端的IP</li><li><strong>DNS名称:</strong> 一般不用填写</li><li><strong>连接到:</strong> 内网地址够用, 我们选择IP</li><li><strong>端口:</strong> 161, snmp端口默认都是161</li></ul></li></ul></li><li>点击添加, 我们这样就成功添加了一个主机</li></ol><h3 id="添加模板"><a class="markdownIt-Anchor" href="#添加模板"></a> 添加模板</h3><p>Q: 为什么要添加模板?<br />A: 因为不添加模板 <code>可用性</code> 的 <code>ZBX</code> 无法从 <font color="#7f7f7f">灰色</font> 变为 <font color="#9bbb59">绿色</font></p><ol><li>打开 配置 &gt; 主机 &gt; 点击一个主机 &gt; 模板</li><li>点击 选择 , 选中 <strong>Template OS Linux by Zabbix agent</strong> , 点击 更新 后就完成了</li><li>在确认为绿色后就可以删了, 我们后续可以自己去定义模板</li></ol><hr /><h2 id="zabbix-客户端安装"><a class="markdownIt-Anchor" href="#zabbix-客户端安装"></a> zabbix 客户端安装</h2><p>相比于服务端, 客户端的安装非常简单, 通常我们只需要安装zabbix-agent并设置为开机自启动, 然后对配置文件进行一些调整即可实现监控</p><h3 id="安装zabbix库-2"><a class="markdownIt-Anchor" href="#安装zabbix库-2"></a> 安装Zabbix库</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rpm</span> -Uvh https://repo.zabbix.com/zabbix/<span class="hljs-number">5</span>.<span class="hljs-number">0</span>/rhel/<span class="hljs-number">7</span>/x86_64/zabbix-release-<span class="hljs-number">5</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1</span>.el7.noarch.rpm<br></code></pre></td></tr></table></figure><h3 id="安装zabbix-agent"><a class="markdownIt-Anchor" href="#安装zabbix-agent"></a> 安装zabbix agent</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="修改zabbix-agent配置文件"><a class="markdownIt-Anchor" href="#修改zabbix-agent配置文件"></a> 修改zabbix-agent配置文件</h3><p>修改 /etc/zabbix/zabbix_agentd.conf, 并且修改如下四行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Server=Zabbix                                     <span class="hljs-comment"># Server端主机名或IP地址</span><br>ServerActive= Zabbix                              <span class="hljs-comment"># Server端主机名或IP地址</span><br>Hostname=                                         <span class="hljs-comment"># Agent端的主机名</span><br>UnsafeUserParameters=1                            <span class="hljs-comment"># 是否限制用户自定义keys使用特殊字符</span><br></code></pre></td></tr></table></figure><h3 id="设置为开机自启动"><a class="markdownIt-Anchor" href="#设置为开机自启动"></a> 设置为开机自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> --now zabbix-agent<br></code></pre></td></tr></table></figure><h3 id="查看zabbix-agent日志"><a class="markdownIt-Anchor" href="#查看zabbix-agent日志"></a> 查看zabbix-agent日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tail -f /var/log/zabbix/zabbix_agentd.log<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Linux </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix教程1 - zabbix简介</title>
      <link href="/posts/26629/"/>
      <url>/posts/26629/</url>
      
        <content type="html"><![CDATA[<h2 id="监控系统简介"><a class="markdownIt-Anchor" href="#监控系统简介"></a> 监控系统简介</h2><h3 id="nagios"><a class="markdownIt-Anchor" href="#nagios"></a> Nagios</h3><p>Nagios 是一款开源的网络监控系统, 它具有强大的功能和灵活的配置选项. Nagios可以监控网络设备、服务器、应用程序和服务的状态, 并提供实时的警报和通知. 它支持自定义插件, 可以根据特定需求进行扩展.</p><h3 id="prometheus"><a class="markdownIt-Anchor" href="#prometheus"></a> Prometheus</h3><p>Prometheus 是一个开源的监控和警报工具, 它专注于以时间序列数据为基础的监控. Prometheus具有灵活的查询语言和强大的数据模型, 可以收集、存储和分析各种指标数据. 它还提供了丰富的可视化选项和警报机制.</p><h3 id="grafana"><a class="markdownIt-Anchor" href="#grafana"></a> Grafana</h3><p>Grafana 是一个开源的数据可视化工具, 它可以与多个监控系统集成, 包括Zabbix、Prometheus等. Grafana提供了仪表盘和图表的创建功能, 可以将监控数据可视化展示, 帮助用户更好地理解和分析数据.</p><h3 id="sensu"><a class="markdownIt-Anchor" href="#sensu"></a> Sensu</h3><p>Sensu 是一个分布式的监控解决方案, 适用于云原生和混合云环境. 它具有灵活的插件系统和可扩展性, 支持多种集成方式和通知渠道. Sensu可以监控基础设施、应用程序和服务, 并提供实时的警报和通知功能.</p><h3 id="icinga"><a class="markdownIt-Anchor" href="#icinga"></a> Icinga</h3><p>Icinga 是一个开源的网络监控系统, 它是 Nagios 的一个分支, 提供了更现代化和用户友好的界面. Icinga具有强大的配置和扩展性, 支持多种监控方式和插件. 它可以监控主机、服务和网络设备, 并提供灵活的报警机制.</p><hr /><h2 id="zabbix介绍"><a class="markdownIt-Anchor" href="#zabbix介绍"></a> zabbix介绍</h2><p>Zabbix 是一款功能强大的开源网络监控系统, 用于监测和追踪 IT 基础设施的状态和性能. 它提供了广泛的监控、报警和可视化功能, 能够监控服务器、网络设备、虚拟机、应用程序等各种资源.</p><p>以下是 Zabbix 的一些主要特点和功能：</p><ol><li>监控功能：Zabbix 可以实时监控各种指标, 包括服务器的 CPU 使用率、内存消耗、网络流量、磁盘空间使用等. 它还支持监控网络设备的连通性、端口状态等信息. Zabbix 可以通过自定义的监控项和模板来监控各种不同类型的资源.</li><li>自动发现和自动注册：Zabbix 可以自动发现网络上的设备和服务, 并将其添加到监控系统中. 它还支持自动注册功能, 允许新的主机自动加入监控系统并开始监控.</li><li>灵活的报警机制：Zabbix 可以根据定义的触发条件发送警报通知, 包括电子邮件、短信、Slack 等多种方式. 它还支持灵活的告警升级和通知的逻辑配置.</li><li>可视化和报表：Zabbix 提供了仪表盘和图表的创建功能, 可以可视化展示监控数据并进行趋势分析. 它还支持创建自定义报表和图表, 以满足用户的特定需求.</li><li>分布式监控：Zabbix 可以通过分布式架构实现高可用性和水平扩展. 它支持多个 Zabbix 服务器之间的数据同步和负载均衡, 以及分布式代理的使用, 使监控系统更加强大和可靠.</li><li>API 和集成：Zabbix 提供了丰富的 API 接口, 可以与其他系统进行集成, 例如自动化工具、配置管理系统等. 它还支持与第三方应用程序和插件的集成, 扩展了其功能和灵活性.</li></ol><p>总体而言, Zabbix 是一款功能丰富、灵活可扩展的监控系统, 适用于各种规模的 IT 环境. 它具有广泛的监控能力、强大的报警机制和可视化功能, 帮助用户实时监控和管理其基础设施, 提高系统的可靠性和性能.</p><hr /><h2 id="zabbix-jmx的特点"><a class="markdownIt-Anchor" href="#zabbix-jmx的特点"></a> zabbix-JMX的特点</h2><h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3><ol><li>针对Java应用程序：JMX专门设计用于监控和管理Java应用程序。它提供了直接访问Java虚拟机（JVM）内部的能力，可以监控JVM的状态、线程、内存使用情况等，并且可以通过MBeans（Managed Beans）暴露自定义的应用程序指标。</li><li>动态配置和管理：JMX提供了动态配置和管理的能力。您可以通过JMX接口动态添加或删除监控项，修改监控参数，以及在运行时对应用程序进行管理和调整。这使得JMX非常适用于需要动态管理和调优的场景。</li><li>强大的生态系统：JMX有一个庞大的生态系统，提供了许多现成的工具和框架来支持JMX的监控和管理。例如，您可以使用JConsole、VisualVM等工具来可视化地监控和管理JMX。</li><li>高度可扩展：JMX支持自定义的MBeans，您可以根据应用程序的需要定义自己的MBeans，并暴露自定义的指标和操作。这使得JMX非常灵活和可扩展。</li></ol><h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3><ol><li>仅限于Java应用程序：JMX主要适用于Java应用程序的监控和管理，对于其他类型的应用程序或设备，可能需要其他监控方案。</li><li>配置复杂性：JMX的配置可能相对复杂，需要在应用程序中正确设置JMX代理和MBeans。此外，需要确保JMX的安全性和访问权限的管理。</li><li>监控粒度限制：JMX主要关注Java应用程序的内部状态和指标，可能无法提供对底层操作系统、网络设备等的直接监控。这可能需要与其他监控方案（如Zabbix代理或SNMP）结合使用。</li></ol><hr /><h2 id="zabbix-snmp的特点"><a class="markdownIt-Anchor" href="#zabbix-snmp的特点"></a> zabbix-snmp的特点</h2><h3 id="优点-2"><a class="markdownIt-Anchor" href="#优点-2"></a> 优点</h3><ol><li>简化的部署：SNMP使用标准协议，通常无需在被监视设备上安装额外的软件，只需启用SNMP服务即可。这使得SNMP的部署相对简单，节省了配置和管理的工作量。</li><li>跨平台支持：SNMP是一种通用的网络管理协议，几乎可以在任何网络设备和操作系统上使用。因此，SNMP能够提供广泛的兼容性和跨平台支持。</li><li>扩展性：SNMP支持各种标准的MIB（Management Information Base），可以监控和管理各种不同类型的网络设备和应用程序。这使得SNMP非常适合大规模和复杂的网络环境。</li><li>资源消耗低：SNMP协议使用UDP传输，相对于Zabbix代理使用的主动TCP连接，它的资源消耗相对较低。这对于资源受限的设备或网络来说是一个优势。</li></ol><h3 id="缺点-2"><a class="markdownIt-Anchor" href="#缺点-2"></a> 缺点</h3><ol><li>有限的监控功能：相对于使用Zabbix代理，使用SNMP的监控功能可能相对有限。SNMP主要用于收集设备的状态信息和性能指标，而Zabbix代理可以提供更丰富的监控功能，如主动监控、自定义参数等。</li><li>安全性问题：由于SNMP使用明文传输，可能存在安全风险。SNMP v3引入了加密和身份验证等安全机制，但在实际部署中，仍需要注意配置和管理SNMP的安全性。</li><li>配置复杂性：SNMP的配置相对于Zabbix代理可能更加复杂，需要正确设置SNMP服务和相关的MIB信息。此外，在大规模网络中管理和配置SNMP可能需要额外的努力和注意事项。</li></ol><p>总结起来，SNMP在部署简单、跨平台支持和扩展性方面具有优势，但在监控功能的丰富性、安全性和配置复杂性方面与Zabbix代理相比存在一些限制。选择使用哪种方式取决于具体的监控需求、设备类型和网络环境等因素。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Linux </tag>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux速通Wayland - 第一章</title>
      <link href="/posts/4214/"/>
      <url>/posts/4214/</url>
      
        <content type="html"><![CDATA[<p>本教程将用最简单的方式教小白入ArchLinux</p><ul><li>使用Archinstall是速通ArchLinux的最好方法(做软raid别用)</li><li>个人认为wayland是最舒服的桌面, 而且配置简单, 强烈推荐</li></ul><h2 id="事前准备"><a class="markdownIt-Anchor" href="#事前准备"></a> 事前准备</h2><p>选择Arch Linux install medium进入live<br />更新本地库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -Sy<br></code></pre></td></tr></table></figure><p>若下载速度变慢可以直接CTRL+C中断然后再次更新, 这时候速度就快了<br />下载archinstall, 下一期出一个不用archinstall的, 不过archinstall更好用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pacman -S archinstall<br></code></pre></td></tr></table></figure><h2 id="安装部署"><a class="markdownIt-Anchor" href="#安装部署"></a> 安装部署</h2><p>输入archinstall进入install界面</p><ol><li>Archinstall language默认英文不改, 也可以选择喜欢的语言(无中文)</li><li>Locales 先不用修改, 之后再改也一样</li><li>Mirrors and repositories  镜像存储库<ol><li>Select regions 等待列表出现, 键入/搜索china回车确定选择</li><li>进入Optional repositories 选中multilib并按空格选中, 回车确定</li></ol></li><li>Disk configuration 选择Partitioning<ol><li>若无其他需求选择Use a best-effort default partition layout, 键入空格选择需要的硬盘并回车确定</li><li>按照个人需求选择格式化, 建议选择xfs或者f2fs</li></ol></li><li>Swap不用关, 默认是开的</li><li>Bootloader也是根据个人喜好选择, 个人比较喜欢Limine, 选择grub也可以, 都行</li><li>Hostname, 输入你的主机名</li><li>Authentication<ol><li>Root password Root用户的密码, 建议设置为自己能记住且复杂的, 否则会有好玩的事情发生</li><li>User account 这里我们创建一个用户, 这个用户是常用</li></ol></li><li>Profile 选择type并选择Minimal</li><li>Applications<ol><li>Bluetooth打开</li><li>Audio按照自己喜好选择, 我这里选择了pipewire 因为用起来更舒服</li></ol></li><li>Kernels 请谨慎选择, 建议默认或者zen, 这会对你稍后安装显卡驱动造成影响</li><li>Network configuration选择networkmanager, 其实选哪个都行</li><li>Additional packages, 选择你要加的库</li><li>Timezone键入/搜索shanghai并选定<br />Install<br />安装完成后选择Reboot system重启</li></ol><p>怎么样, archinstall是不是很简单, 连下载到安装用不了几分钟</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ArchLinux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 安装 </tag>
            
            <tag> 部署 </tag>
            
            <tag> ArchLinux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈 - 鸿蒙没有电脑分区</title>
      <link href="/posts/842d6e9/"/>
      <url>/posts/842d6e9/</url>
      
        <content type="html"><![CDATA[<p>最近不知道是不是染上了什么东西<br />只要我一打开手机, 不管是B站还是抖音, 都会给我推各种关于鸿蒙系统/鸿蒙电脑的视频, 烦不胜烦<br />你说我一个臭运维一没买华为设备, 二没主动寻找过鸿蒙的任何文章, 视频<br />为什么就非要让我美好的一天从刷到逆天网友结束呢?</p><p>尤其是其中一些大脑发育不完全, 小脑完全不发育的逆天言论, 真的是想让我一脚把他们踹进变电箱, 然后用核心交换机死死压住, 把他们的B嘴打开, 用漏液的铅酸电池一点一点腐蚀他们那张只知道胡咧咧污染我大脑的嘴彻底消失在世界上</p><p>我决定, 只要让我在刷到鸿蒙相关的视频底下看到有傻逼乱说话的时候我就发视频恶心他们, 否则难消我心头只恨</p><p>首先就是典中典:</p><h2 id="啊-鸿蒙电脑不用分区-再也不用担心c盘不够用了"><a class="markdownIt-Anchor" href="#啊-鸿蒙电脑不用分区-再也不用担心c盘不够用了"></a> 啊, 鸿蒙电脑不用分区, 再也不用担心C盘不够用了!</h2><p>首先, 我没有鸿蒙电脑, 其次, 我有办公本Windows一台, Linux(Arch_X86)一台, 游戏本Windows 一台, 台式Linux和Windwos各一台, 苹果一台M3Air, 一台X86的Pro.</p><p>所以在这里我相信我用Linux代替Unix或者鸿蒙系统你们不会反对吧</p><p>我们先不说分区问题, 来你们这些畜生告诉你爹你爹现在在干嘛, 来</p><p>我假设你有一个用户, 名字就叫做user</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd -m user &amp;&amp; <span class="hljs-built_in">echo</span> 123 | passwd --stdin user<br></code></pre></td></tr></table></figure><p>我们来创建一些目录以达到模拟桌面的目的</p><p>像什么文档, 视频, 音乐, 桌面<br />像这样分类肯定是需要的吧, 如果不分类你文件直接乱扔你自己都找不到, 办公根本就是无稽之谈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> &#123;Docs,Videos,Music,Desktop&#125;<br></code></pre></td></tr></table></figure><p>那现在来模拟一下假如说你Linux硬盘不够用该怎么办<br />我们先把这个假如说现在我的家目录被填满了, 我们创建一个大文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=./Desktop/harmony.txt bs=1M count=10000<br><span class="hljs-built_in">df</span> -h ./<br></code></pre></td></tr></table></figure><p>是不是需要加硬盘? 或者说扩容?<br />加上硬盘之后我们就得挂载, 不然用不了<br />有两种方式, 一种是直接给/扩容, 但是以你们鸿蒙粉丝的智力肯定是没法做到的<br />还有一种方式更加人性化, 而且是有实际应用的<br />比如说你单独给某一个目录挂载, 这样就算系统盘坏了也不会造成重要数据丢失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">parted /dev/sdb mklabel gpt<br>parted /dev/sdb mkpart primary 0% 100%<br>mkfs.ext4 /dev/sdb1<br>(<span class="hljs-built_in">mkdir</span> ./Desktop/Doc/work &amp;&amp; mount /dev/sdb1 ./Desktop/Doc/work)<br></code></pre></td></tr></table></figure><p>你们来看看这像不像你们windows创建分区的时候?</p><p>其实一开始我想了很多Windows和unix的不同, 比如说目录树, 每个目录分别有什么用之类的, 但是我朋友说你跟他们说这个他们也不懂, 因为我朋友就是华为用户, 学医的, 他也不懂这些, 就是因为我总是指着他的脑袋给他科普他才懂了一些.</p><p>很多鸿蒙粉丝非要去说是因为windows把应用安装在C盘系统盘才导致电脑非常卡, 其实unix才是直接把应用扔到系统盘的, 所谓的卡是因为盘空间不够了, 其实windows只是会卡顿报错已经很不错了, 这要是linux空间不够可是会带来毁灭性打击的, 毕竟苦逼的运维可以遇到世界上的任何问题</p><p>最后给大伙来点儿好玩儿的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/dev/sda bs=1M status=progress<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈 - 聊聊最近的糟心事</title>
      <link href="/posts/51444/"/>
      <url>/posts/51444/</url>
      
        <content type="html"><![CDATA[<blockquote><p>千万不要用redis的超时来做定时, 我后悔了</p></blockquote><h2 id="服务器问题"><a class="markdownIt-Anchor" href="#服务器问题"></a> 服务器问题</h2><p>不知道从什么时候开始, 家里的服务器全都瘫痪了, 因为家里所有资料存储用的都是mariadb+redis+mongodb<br />所以不知道被什么东西影响了神智的我直接去回溯了数据库, 还有我的文件自动压缩备份也被我清除了, 我下意识觉得那没用, 可我却忘记了哪里存储着几乎从高中到工作的所有灵感与作品.<br />哈哈, 我也不知道为什么我突然这么蠢, 我在恢复之前没有备份, 自动备份脚本每隔30天运行一次, 导致我对当前网站所进行的所有改动全部付之一炬, 从底层开始修改, 细分, 超过140M的代码全都飞灰湮灭了, 哎, 我尝试修复了, 但得到的是一堆乱码, 拿去专门搞数据恢复的店里人家说我私人操作数据恢复导致数据恢复几乎是不可能的事.<br />是的, 其实服务器瘫痪的原因是我的存储服务器(包括了数据库)烂掉了, 我给我3台存储服务器做了raid1, 然后做了MFS, 但是…<br />我现在有些后悔全都做raid1了, 也许当初可以多花些钱多买些盘, 做raid5或者raid10是更好的选择.</p><hr /><h2 id="交换机问题"><a class="markdownIt-Anchor" href="#交换机问题"></a> 交换机问题</h2><p>我买的这台比我年龄都大的Cisco交换机好像有些死了, 丢包实在太严重了, 我怀疑是光口出问题了, 但问题是, 我其实并不想继续用交换机, 我家只有机柜中那十几台服务器, 至于其他的并没有, 但是我又懒得去下架, 这让我很纠结.<br />实际上, 算上现在正在码字吐槽的时间, 距离我发现交换机老化严重的时间差不多过去了9天. 但直到现在我依然懒得去下架交换机, 我意识到这是我懒, 但不知为什么, 每当我进入机房我心底总会出现下回再说.</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 闲聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SXPSL: 在Centos7上部署秘密实验室教程</title>
      <link href="/posts/24757/"/>
      <url>/posts/24757/</url>
      
        <content type="html"><![CDATA[<p><strong>提示</strong></p><blockquote><p>前言，如果你是用的是Centos9那么就不需要这么麻烦了<br />前言，如果没有特殊需要可以直接使用LGSM，更方便更快捷</p></blockquote><h2 id="更换软件源"><a class="markdownIt-Anchor" href="#更换软件源"></a> 更换软件源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份软件源</span><br>cp -fr /etc/yum.repos.d/ /etc/yum.repos.d.bak<br>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载备用依赖</span><br>yum -y install wget epel-release screen glibc.i686 python3 libselinux libselinux-devel<br>yum -y groupinstall &#x27;Development Tools&#x27;<br></code></pre></td></tr></table></figure><h3 id="添加scl源"><a class="markdownIt-Anchor" href="#添加scl源"></a> 添加scl源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y centos-release-scl centos-release-scl-rh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl.repo</span><br>[centos-sclo-sclo]<br>name=CentOS-7 - SCLo sclo<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/sclo/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo</span><br>[centos-sclo-rh]<br>name=CentOS-7 - SCLo rh<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/rh/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br></code></pre></td></tr></table></figure><h2 id="源码包编译"><a class="markdownIt-Anchor" href="#源码包编译"></a> 源码包编译</h2><h3 id="升级make43"><a class="markdownIt-Anchor" href="#升级make43"></a> 升级make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O - https://ftp.gnu.org/gnu/make/make-4.3.tar.gz | tar -xz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>wget -O - https://mirrors.aliyun.com/gnu/make/make-4.3.tar.gz | tar -xz<br></code></pre></td></tr></table></figure><h3 id="编译安装make43"><a class="markdownIt-Anchor" href="#编译安装make43"></a> 编译安装make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd make-4.3/ &amp;&amp; mkdir build &amp;&amp; cd build<br>../configure &amp;&amp; make -j24 &amp;&amp; make install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">寻找有哪些make</span><br><br>[root@scpsl build]# whereis make<br>make: /usr/bin/make /usr/local/bin/make /usr/share/man/man1/make.1.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换make</span><br>cd /usr/bin/<br>mv make make.bak<br>ln -sv /usr/local/bin/make /usr/bin/make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看make是否为4.3版本</span><br>make -v <br></code></pre></td></tr></table></figure><h2 id="升级gcc11"><a class="markdownIt-Anchor" href="#升级gcc11"></a> 升级gcc11</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有可安装的gcc版本</span><br>yum list devtoolset-*-gcc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装gcc11</span><br>yum -y install devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设定并启动gcc11</span><br>scl enable devtoolset-11 bash &amp;&amp; echo &quot;# gcc11&quot; &gt;&gt; /etc/profile &amp;&amp; echo &quot;source /opt/rh/devtoolset-11/enable&quot; &gt;&gt; /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看gcc是否为11版本</span><br>gcc -v<br></code></pre></td></tr></table></figure><h2 id="升级glibc_333"><a class="markdownIt-Anchor" href="#升级glibc_333"></a> 升级GLIBC_3.33</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载并解压glibc</span><br>wget -O - https://ftp.gnu.org/gnu/libc/glibc-2.33.tar.xz | tar -xJ<br>mkdir glibc-2.33/build &amp;&amp; cd glibc-2.33/build/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空环境变量</span><br>LD_LIBRARY_PATH=&#x27;&#x27;<br>../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --build=x86_64-redhat-linux --enable-kernel=3.10.0 --without-gd --disable-profile --with-selinux<br>make -j # 构建时间较长<br>sed -i &#x27;128i\ &amp;&amp; $name ne &quot;nss_test2&quot;&#x27; ../scripts/test-installation.pl<br>make install<br>make -j28 localedata/install-locales<br>service crond restart<br></code></pre></td></tr></table></figure><h2 id="做好事前准备"><a class="markdownIt-Anchor" href="#做好事前准备"></a> 做好事前准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置主机名</span><br>hostnamectl set-hostname scpsl.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里有好几种方法，鉴于SCPSL更新速度并不快，所以我这里单独对SteamCMD进行安装</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建steamcmd用户设置密码并给予sudo权限</span><br>useradd steamcmd -G wheel &amp;&amp; echo &quot;steamcmd&quot; | sudo passwd --stdin steamcmd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建scpsl用户并设置密码</span><br>useradd scpsl -G wheel &amp;&amp; echo &quot;scpsl&quot; | sudo passwd --stdin scpsl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SteamCMD是用于安装与更新Steam专用服务端的命令行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到SteamCMD用户，下载SteamCMD并解压</span><br>su - steamcmd<br>curl -sqL &quot;https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz&quot; | tar zxf -<br></code></pre></td></tr></table></figure><h2 id="部署scpsl服务器"><a class="markdownIt-Anchor" href="#部署scpsl服务器"></a> 部署SCPSL服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动steamcmd</span><br>./steamcmd.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">匿名登陆</span><br>login anonymous<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装scpsl服务端</span><br>app_update 996560<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将游戏目录复制到scpsl用户目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里建议你自己写一个自动化脚本来实现检测更新</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">正常流程不应该是复制过去，但是我这里为了方便就这么干了，你服不服气吧</span><br>sudo cp -fr ./Steam/steamapps/common/SCP\ Secret\ Laboratory\ Dedicated\ Server/* /home/scpsl/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换到scpsl目录</span><br>su - scpsl # 密码是scpsl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以7777端口启动服务器</span><br>./LocalAdmin 7777<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> SCPSL </tag>
            
            <tag> SXPSL </tag>
            
            <tag> 开服 </tag>
            
            <tag> 游戏 </tag>
            
            <tag> 秘密实验室 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM完美配置教程</title>
      <link href="/posts/60432/"/>
      <url>/posts/60432/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文使用的NVM为Windows版本的<strong>nvm-noinstall.zip</strong></p></blockquote><h2 id="下载nvm"><a class="markdownIt-Anchor" href="#下载nvm"></a> 下载NVM</h2><p>去Github或者镜像站查找并下载<a href="https://github.com/coreybutler/nvm-windows/releases">NVM for windows</a></p><h2 id="安装nvm"><a class="markdownIt-Anchor" href="#安装nvm"></a> 安装NVM</h2><p>打开<strong>nvm-noinstall.zip</strong>并解压至自己的目录<br />运行install.cmd(不运行也可以, 我就没有运行, 因为我要自己配置环境变量)</p><h3 id="写配置文件"><a class="markdownIt-Anchor" href="#写配置文件"></a> 写配置文件</h3><p>打开或创建settings.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">root: D:\path\dir\NVM<br>path: D:\path\dir\NVM\NodeJS<br>arch: 64<br>proxy: none<br></code></pre></td></tr></table></figure><p>这里要对对照自己的NVM安装路径进行放置, 并且创建相应的文件</p><h3 id="配环境变量"><a class="markdownIt-Anchor" href="#配环境变量"></a> 配环境变量</h3><p>此电脑 &gt; 属性 &gt; 高级系统设置 &gt; 环境变量<br />在系统变量内部<code>新建</code>两个变量</p><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">变量值</th></tr></thead><tbody><tr><td style="text-align:center">NVM_HOME</td><td style="text-align:center">D:\path\dir\NVM</td></tr><tr><td style="text-align:center">NVM_SYMLINK</td><td style="text-align:center">D:\path\dir\NVM\NodeJS</td></tr></tbody></table><p>然后在 系统变量 内部的 path 添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs npm">D:\path\dir\NVM<br>%NVM_HOME%<br>%NVM_SYMLINK%<br></code></pre></td></tr></table></figure><h3 id="验证安装是否成功"><a class="markdownIt-Anchor" href="#验证安装是否成功"></a> 验证安装是否成功</h3><p>打开cmd或者powershell</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nvm -v<br><span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><hr /><h2 id="配置nodejs"><a class="markdownIt-Anchor" href="#配置nodejs"></a> 配置Nodejs</h2><p>在你的<code>C:\Users\username</code>下创建一个.npmrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs npm">prefix=D:\path\dir\NVM\node_global<br>cache=D:\path\dir\NVM\node_cache<br></code></pre></td></tr></table></figure><p>跟上面一样, 这里也要创建文件, 确保配置文件内的路径与你的目录是一致的</p><h3 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h3><p>在系统变量内部<code>新建</code>两个变量</p><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">变量值</th></tr></thead><tbody><tr><td style="text-align:center">NODE_PATH</td><td style="text-align:center">D:\path\dir\NVM\node_global\node_modules</td></tr></tbody></table><p>然后在 系统变量 内部的 path 添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs npm">%NODE_PATH%<br>D:\path\dir\NVM\node_global<br></code></pre></td></tr></table></figure><hr /><h2 id="安装node"><a class="markdownIt-Anchor" href="#安装node"></a> 安装Node</h2><p>打开CMD或者Powershell</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 列出所有的可下载版本<br>nvm list available<br><br># 使用NVM下载安装<span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span>版本<br>nvm install <span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span><br><br># 使用<span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span>版本<br>use <span class="hljs-number">20</span>.<span class="hljs-number">18</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="配置全局与缓存"><a class="markdownIt-Anchor" href="#配置全局与缓存"></a> 配置全局与缓存</h3><p>其实这一步就是上面的.npmrc, 这里为了避免万一就重复一次, 只是方式不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs npm">npm config set prefix &quot;D:\path\dir\NVM\node_global&quot;<br>npm config set cache &quot;D:\path\dir\NVM\node_cache&quot;<br></code></pre></td></tr></table></figure><h3 id="检查node是否安装成功"><a class="markdownIt-Anchor" href="#检查node是否安装成功"></a> 检查Node是否安装成功</h3><p>打开cmd或者powershell</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br>npm -v<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
          <category> NVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> NodeJS </tag>
            
            <tag> Node </tag>
            
            <tag> nvm </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Centos的GLIB2升级到GLIB3</title>
      <link href="/posts/53385/"/>
      <url>/posts/53385/</url>
      
        <content type="html"><![CDATA[<h2 id="更换软件源"><a class="markdownIt-Anchor" href="#更换软件源"></a> 更换软件源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份软件源</span><br>cp -fr /etc/yum.repos.d/ /etc/yum.repos.d.bak<br>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载备用依赖</span><br>yum -y install wget epel-release screen glibc.i686 python3 libselinux libselinux-devel<br>yum -y groupinstall &#x27;Development Tools&#x27;<br></code></pre></td></tr></table></figure><h3 id="添加scl源"><a class="markdownIt-Anchor" href="#添加scl源"></a> 添加scl源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y centos-release-scl centos-release-scl-rh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl.repo</span><br>[centos-sclo-sclo]<br>name=CentOS-7 - SCLo sclo<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/sclo/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo</span><br>[centos-sclo-rh]<br>name=CentOS-7 - SCLo rh<br>baseurl=https://mirrors.aliyun.com/centos/7/sclo/x86_64/rh/<br>gpgcheck=0<br>enabled=1<br>gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo<br></code></pre></td></tr></table></figure><h2 id="源码包编译"><a class="markdownIt-Anchor" href="#源码包编译"></a> 源码包编译</h2><h3 id="升级make43"><a class="markdownIt-Anchor" href="#升级make43"></a> 升级make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O - https://ftp.gnu.org/gnu/make/make-4.3.tar.gz | tar -xz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或</span><br>wget -O - https://mirrors.aliyun.com/gnu/make/make-4.3.tar.gz | tar -xz<br></code></pre></td></tr></table></figure><h3 id="编译安装make43"><a class="markdownIt-Anchor" href="#编译安装make43"></a> 编译安装make4.3</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd make-4.3/ &amp;&amp; mkdir build &amp;&amp; cd build<br>../configure &amp;&amp; make -j24 &amp;&amp; make install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">寻找有哪些make</span><br><br>[root@scpsl build]# whereis make<br>make: /usr/bin/make /usr/local/bin/make /usr/share/man/man1/make.1.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">替换make</span><br>cd /usr/bin/<br>mv make make.bak<br>ln -sv /usr/local/bin/make /usr/bin/make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看make是否为4.3版本</span><br>make -v <br></code></pre></td></tr></table></figure><h2 id="升级gcc11"><a class="markdownIt-Anchor" href="#升级gcc11"></a> 升级gcc11</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出所有可安装的gcc版本</span><br>yum list devtoolset-*-gcc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装gcc11</span><br>yum -y install devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设定并启动gcc11</span><br>scl enable devtoolset-11 bash &amp;&amp; echo &quot;# gcc11&quot; &gt;&gt; /etc/profile &amp;&amp; echo &quot;source /opt/rh/devtoolset-11/enable&quot; &gt;&gt; /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看gcc是否为11版本</span><br>gcc -v<br></code></pre></td></tr></table></figure><h2 id="升级glibc_333"><a class="markdownIt-Anchor" href="#升级glibc_333"></a> 升级GLIBC_3.33</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载并解压glibc</span><br>wget -O - https://ftp.gnu.org/gnu/libc/glibc-2.33.tar.xz | tar -xJ<br>mkdir glibc-2.33/build &amp;&amp; cd glibc-2.33/build/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清空环境变量</span><br>LD_LIBRARY_PATH=&#x27;&#x27;<br>../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --build=x86_64-redhat-linux --enable-kernel=3.10.0 --without-gd --disable-profile --with-selinux<br>make -j # 构建时间较长<br>sed -i &#x27;128i\ &amp;&amp; $name ne &quot;nss_test2&quot;&#x27; ../scripts/test-installation.pl<br>make install<br>make -j28 localedata/install-locales<br>service crond restart<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos </category>
          
          <category> GLIB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> 教程 </tag>
            
            <tag> 升级 </tag>
            
            <tag> GLIB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
